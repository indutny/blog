<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:base="en">
	<title>Fedor Indutny&#39;s Blog</title>
	<subtitle>Darkside of Software Engineering.</subtitle>
	<link href="https://darksi.de/feed/feed.xml" rel="self"/>
	<link href="https://darksi.de/"/>
	<updated>2024-09-17T00:00:00Z</updated>
	<id>https://darksi.de/</id>
	<author>
		<name>Fedor Indutny</name>
		<email>blackhole@livebox.sh</email>
	</author>
	
	<entry>
		<title>Third Time Is the Charm</title>
		<link href="https://darksi.de/15.third-time-is-the-charm/"/>
		<updated>2024-09-17T00:00:00Z</updated>
		<id>https://darksi.de/15.third-time-is-the-charm/</id>
		<content type="html">&lt;p&gt;With the release of macOS Sequoia many developers must have started
discovering new exciting changes in otherwise settled and stable APIs.&lt;/p&gt;
&lt;p&gt;One good example is Electron&#39;s &lt;a href=&quot;https://www.electronjs.org/docs/latest/api/desktop-capturer&quot;&gt;&lt;code&gt;desktopCapturer&lt;/code&gt;&lt;/a&gt; that lets apps list
windows and screens available for screensharing and then stream their contents
during a video call. With the Sequoia release, however, using &lt;code&gt;desktopCapturer&lt;/code&gt;
directly presents &lt;a href=&quot;https://9to5mac.com/2024/08/06/macos-sequoia-screen-recording-privacy-prompt/&quot;&gt;an extra window to popup&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;enter-pac-man&quot; tabindex=&quot;-1&quot;&gt;Enter Pac-Man &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/15.third-time-is-the-charm/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thankfully, Electron team was anticipating this API transition and has prepared
a &lt;a href=&quot;https://github.com/electron/electron/pull/43581&quot;&gt;change&lt;/a&gt; that lets macOS developers leverage the new APIs and
avoid the popup. After migrating the source code over, an unexpected oddity has
appeared in the testing. When sharing the screen for the first and the second
time screensharing the user would see the expected video:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://darksi.de/img/aEiZGfC1CK-1010.avif 1010w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://darksi.de/img/aEiZGfC1CK-1010.webp 1010w&quot;&gt;&lt;img alt=&quot;Electron window with screensharing working correctly&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://darksi.de/img/aEiZGfC1CK-1010.png&quot; width=&quot;1010&quot; height=&quot;924&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;However, when attempting to share the third time, a happy green Pac-Man would
appear instead:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://darksi.de/img/_nLoNgntAF-1010.avif 1010w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://darksi.de/img/_nLoNgntAF-1010.webp 1010w&quot;&gt;&lt;img alt=&quot;Electron window with screensharing with a Pac-Man&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://darksi.de/img/_nLoNgntAF-1010.png&quot; width=&quot;1010&quot; height=&quot;924&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;Having no such test screen in the app&#39;s source code, the suspicion has landed at
this being either an Electron or Chromium issue.&lt;/p&gt;
&lt;h2 id=&quot;the-process&quot; tabindex=&quot;-1&quot;&gt;The Process &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/15.third-time-is-the-charm/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Just as with the most bugs, the fix consisted of three main steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reproduction&lt;/li&gt;
&lt;li&gt;Isolation&lt;/li&gt;
&lt;li&gt;Fix&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;reproduction&quot; tabindex=&quot;-1&quot;&gt;Reproduction &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/15.third-time-is-the-charm/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For Electron specifically, reproducing a bug in isolation is best done by
running code in &lt;a href=&quot;https://www.electronjs.org/fiddle&quot;&gt;Electron Fiddle&lt;/a&gt;. Thankfully Electron&#39;s maintainers
already had a &lt;a href=&quot;https://gist.github.com/VerteDinde/19563b207541c160bf88eca58137cd29&quot;&gt;gist&lt;/a&gt; prepared so the only work that had to be done was
clicking the &amp;quot;Start&amp;quot; button three times.&lt;/p&gt;
&lt;h3 id=&quot;isolation&quot; tabindex=&quot;-1&quot;&gt;Isolation &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/15.third-time-is-the-charm/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Isolation requires modifications outside of the test code and thus a full
Electron checkout. The best way to have it locally is to use
&lt;a href=&quot;https://github.com/electron/build-tools&quot;&gt;official build tools&lt;/a&gt;. Roughly the following steps are needed:&lt;/p&gt;
&lt;pre class=&quot;language-sh&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; i &lt;span class=&quot;token parameter variable&quot;&gt;-g&lt;/span&gt; @electron/build-tools&lt;br&gt;e init &lt;span class=&quot;token parameter variable&quot;&gt;--root&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=~&lt;/span&gt;/electron&lt;br&gt;e &lt;span class=&quot;token function&quot;&gt;sync&lt;/span&gt;&lt;br&gt;e build&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then (after a few hours) &lt;code&gt;~/electron&lt;/code&gt; will contain (among other things):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chromium repo at root&lt;/li&gt;
&lt;li&gt;Electron repo in &lt;code&gt;electron/&lt;/code&gt; folder.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Given the &lt;a href=&quot;https://github.com/electron/electron/pull/43581&quot;&gt;original patch&lt;/a&gt;, the first thing to check was
whether the execution gets into patched &lt;code&gt;ScreenCaptureKitDeviceMac::OnStart&lt;/code&gt;
with the &lt;code&gt;use_native_picker&lt;/code&gt; boolean set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After adding a few C&#39;s &amp;quot;&lt;code&gt;console.log&lt;/code&gt;&amp;quot; equivalents:&lt;/p&gt;
&lt;pre class=&quot;language-c&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token function&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;we are here!&#92;n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and rebuilding with &lt;code&gt;e build&lt;/code&gt;, it became apparent that the third &amp;quot;Start&amp;quot; click
doesn&#39;t get there at all.&lt;/p&gt;
&lt;p&gt;Back-tracking from
&lt;code&gt;ScreenCaptureKitDeviceMac::OnStart&lt;/code&gt; to farther callees, it
became clear that the issue is that Electron generates fake video source ids
that clash with Chromium&#39;s fake source id for the test green screen which has
a &lt;code&gt;DesktopMediaID::kFakeId = -3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The first &amp;quot;Start&amp;quot; click used &lt;code&gt;window:-1:0&lt;/code&gt; as an id, the second -
&lt;code&gt;window:-2:0&lt;/code&gt;, but when the id got to &lt;code&gt;window:-3:0&lt;/code&gt; the check:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chromium/chromium/blob/09981a29e9028dbdf2fe16db6b2e4297dbf0f4bd/content/browser/renderer_host/media/in_process_video_capture_device_launcher.cc#L302&quot;&gt;&lt;code&gt;desktop_id.id == DesktopMediaID::kFakeId&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;substituted the media stream with the test green screen.&lt;/p&gt;
&lt;h3 id=&quot;fix&quot; tabindex=&quot;-1&quot;&gt;Fix &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/15.third-time-is-the-charm/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now that the cause is known, the best solution appears to be to introduce an
another fake desktop id and set it to &lt;code&gt;-4&lt;/code&gt;. This id would now be kept fixed, and
the second integer representing window id would be decremented for uniqueness
instead. After much waiting for builds and testing, the &lt;a href=&quot;https://github.com/electron/electron/pull/43767&quot;&gt;final fix&lt;/a&gt; is just
69 lines long, and hopefully would prevent the clash of fake entities for good.&lt;/p&gt;
&lt;p&gt;One never knows where an investigation might bring them, but thankfully this was
a short fun trip. Thank you for letting me take you along on it.
Until next time!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Resource Decryption On-the-Fly in Electron</title>
		<link href="https://darksi.de/14.decryption-on-the-fly/"/>
		<updated>2024-08-07T00:00:00Z</updated>
		<id>https://darksi.de/14.decryption-on-the-fly/</id>
		<content type="html">&lt;p&gt;My team at Signal constantly faces challenges that go beyond what one would
expect while working on practically any other messaging application. Consider
the following facts about Signal:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Does not collect telemetry.&lt;/li&gt;
&lt;li&gt;Uses &lt;a href=&quot;https://signal.org/blog/pqxdh/&quot;&gt;strong and proven cryptography&lt;/a&gt; to enable end-to-end encryption
by default while emphasizing security within the UX too.&lt;/li&gt;
&lt;li&gt;Doesn&#39;t permanently store queued end-to-end encrypted messages on the server,
and thus is effectively a distributed application loosely coordinated by a
centralized server.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&#39;d take a long time to discuss all of the implications of everything mentioned
above, and the &lt;a href=&quot;https://signal.org/blog/phone-number-privacy-usernames/&quot;&gt;innumerable&lt;/a&gt; &lt;a href=&quot;https://signal.org/blog/building-faster-oram/&quot;&gt;innovations&lt;/a&gt; that my colleagues have
created. In this post, however, we will concentrate on how attachments and other
user data are stored on the Signal Desktop client.&lt;/p&gt;
&lt;h2 id=&quot;existing-code&quot; tabindex=&quot;-1&quot;&gt;Existing Code &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/14.decryption-on-the-fly/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Based on feedback from the community, we recently introduced an important change
to how dynamic resources are stored in Signal Desktop. Beginning in the
&lt;a href=&quot;https://github.com/signalapp/Signal-Desktop/releases/tag/v7.18.0&quot;&gt;Signal Desktop v7.18.0&lt;/a&gt;, attachments, avatars, stickers, and other
media are all individually encrypted on disk with the encryption key securely
stored in a local &lt;a href=&quot;https://github.com/sqlcipher/sqlcipher&quot;&gt;SQLCipher&lt;/a&gt; database.&lt;/p&gt;
&lt;p&gt;Given that Signal Desktop is an &lt;a href=&quot;https://www.electronjs.org/&quot;&gt;Electron&lt;/a&gt; app, this presents a
challenge: How does one migrate existing references that point directly to
attachments on the file system (using tags like &lt;code&gt;&amp;lt;img/&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;video/&amp;gt;&lt;/code&gt;, etc.)
and transition to a storage system where the displayed files can no longer
be loaded from disk without an explicit decryption step?&lt;/p&gt;
&lt;h2 id=&quot;custom-protocol-handler&quot; tabindex=&quot;-1&quot;&gt;Custom Protocol Handler &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/14.decryption-on-the-fly/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The breadth of the UI elements that would be affected by this change makes
loading and decrypting stored data within the React components &lt;em&gt;intractable&lt;/em&gt;.
However, we identified a simpler path forward that leverages
&lt;a href=&quot;https://www.electronjs.org/docs/latest/api/protocol&quot;&gt;custom protocol handlers&lt;/a&gt; in Electron. Because each stored
attachment is separately encrypted with a random key, the client
only needs to generate a simple formatted URL:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;attachment://v2/ab/abcde?size=&amp;lt;num&amp;gt;&amp;amp;key=&amp;lt;base64&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When Electron&#39;s main process receives a request with such a URL, it verifies the
supplied params and uses stream decryption to send back the decrypted attachment
via a Web API &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; object and Node&#39;s
&lt;a href=&quot;https://nodejs.org/api/stream.html#streamreadabletowebstreamreadable-options&quot;&gt;&lt;code&gt;Readable.toWeb()&lt;/code&gt;&lt;/a&gt; helper. This means that the UI layer only has to be
modified at the stage where these URLs are generated, and individual components
can remain practically unchanged!&lt;/p&gt;
&lt;p&gt;Naturally, there are some quirks about how Electron handles requests for
resources that support streaming (like video and audio files), and we had to
implement a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Range&quot;&gt;&lt;code&gt;Range&lt;/code&gt; request&lt;/a&gt; handler that only returns the requested
data chunks to the Renderer process instead of returning the whole file.&lt;/p&gt;
&lt;p&gt;Originally, we created a Node.js stream for every request and then sliced the
desired data out of it with a simple 11-line &lt;a href=&quot;https://nodejs.org/api/stream.html#class-streamtransform&quot;&gt;Transform&lt;/a&gt; stream:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; offset &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; transform &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Transform&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _enc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; callback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;offset &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;byteLength &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; start &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; offset &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; end&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subarray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; start &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; offset&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; end &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; offset&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;    offset &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;byteLength&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, we quickly discovered that Chromium would issue a whopping 200 requests
for sufficiently large files instead of the small handful of requests that we
had seen for smaller files. This meant that the simple approach above wouldn&#39;t
scale but we also noticed that most of these requests were cancelled after only
reading a small amount of data, and their offsets were evenly distributed with
infrequent overlaps. Knowing this enabled us to write a more nuanced npm module
called &lt;a href=&quot;https://github.com/indutny/range-finder&quot;&gt;&amp;quot;range-finder&amp;quot;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://darksi.de/img/qIyxqezXbW-944.avif 944w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://darksi.de/img/qIyxqezXbW-944.webp 944w&quot;&gt;&lt;img alt=&quot;Dev Tools Screenshot showing lots of requests&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://darksi.de/img/qIyxqezXbW-944.png&quot; width=&quot;944&quot; height=&quot;702&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;In &amp;quot;range-finder,&amp;quot; partially consumed streams are not immediately destroyed and
are reused for subsequent offset-based reads. Thus if Chromium requests a stream
starting from byte zero of the file, cancels it after 800kb, and then makes a
separate request for data starting from the 1-megabyte mark, then we can just
skip some data on the original stream and keep giving Chromium data without
opening and decrypting everything again from scratch.&lt;/p&gt;
&lt;p&gt;This approach reduces the number of created streams from ~200 to ~3, which is an
improvement of more than 98%!&lt;/p&gt;
&lt;p&gt;Here&#39;s the &lt;a href=&quot;https://github.com/signalapp/Signal-Desktop/blob/02e7a9e1a5ba4a0e1d82ed30eeab235f3b35a42d/app/attachment_channel.ts&quot;&gt;source code&lt;/a&gt; for the full protocol handler at the time of
writing this post.&lt;/p&gt;
&lt;p&gt;In the future, we can move to a system where we don&#39;t have to decrypt the whole
file to get the desired chunk (which is usually around ~800kb in size), but more
on this later!&lt;/p&gt;
&lt;h2 id=&quot;migration&quot; tabindex=&quot;-1&quot;&gt;Migration &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/14.decryption-on-the-fly/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The exciting story described above wouldn&#39;t be complete without also mentioning
the existing attachments that users who are updating from older versions of
Signal Desktop will still have on their computer. Since the on-disk size of the
data that needs to be migrated to the new storage format is potentially large,
and users can also close the app at any time, the migration and re-encryption
process can&#39;t block the app from launching or require everything to happen all
at once. Fortunately, as a result of past migrations, Signal Desktop already has
an existing system in place to migrate messages in smaller batches whenever the
app is idle on the user&#39;s computer. This system has now been updated to include
attachment re-encryption, and every file in the old format (v1) will be
migrated to the new format (v2) automatically.&lt;/p&gt;
&lt;p&gt;You might have noticed that the attachment URL above had a &lt;code&gt;v2&lt;/code&gt; in it.
Attachments that haven&#39;t been migrated yet also have their own special
URL format:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;attachment://v1/ab/abcde&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Similarly, files at these URLs need to enable streaming to the UI with the
support of &lt;code&gt;Range&lt;/code&gt; requests, and be able to handle all of the compatibility
updates for &lt;code&gt;v2&lt;/code&gt; URLs too. Although every new attachment that is sent or
received on the latest version of Signal Desktop will start using the new v2
format right away, the versioned URL scheme helps keep things organized during
the short period of time where the UI has to display a mix of
v1 and v2 attachments during the migration process.&lt;/p&gt;
&lt;h2 id=&quot;moving-forward&quot; tabindex=&quot;-1&quot;&gt;Moving Forward &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/14.decryption-on-the-fly/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Feel free to &lt;a href=&quot;https://signal.org/download/&quot;&gt;install our app&lt;/a&gt; to see all of the described above come
into motion right in front of you!&lt;/p&gt;
&lt;p&gt;If the technical details we discussed in this post sound
exciting to you — come &lt;a href=&quot;https://signal.org/workworkwork/&quot;&gt;work with us&lt;/a&gt;!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Structure of FTS5 Index in SQLite</title>
		<link href="https://darksi.de/13.sqlite-fts5-structure/"/>
		<updated>2023-02-26T00:00:00Z</updated>
		<id>https://darksi.de/13.sqlite-fts5-structure/</id>
		<content type="html">&lt;p&gt;Recently &lt;a href=&quot;https://signal.org/&quot;&gt;Signal&lt;/a&gt; has
&lt;a href=&quot;https://github.com/signalapp/Signal-FTS5-Extension&quot;&gt;open-sourced a SQLite extension&lt;/a&gt;
that provides better support for non-latin languages (Chinese, Japanese, etc) in
the Full-Text Search (FTS) virtual table. I was one of the engineers
who worked on this extension and in the course of this endeavor I got to learn
about the structure of the SQLite&#39;s FTS implementation.
&lt;a href=&quot;https://www.sqlite.org/fts5.html&quot;&gt;The existing documentation&lt;/a&gt; focuses mostly
on API and its use patterns, and even though it covers some of the internal
storage format, I found it a bit confusing. Thus this article was born. Not as
alternative documentation for FTS5, but as a complement for developers who want
to dive in past the officially documented bits.&lt;/p&gt;
&lt;h2 id=&quot;how-is-fts5-used&quot; tabindex=&quot;-1&quot;&gt;How is FTS5 used &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/13.sqlite-fts5-structure/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before anything else, though, let&#39;s see what the FTS5 looks like to the API
consumer. As with many other features of SQLite we start by creating a table:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;CREATE&lt;/span&gt; VIRTUAL &lt;span class=&quot;token keyword&quot;&gt;TABLE&lt;/span&gt; search&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;USING&lt;/span&gt; fts5&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;content&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This virtual table supports insertion, modification, and deletion of textual
content:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;INTO&lt;/span&gt; search&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;content&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;VALUES&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;hello world&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;halló heimur&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;你好世界&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;DELETE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; search&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;WHERE&lt;/span&gt; content &lt;span class=&quot;token operator&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;halló heimur&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As well as special full-text search queries that can find an entry that has a
word (term) starting with a certain prefix:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; content &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; search&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;WHERE&lt;/span&gt; content &lt;span class=&quot;token keyword&quot;&gt;MATCH&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;wo*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;-- Output: &#39;hello world&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In addition to that you could match on multiple words (not necessarily adjacent)
and sort by the search rank. The details of this are
&lt;a href=&quot;https://www.sqlite.org/fts5.html#fts5_phrases&quot;&gt;covered by the official documentation&lt;/a&gt;
so we won&#39;t be discussing them much more here.&lt;/p&gt;
&lt;h2 id=&quot;signal-s-fts5-extension&quot; tabindex=&quot;-1&quot;&gt;Signal&#39;s FTS5 extension &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/13.sqlite-fts5-structure/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the example above you might have noticed that we inserted a phrase in
Simplified Chinese: &lt;code&gt;你好世界&lt;/code&gt;. What happens if we search for the second word of
it (&lt;code&gt;世界&lt;/code&gt;)?&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; content &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; search&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;WHERE&lt;/span&gt; content &lt;span class=&quot;token keyword&quot;&gt;MATCH&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;世界*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;-- Output: nothing&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No resulting rows! The reason for that is that the default tokenizer for FTS5
has segmented &lt;code&gt;你好世界&lt;/code&gt; as a single word (term), instead of either splitting
it into two words (example in JavaScript):&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; segmenter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Intl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Segmenter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;granularity&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;word&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; segments &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;segmenter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;segment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;你好世界&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;segment&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;segments&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// Output: [ &#39;你好&#39;, &#39;世界&#39; ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or at the very least into separate CJK symbols:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;你&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;好&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;世&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;界&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since FTS5 only supports indexed searches by the start of the term - it cannot
search for Chinese/Japanese words in the middle of the sentence.&lt;/p&gt;
&lt;p&gt;This is where &lt;a href=&quot;https://github.com/signalapp/Signal-FTS5-Extension&quot;&gt;Signal&#39;s FTS5 Extension&lt;/a&gt; comes to the rescue.
It is a &lt;a href=&quot;https://www.rust-lang.org/&quot;&gt;Rust&lt;/a&gt; crate that could be built as either static or shared
library. When plugged into SQLite this library provides an alternative
tokenizer conspicuously named &lt;code&gt;signal_tokenizer&lt;/code&gt;. Creating a table with this
tokenizer is fairly straightforward and one could easily verify that the CJK
search works without issues now:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;-- With extension loaded&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;-- (e.g. after &quot;.load signal-fts5-extension.dylib&quot;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;CREATE&lt;/span&gt; VIRTUAL &lt;span class=&quot;token keyword&quot;&gt;TABLE&lt;/span&gt; search&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;USING&lt;/span&gt; fts5&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;content&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; tokenize&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;signal_tokenizer&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;INTO&lt;/span&gt; search&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;content&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;VALUES&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;你好世界&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; content &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; search&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;WHERE&lt;/span&gt; content &lt;span class=&quot;token keyword&quot;&gt;MATCH&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;世界*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;-- Output: &#39;你好世界&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note that default &lt;code&gt;sqlite3&lt;/code&gt; shell
doesn&#39;t support extensions so you&#39;d have to build your own or use Signal&#39;s
&lt;a href=&quot;https://github.com/signalapp/better-sqlite3&quot;&gt;fork of better-sqlite3&lt;/a&gt; which
automatically loads &lt;code&gt;signal_tokenizer&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;fts5-internal-structure&quot; tabindex=&quot;-1&quot;&gt;FTS5 Internal Structure &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/13.sqlite-fts5-structure/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With this context in mind, we are ready to take a look at the internal
structure of FTS5! Let&#39;s define the common terminology:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;document&lt;/strong&gt; - a &lt;code&gt;rowid&lt;/code&gt; primary key along with one or more indexed text
columns (for simplicity we will assume one)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;term&lt;/strong&gt; - a &amp;quot;word&amp;quot; in an indexed column. Tokenizer is responsible for
segmenting the text with multiple sentences into &lt;code&gt;term&lt;/code&gt;s&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;segment&lt;/strong&gt; - a collection of pages/leaves&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;page&lt;/strong&gt; (&lt;strong&gt;leaf&lt;/strong&gt;) - a sorted list of tokens and their positions in the
documents.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;naive-idea&quot; tabindex=&quot;-1&quot;&gt;Naive Idea &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/13.sqlite-fts5-structure/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Naively, given a document we could imagine compiling a list of terms and their
positions sorted lexicographically by the term:&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;&quot;hello&quot;  -&gt; rowid1 + position of &quot;hello&quot; in the document&lt;br&gt;&quot;hooray&quot; -&gt; rowid2 + ...&lt;br&gt;&quot;howdy&quot;  -&gt; rowid3 + ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A binary search could be then performed over the document to find the first
term (and the following terms) with a given prefix.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Big_O_notation&quot;&gt;The cost&lt;/a&gt; of lookups would be:
&lt;code&gt;O(log N)&lt;/code&gt;, but the insertions are going to be painful (&lt;code&gt;O(N)&lt;/code&gt;) since most
new entries would have to be put into the middle of the list and thus we&#39;d have
to move all older entries forward to make space for them.&lt;/p&gt;
&lt;h3 id=&quot;b-tree&quot; tabindex=&quot;-1&quot;&gt;B-Tree &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/13.sqlite-fts5-structure/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/B-tree&quot;&gt;B-Trees&lt;/a&gt; were invented to compensate for
that. There is a lot to be said about them, but the only relevant part for our
discussion is that B-Trees work by splitting the data into pages, each
page individually sorted, and then organizing the pages into a binary tree-like
structure. Inserting new data then mostly touches a single page and some nodes
in the tree along the way to that page. This amortizes the insertion performance
to &lt;code&gt;O(log N)&lt;/code&gt; (from &lt;code&gt;O(N)&lt;/code&gt; of the &amp;quot;big sorted list&amp;quot; described above).&lt;/p&gt;
&lt;p&gt;Because of these performance characteristics, B-Trees are ubiquitous in the
&amp;quot;database world&amp;quot;. Some version of them (e.g., &lt;a href=&quot;https://en.wikipedia.org/wiki/B%2B_tree&quot;&gt;B+ Tree&lt;/a&gt;) is used in
practically every popular database.&lt;/p&gt;
&lt;h3 id=&quot;outline-of-fts5-approach&quot; tabindex=&quot;-1&quot;&gt;Outline of FTS5 Approach &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/13.sqlite-fts5-structure/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While the above approach would work for full-text search, it doesn&#39;t take in
account the specifics of it. Namely, users usually insert large documents that
consist of many terms, and commonly perform lookup by just a few terms.&lt;/p&gt;
&lt;p&gt;I believe this was the motivation for the approach that SQLite took with FTS5.
Instead of plain &lt;a href=&quot;https://en.wikipedia.org/wiki/B-tree&quot;&gt;B-Trees&lt;/a&gt; FTS5 uses a structure that has even better
amortization for insertions at a price of a slight overhead during the lookup.&lt;/p&gt;
&lt;p&gt;Roughly the data is split into three tables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%_data&lt;/code&gt; - holds the header of the structure with levels description, and
the contents of segments (sorted lists) of doclists (term + document rowid +
positions of the term in the document). This table is indexed by &lt;a href=&quot;https://www.sqlite.org/rowidtable.html&quot;&gt;rowid&lt;/a&gt;
(i.e. an integer primary key)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%_idx&lt;/code&gt; - holds the triples (segment id, term, page number) to index within
each segment. This table is indexed by &lt;code&gt;segment id&lt;/code&gt; and &lt;code&gt;term&lt;/code&gt;, so that we
could find the page number in a segment efficiently&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%_content&lt;/code&gt; - holds the full contents of the stored documents (note that this
table is omitted when FTS5 is configured to use
&lt;a href=&quot;https://www.sqlite.org/fts5.html#external_content_and_contentless_tables&quot;&gt;external content&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;(Note: &lt;code&gt;&amp;quot;%&amp;quot;&lt;/code&gt; is the virtual table name, e.g. &lt;code&gt;search&lt;/code&gt; in our examples)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;With the overview above, let&#39;s build the structure bottom up. When a new
document is inserted into the table:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It is tokenized into multiple terms and their positions within the document&lt;/li&gt;
&lt;li&gt;A new segment is created for all these terms, and it is essentially what we
called &amp;quot;big sorted list&amp;quot; above. A segment could be one page if it is small
(less than 1000 bytes, see &lt;a href=&quot;https://www.sqlite.org/fts5.html#the_pgsz_configuration_option&quot;&gt;&lt;code&gt;pgsz&lt;/code&gt; config option&lt;/a&gt;), or it could be
split into multiple sorted pages (leaves)&lt;/li&gt;
&lt;li&gt;If the segment is split into multiple pages - we take a prefix of the first
term from each sorted page and put them into &lt;code&gt;%_idx&lt;/code&gt; table. Thus we
indirectly create a &lt;a href=&quot;https://en.wikipedia.org/wiki/B-tree&quot;&gt;B-Tree&lt;/a&gt;! &lt;code&gt;%_idx&lt;/code&gt; becomes a tree part of B-Tree
(because it is indexed by a B+-Tree under the hood), and this tree points to
pages in the &lt;code&gt;%_data&lt;/code&gt; table. Each page small enough that we could search it
for terms and their documents&lt;/li&gt;
&lt;li&gt;Finally, if FTS5 isn&#39;t running in the &amp;quot;external content&amp;quot; mode - we insert the
original (non-tokenized) contents of the document into the &lt;code&gt;%_content&lt;/code&gt; table.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With this structure it is easy to see how FTS5 performs a search over a single
segment, but what if we insert multiple documents into the index over time?&lt;/p&gt;
&lt;h3 id=&quot;merging-segments&quot; tabindex=&quot;-1&quot;&gt;Merging segments &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/13.sqlite-fts5-structure/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Each time we insert a new document - we create a new segment with its terms
(just as described above). If the number of segments is small, when looking up a
term in the index we&#39;d just iterate through all of them starting with the newest
segments! This is the insertion amortization technique in the nutshell. We just
create a brand new B-Tree (through a combination of rows in &lt;code&gt;%_idx&lt;/code&gt; and
&lt;code&gt;%_data&lt;/code&gt;) and get a forest of them.&lt;/p&gt;
&lt;p&gt;When the number of segments becomes too large, however, B-Tree forest can
quickly become impractical. Thus every now and then (every 64 insertions in
SQLite) SQLite has to perform &amp;quot;merges&amp;quot; of some of these segments and create
larger (but more efficient) B-Trees. There are various ways to configure how
these merges work, and how much data is merged. I previously
&lt;a href=&quot;https://gist.github.com/indutny/ae44fd93dde2736205609d19a21b87cc&quot;&gt;covered the mechanics of the merges&lt;/a&gt;
so we won&#39;t concentrate on them here.&lt;/p&gt;
&lt;p&gt;Every time a merge is performed - we have to combine together two segments and
move all their data into a new one. This sounds like it could be... slow, right?
In fact it very well would be if not for a trick that FTS5 employs! Instead of
just merging everything together any time we get too many segments - we assign
each segment a level. They all start with level 0 and the merges only affect
segments on the &lt;strong&gt;same level&lt;/strong&gt;. When they are finally merged - the resulting
segment is one level above the source segments. Since we merge every 64
insertions, with each new level segments become ~64 times larger.
This way we reduce the merge frequency for older and larger segments on
a higher level, and perform most merges on the lower levels when they become
overcrowded.&lt;/p&gt;
&lt;h3 id=&quot;inspecting-the-structure&quot; tabindex=&quot;-1&quot;&gt;Inspecting the Structure &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/13.sqlite-fts5-structure/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Let&#39;s see how this works in practice. There is a &amp;quot;secret&amp;quot; test-only function in
FTS5 named &lt;code&gt;fts5_decode&lt;/code&gt; that is unfortunately only available when &lt;code&gt;SQLITE_TEST&lt;/code&gt;
was defined at the build time. &lt;code&gt;sqlite3&lt;/code&gt; shell isn&#39;t supposed to be built with
this define, but with a &lt;a href=&quot;https://gist.github.com/indutny/01cccb511059a0e2d657036e2fc9cb67&quot;&gt;small patch&lt;/a&gt; we could get it running:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;CREATE&lt;/span&gt; VIRTUAL &lt;span class=&quot;token keyword&quot;&gt;TABLE&lt;/span&gt; search&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;USING&lt;/span&gt; fts5&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;content&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;-- Limit max page size for instructiveness&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;INTO&lt;/span&gt; search&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;search&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; rank&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;VALUES&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;pgsz&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;INTO&lt;/span&gt; search&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;content&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;VALUES&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;hello world&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; rowid&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fts5_decode&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rowid&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; block&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; search_data&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;-- Output (with manual indenting):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;--&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;-- 1|{averages} 1 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;-- 10|{structure} {lvl=0 nMerge=0 nSeg=1 {id=1 leaves=1..1}}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;-- 137438953473|{segid=1 h=0 pgno=1}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;--     term=0hello id=1 nPos=1 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;--     term=0world id=1 nPos=1 3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we ignore the &lt;code&gt;{averages}&lt;/code&gt; (it is used for ranking), we see that in the
&lt;code&gt;{structure}&lt;/code&gt; we have one level (&lt;code&gt;lvl=0&lt;/code&gt;) with one segment
(&lt;code&gt;nSeg=1 {id=1 leaves=1..1}&lt;/code&gt;) that consists of a single page (&lt;code&gt;1..1&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Row &lt;code&gt;137438953473&lt;/code&gt; (0x2000000001, see
&lt;a href=&quot;https://www.sqlite.org/fts5.html#data_structure&quot;&gt;the official documentation on the value&lt;/a&gt;)
has the actual segment page which contains a sorted list of terms and
their positions within the document (as promised!). They all start with &amp;quot;0&amp;quot;,
because FTS5 supports optional
&lt;a href=&quot;https://www.sqlite.org/fts5.html#prefix_indexes&quot;&gt;prefix indexes&lt;/a&gt; which require
this encoding.&lt;/p&gt;
&lt;p&gt;We can insert more data into the index:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;INTO&lt;/span&gt; search&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;content&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;VALUES&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;how was your day&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; rowid&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fts5_decode&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rowid&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; block&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; search_data&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;-- Output (from now on without {averages}, and&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;--   with hex segment ids):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;--&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;-- 10|{structure} {lvl=0 nMerge=0 nSeg=2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;--   {id=1 leaves=1..1}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;--   {id=2 leaves=1..2}}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;-- 0x2000000001|{segid=1 h=0 pgno=1}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;--   term=0hello id=1 nPos=1 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;--   term=0world id=1 nPos=1 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;-- 0x4000000001|{segid=2 h=0 pgno=1}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;--   term=0day id=2 nPos=1 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;--   term=0how id=2 nPos=1 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;--   term=0was id=2 nPos=1 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;-- 0x4000000002|{segid=2 h=0 pgno=2}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;--   term=0your id=2 nPos=1 4&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is easy to see that the segment 1 wasn&#39;t changed, and we added one more
level zero segment (&lt;code&gt;{id=2 leaves=1..2}&lt;/code&gt;) with two pages (&lt;code&gt;1..2&lt;/code&gt;,
&lt;code&gt;0x4000000001&lt;/code&gt; and &lt;code&gt;0x4000000002&lt;/code&gt;) because the terms didn&#39;t all fit into a
single page. Each page is again a sorted list, and they are now inserted into
the &lt;code&gt;%_idx&lt;/code&gt; table:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; search_idx&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;-- Output (with column names):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;-- segment id | term | page number&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;-- 1          |      | 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;-- 2          |      | 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;-- 2          | 0y   | 4&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One can see that for the newly inserted segment 2 we have two entries (one per
each page), and that they correctly start with &lt;code&gt;&amp;quot;0y&amp;quot;&lt;/code&gt; term prefix which lets us
quickly find the page if we are searching by &lt;code&gt;&amp;quot;y*&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To finish this, let&#39;s simulate merging of the segments. We could insert 62 more
entries to trigger it, but a similar result could be achieved by running
&lt;a href=&quot;https://www.sqlite.org/fts5.html#the_optimize_command&quot;&gt;&lt;code&gt;optimize&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;INTO&lt;/span&gt; search&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;search&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;VALUES&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;optimize&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; rowid&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fts5_decode&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rowid&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; block&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; search_data&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;-- Output:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;-- 10|{structure}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;--   {lvl=0 nMerge=0 nSeg=0}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;--   {lvl=1 nMerge=0 nSeg=1 {id=3 leaves=1..3}}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;-- 0x6000000001|{segid=3 h=0 pgno=1}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;--   term=0day id=2 nPos=1 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;--   term=0hello id=1 nPos=1 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;--   term=0how id=2 nPos=1 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;-- 0x6000000002|{segid=3 h=0 pgno=2}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;--    term=0was id=2 nPos=1 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;--    term=0world id=1 nPos=1 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;--    term=0your id=2 nPos=1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;-- 0x6000000003|{segid=3 h=0 pgno=3}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;--    4&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; search_idx&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;-- Output:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;-- segment id | term | page number&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;-- 3          |      | 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;-- 3          | 0w   | 4&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As promised, the segments 1 and 2 got merged into a segment 3 on the newly
created level 1. The result has three pages, where the last one has the left
over term position that didn&#39;t fit into page 2.&lt;/p&gt;
&lt;p&gt;If we insert more data into the table - it will be put again on the level 0 so
the next automatic merge would only work with the segments of that level.&lt;/p&gt;
&lt;h2 id=&quot;closing-note&quot; tabindex=&quot;-1&quot;&gt;Closing Note &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/13.sqlite-fts5-structure/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I don&#39;t know about you, but for me this was quite a wild ride! B-Trees,
tokenizers, merges... There&#39;s certainly a lot going on under the hood of
&lt;a href=&quot;https://www.sqlite.org/mostdeployed.html&quot;&gt;one of the most popular databases&lt;/a&gt; in
the world. As it often is in engineering, by reusing and combining simple blocks
we can create a very complex structure that might be hard to understand when
approaching head on. In this article I attempted to deconstruct FTS5 down to its
roots (or at least a few levels lower), but there is still much more that could
be said (like compact encoding of terms and positions in the pages).&lt;/p&gt;
&lt;p&gt;If you have any requests or ideas - feel free to &amp;quot;toot&amp;quot; at me on
&lt;a href=&quot;https://fosstodon.org/@indutny&quot;&gt;Mastodon&lt;/a&gt;. Thanks for spending your time
reading this!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>HashWick V8 Vulnerability</title>
		<link href="https://darksi.de/12.hashwick-v8-vulnerability/"/>
		<updated>2018-08-22T00:00:00Z</updated>
		<id>https://darksi.de/12.hashwick-v8-vulnerability/</id>
		<content type="html">&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://darksi.de/img/HOXaYY2Bnb-720.avif 720w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://darksi.de/img/HOXaYY2Bnb-720.webp 720w&quot;&gt;&lt;img alt=&quot;Hash Wick&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://darksi.de/img/HOXaYY2Bnb-720.png&quot; width=&quot;720&quot; height=&quot;422&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;About one year ago, I&#39;ve discovered a way to do a Denial-of-Service (DoS) attack
on a local Node.js instance. The process involved sending huge amounts of data
to the HTTP server running on the same machine as the attacker, and measuring
the timing differences between various payloads. Given that the scope of attack
was limited to the same machine, it was decided by V8 team and myself that the
issue wasn&#39;t worth looking in yet. Nevertheless, a &lt;a href=&quot;https://darksi.de/f.v8-hash-seed-timing-attack/&quot;&gt;blog post&lt;/a&gt; was published.&lt;/p&gt;
&lt;p&gt;This year, I had a chance to revisit the Hash Seed guessing game with restored
enthusiasm and new ideas. The results of this experiment are murky, and no fix
is available yet in V8. Thus &lt;strong&gt;all V8 release lines are vulnerable to the
HashWick attack&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Disclaimer: the issue was disclosed responsibly. This blog post is published
after more than 90 days since the initial report)&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;what-is-a-hash-seed&quot; tabindex=&quot;-1&quot;&gt;What is a Hash Seed? &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/12.hashwick-v8-vulnerability/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The Hash Seed is a random number that is used as an initial value for the
(non-cryptographic) hash functions inside of V8 instances. Such numbers are used
not only in V8 or other VMs, they&#39;re used in &lt;a href=&quot;https://lwn.net/Articles/711167/&quot;&gt;kernels&lt;/a&gt;, &lt;a href=&quot;https://github.com/antirez/redis/blob/cefe21d28a75f4fdbf24823ce42e777c2b9d5c6f/src/dict.c#L74&quot;&gt;databases&lt;/a&gt;, and
many different kinds of software.&lt;/p&gt;
&lt;p&gt;The reason to have seeded hash functions is to prevent collision attacks on
hash maps (e.g. JavaScript objects/dictionaries). In ideal scenario, use of
random seed should make guessing the hash value of a string/number an impossible
endeavor.&lt;/p&gt;
&lt;p&gt;Whenever a Node.js instance parses HTTP headers or JSON object, V8 has to create
a hash map for it. Each hash map is backed by a list (storage) of length
&lt;code&gt;2 * N&lt;/code&gt;. The keys are inserted at even positions, the values are inserted at odd
(right after the key). The position index is determined by the hash of the key
modulo the storage size. Two equal keys will have two equal hashes, and will
point to the same cell in the list.&lt;/p&gt;
&lt;p&gt;In ideal scenario the indices for two different keys are always different. It
is easy to see that it isn&#39;t possible due to the limited list size. The more
key/value pairs we insert into the object, the more likely the &amp;quot;collision&amp;quot; to
happen. When the hash values are the same, but the keys are different, V8
has to place the key in the next cell... or in the cell after the next, if the
next is filled already.&lt;/p&gt;
&lt;p&gt;All in all, this provides quite optimal insertion/lookup performance at
relatively low memory costs.&lt;/p&gt;
&lt;h2 id=&quot;what-if-attacker-knows-hash-seed&quot; tabindex=&quot;-1&quot;&gt;What if attacker knows Hash Seed? &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/12.hashwick-v8-vulnerability/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Every publicly exposed system is subject for external attacks. In the worst
case, an attacker gains access to the system or data in it. In less worse cases
the attacker might be able to overload the resources of the system by repeatedly
hitting the &amp;quot;slow&amp;quot; paths in the system&#39;s code. Such attacks are called &amp;quot;Denial
of Service&amp;quot; attacks or simply DoS.&lt;/p&gt;
&lt;p&gt;For the hash maps in V8, the hash collisions are exactly the slow path. Being
able to generate a lot of (or precompute) keys with similar hash values (for
various hash map storage capacities) without using many resources is a guarantee
of success for such an attack. The worst case scenario is that a small JSON
object (or HTTP headers) could take seconds to parse. Sending thousands of such
objects would render any server unresponsive.&lt;/p&gt;
&lt;p&gt;What stands in a way of generating the collisions is a random Hash Seed number.
Given sufficient size of that number and a strong hash function, the indices of
the different keys would look absolutely random. Guessing the Hash Seed becomes
impractical both time-wise and information-wise.&lt;/p&gt;
&lt;p&gt;Unfortunately for V8, the hash function isn&#39;t strong enough and the hash seed
is a small number.&lt;/p&gt;
&lt;h2 id=&quot;how-to-find-v8-s-hash-seed&quot; tabindex=&quot;-1&quot;&gt;How to find V8&#39;s Hash Seed? &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/12.hashwick-v8-vulnerability/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Imagine the following scenario: a Node.js HTTP server is available publicly and
accepts JSON bodies for POST requests. It&#39;d be reasonable to say that many
public Node.js servers are of this kind. It&#39;s important to note that this is
also applicable if Node.js is not directly exposed to a public internet port,
such as the case of being proxy-passed via Nginx.&lt;/p&gt;
&lt;p&gt;How can an attacker find the value of V8&#39;s Hash Seed in such case?&lt;/p&gt;
&lt;p&gt;This was a subject of my research this and last year. Assuming absence of access
to the server itself, the only way seems to be through the timing differences
between processing different crafted HTTP requests.&lt;/p&gt;
&lt;p&gt;Hitting the slow path in hash map key insertion that we discussed above should
give a slightly slower response time. Knowing a lot of key combinations that
cause the slowdown (and as many combinations that doesn&#39;t cause one) is enough
for reconstructing the seed value. The problem is, the difference between slow
and fast path is in the order of microseconds, while the network latency is
often at least a couple of milliseconds. The network jitter overwrites any minor
timing differences without leaving us a chance to measure them.&lt;/p&gt;
&lt;p&gt;What is needed for successful attack is an &lt;strong&gt;&amp;quot;amplification&amp;quot;&lt;/strong&gt;. The request has
to be crafted in such way that the key insertion is triggered many times in a
sequence for the same key and same hash map contents. Each insertion would take
just a couple of microseconds, but a thousand of them would add up to a
millisecond!&lt;/p&gt;
&lt;p&gt;Without giving away the complete tools for crafting such an attack, I can say
that the JSON body might look like this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{&amp;quot;100000&amp;quot;:0,&amp;quot;101&amp;quot;:1,&amp;quot;101&amp;quot;:1,...repeat many times...}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It exploits several implementation details in V8 and a few quirks of JavaScript.
In particular, a JavaScript number lookup &lt;code&gt;obj[100000]&lt;/code&gt; is equivalent to
looking up the &amp;quot;stringified&amp;quot; value of the same number &lt;code&gt;obj[&amp;quot;100000&amp;quot;]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The next quirk is that JSON objects might contain duplicate keys. Each key will
be parsed and looked up in the object, regardless of how many times it is
repeated in the JSON. &lt;em&gt;Each lookup triggers either slow or fast path in the
insertion code&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The object above essentially becomes a sparse &lt;code&gt;Array&lt;/code&gt; backed by a hash map with
very shallow storage capacity (just &lt;code&gt;4&lt;/code&gt; values). Here&#39;s how V8 inserts key into
it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Initially &lt;code&gt;storage&lt;/code&gt; is &lt;code&gt;[ null, null, null, null ]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The index of the first key (&lt;code&gt;100000&lt;/code&gt;) is computed using the hash function and
the hash seed: &lt;code&gt;index = hash(100000, seed) % 4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The value &lt;code&gt;0&lt;/code&gt; is inserted into that slot of storage (e.g. &lt;code&gt;index = 1&lt;/code&gt;):
&lt;code&gt;[ null, 0, null, null ]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The index of the second key is computed
&lt;code&gt;index_2 = hash(random_key, seed) % 4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;while (storage[index_2] != null) index_2++&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The value is stored in &lt;code&gt;index_2&lt;/code&gt; slot&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Step 5 is crucial for my attack. The extra check takes extra time, and this time
difference could be measured to get information about the hash seed.&lt;/p&gt;
&lt;p&gt;Thus fixing the first key to &lt;code&gt;100000&lt;/code&gt;, and trying out different keys
(probes) will give us the list of timings per each random key. Quarter of the
probes will have the same index as &lt;code&gt;100000&lt;/code&gt; and will hit the slow path due to
collision. The rest will go through the fast path. The processing script would
later go through the list of timings and separate it by &lt;code&gt;75%&lt;/code&gt; percentile of
latency. Most probes would be correctly classified as fast/slow. Misclassified
probes would increase Hash Seed search time.&lt;/p&gt;
&lt;p&gt;The result of processing is a list of probe keys, each with an assigned class:
&amp;quot;same index as 100000&amp;quot; or &amp;quot;different index&amp;quot;. Each entry of this list is a
constraint on the Hash Seed value. An OpenCL script goes through all possible
32-bit Hash Seed values (&lt;code&gt;0 - 0x3fffffff&lt;/code&gt;), and finds the one that satisfies
the majority of the constraints. That value is the most likely Hash Seed of the
attacked V8 instance. The OpenCL computation could take place on either CPU or
GPU, and completes the search in about one minute on my MacBook Pro.&lt;/p&gt;
&lt;p&gt;My unoptimized PoC sends about 2 gb of JSON data to the server, collects the
timing information, and computes the Hash Seed in a &lt;em&gt;couple of minutes&lt;/em&gt; (this
includes OpenCL brute-force time).&lt;/p&gt;
&lt;h2 id=&quot;prevention&quot; tabindex=&quot;-1&quot;&gt;Prevention &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/12.hashwick-v8-vulnerability/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This sounds dreary, but the fixes can be made. First of all, the hash seed size
has to be increased from 32 bits to 64 bits (this is already done in V8). Next,
the hash function has to be changed to &lt;a href=&quot;https://en.wikipedia.org/wiki/SipHash&quot;&gt;SipHash&lt;/a&gt; or other hash function with
PRF (Pseudo-Random Function) properties.&lt;/p&gt;
&lt;p&gt;Google has an amazing team working on V8. I&#39;m really hopeful that the remaining
fixes will be completed soon.&lt;/p&gt;
&lt;h2 id=&quot;prior-art&quot; tabindex=&quot;-1&quot;&gt;Prior-Art &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/12.hashwick-v8-vulnerability/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The hash collision attacks have &lt;a href=&quot;https://lwn.net/Articles/474912/&quot;&gt;a long history&lt;/a&gt;, and most of the software
projects has moved to &lt;a href=&quot;https://en.wikipedia.org/wiki/SipHash&quot;&gt;SipHash&lt;/a&gt; and at least 64-bit Hash Seed since then.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;credits&quot; tabindex=&quot;-1&quot;&gt;Credits &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/12.hashwick-v8-vulnerability/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Huge thanks to &lt;a href=&quot;https://github.com/aheckmann&quot;&gt;Aaron Heckmann&lt;/a&gt;, &lt;a href=&quot;https://github.com/snowinferno&quot;&gt;Greg Wilburn&lt;/a&gt;, &lt;a href=&quot;https://github.com/rauchg&quot;&gt;Guillermo Rauch&lt;/a&gt;, and
&lt;a href=&quot;https://github.com/shaunwarman&quot;&gt;Shaun Warman&lt;/a&gt; for providing feedback on this article.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>HyperBloom</title>
		<link href="https://darksi.de/11.hyperbloom/"/>
		<updated>2017-04-26T00:00:00Z</updated>
		<id>https://darksi.de/11.hyperbloom/</id>
		<content type="html">&lt;p&gt;Over this weekend I got not so original (but definitely a fun one) idea to build
fully distributed and decentralized Twitter. At the time it was inspired by the
&lt;a href=&quot;https://datproject.org/&quot;&gt;DAT Project&lt;/a&gt; and &lt;a href=&quot;https://github.com/mafintosh/hypercore&quot;&gt;Hypercore&lt;/a&gt;, neither of which could support public
replies to user feeds.&lt;/p&gt;
&lt;p&gt;Hence, the most natural thing was to &lt;a href=&quot;https://xkcd.com/927/&quot;&gt;write a new protocol&lt;/a&gt;! Say hello to
&lt;a href=&quot;https://github.com/hyperbloom/hyperbloom&quot;&gt;HyperBloom&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id=&quot;protocol&quot; tabindex=&quot;-1&quot;&gt;Protocol &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/11.hyperbloom/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It is crucial to understand the needs for the protocol before discussing the
protocol itself. Let me list few requirements for it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Decentralized and distributed&lt;/li&gt;
&lt;li&gt;Viral. Everyone can reply to anyone&#39;s tweet without exchanging any public
keys or information ahead of time&lt;/li&gt;
&lt;li&gt;Secure&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How could it combine all these three qualities into one protocol? By combining
existing solutions, of course:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type#State-based_grow-only_set&quot;&gt;State-based grow-only set&lt;/a&gt; with &lt;a href=&quot;https://en.wikipedia.org/wiki/Bloom_filter&quot;&gt;Bloom Filters&lt;/a&gt; for diffs&lt;/li&gt;
&lt;li&gt;Distributed &lt;a href=&quot;https://en.wikipedia.org/wiki/Public_key_infrastructure&quot;&gt;Public Key Infrastructure&lt;/a&gt; (PKI) for append permissions&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;trust-network&quot; tabindex=&quot;-1&quot;&gt;Trust Network &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/11.hyperbloom/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having grow-only set that is writable by anyone on the web is the best way to
introduce enormous amount of spam into social network. This can be tackled by
accepting writes only from your friends. However, this kills the virality of the
platform.&lt;/p&gt;
&lt;p&gt;Perhaps friends-of-friends should be allowed to append to that Set? Better!&lt;/p&gt;
&lt;p&gt;The way &lt;a href=&quot;https://github.com/hyperbloom/hyperbloom&quot;&gt;HyperBloom&lt;/a&gt; addresses this is by letting author&#39;s issue so called
&lt;a href=&quot;https://github.com/hyperbloom/hyperbloom-protocol/blob/master/spec.md#signature-chain&quot;&gt;&lt;em&gt;Trust Links&lt;/em&gt;&lt;/a&gt;. Each &lt;em&gt;Trust Link&lt;/em&gt; acts like an edge in the Graph: &lt;code&gt;A -&amp;gt; B&lt;/code&gt;
or &lt;em&gt;A&lt;/em&gt; trusts &lt;em&gt;B&lt;/em&gt;. When two peers connect to synchronize the values in a Set,
they each present a collection of links from the author of the Set to the peers
themselves. Each successive link in such collection is a continuation of the
previous link: &lt;code&gt;A -&amp;gt; B, B -&amp;gt; C, C -&amp;gt; D&lt;/code&gt;. With a total limit of &lt;strong&gt;5&lt;/strong&gt; links in
one collection (chain).&lt;/p&gt;
&lt;p&gt;The limit is imposed to save the bandwidth. To further save it peers help each
other by automatically issuing links that create shorter path to the author.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Peer B has following chain: &lt;code&gt;A -&amp;gt; B&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Peer C has following chain: &lt;code&gt;A -&amp;gt; D, D -&amp;gt; E, E -&amp;gt; C&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Peer B sends &lt;code&gt;B -&amp;gt; C&lt;/code&gt; to C to minimize the route&lt;/li&gt;
&lt;li&gt;Peer C uses &lt;code&gt;A -&amp;gt; B, B -&amp;gt; C&lt;/code&gt; later on&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Each link has an expiration time, and such automatic link as in the example will
have the expiration time set to: &lt;code&gt;minimum(A -&amp;gt; D, D -&amp;gt; E, E -&amp;gt; C)&lt;/code&gt;. Essentially,
&lt;code&gt;A&lt;/code&gt; always controls how often it wants to refresh its peers&#39; trust.&lt;/p&gt;
&lt;h3 id=&quot;set&quot; tabindex=&quot;-1&quot;&gt;Set &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/11.hyperbloom/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Set is not particularly interesting. It borrows some design decisions from
&lt;a href=&quot;https://bitcoin.org/en/glossary/simplified-payment-verification&quot;&gt;Bitcoin SPV client&lt;/a&gt;. In particular the use of Bloom filters to optimally
compute the difference between the peers and set the missing values.&lt;/p&gt;
&lt;h2 id=&quot;usage&quot; tabindex=&quot;-1&quot;&gt;Usage &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/11.hyperbloom/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&#39;m combining both Hypercore and HyperBloom into a project called (for no
particular reason. May be Hyper-uni-corn?) &lt;a href=&quot;https://github.com/indutny/hypercorn&quot;&gt;HyperCorn&lt;/a&gt;. HyperCorn uses
HyperCore logs for JSON message fields, and HyperBloom for notifying authors
about replies to their feeds.&lt;/p&gt;
&lt;p&gt;HyperBloom Trust Links are stored and distributed through HyperCore. So far it
appears to be working, but it has pretty long way to go still. Mainly it needs
an UI. Contact me, if you are interested!&lt;/p&gt;
&lt;h2 id=&quot;open-questions&quot; tabindex=&quot;-1&quot;&gt;Open Questions &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/11.hyperbloom/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Is virality a good thing?&lt;/li&gt;
&lt;li&gt;Should auto-links be issued?&lt;/li&gt;
&lt;li&gt;Is 5 links enough?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&#39;d love to hear your opinion.&lt;/p&gt;
&lt;p&gt;(You can reply on &lt;a href=&quot;https://twitter.com/indutny/status/857136827639189504&quot;&gt;twitter&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Thanks for reading.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>V8 hash seed timing attack</title>
		<link href="https://darksi.de/f.v8-hash-seed-timing-attack/"/>
		<updated>2017-01-19T00:00:00Z</updated>
		<id>https://darksi.de/f.v8-hash-seed-timing-attack/</id>
		<content type="html">&lt;h2 id=&quot;moment-of-history&quot; tabindex=&quot;-1&quot;&gt;Moment of History &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/f.v8-hash-seed-timing-attack/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There is a mostly forgotten &lt;a href=&quot;https://github.com/nodejs/node-v0.x-archive/issues/2431&quot;&gt;security issue&lt;/a&gt; that was fixed in
Node.js back in 2012. It was originally announced on the
&lt;a href=&quot;https://www.youtube.com/watch?v=R2Cq3CLI6H8&quot;&gt;28c3 conference&lt;/a&gt; December, 2011 and the final fix landed in
&lt;a href=&quot;https://github.com/nodejs/node/commit/16953329413831b32f4c3b2255aeacec874ed69d&quot;&gt;January, 2012&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In few words, the most of dynamic languages use either bucket lists or
&lt;a href=&quot;https://en.wikipedia.org/wiki/Hash_table#Open_addressing&quot;&gt;open addressing&lt;/a&gt; variants of hash tables. V8 uses the latter one, and in
such case when VM is asked to insert a property into an object it does
the following sequence of actions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Compute the hash of the key (quite often with a &lt;a href=&quot;https://en.wikipedia.org/wiki/Jenkins_hash_function&quot;&gt;Jenkins hash&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Clear the high bits of the hash value&lt;/li&gt;
&lt;li&gt;Use it as an index in the internal array&lt;/li&gt;
&lt;li&gt;Find unused slot in that array&lt;/li&gt;
&lt;li&gt;Insert the key/value pair at that slot.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This sounds pretty much OK, except for the step 4. One may ask: What if the
target slot is way too far from the index in the step 3? The answer is: it will
take more time to do such insertion.&lt;/p&gt;
&lt;p&gt;Do you see where it is going?&lt;/p&gt;
&lt;h2 id=&quot;collision-attacks&quot; tabindex=&quot;-1&quot;&gt;Collision attacks &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/f.v8-hash-seed-timing-attack/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If the attacker can insert many keys like these into the hash table - the whole
procedure is going be much slower than usual (20x slower in some cases). During
this time Node.js will be blocked, and performing such insertions one after
another leads directly to Denial of Service attack. To put it in concrete
context: &lt;code&gt;req.headers&lt;/code&gt; in &lt;code&gt;http.Server&lt;/code&gt; is populated with user data, and is thus
susceptible to this kind of attack.&lt;/p&gt;
&lt;p&gt;How does one generate such keys? Trivial and fast brute-force could generate as
many keys as needed to give desired &amp;quot;collisions&amp;quot; given that attacker knows what
hash function is used by VM.&lt;/p&gt;
&lt;p&gt;What was done to fix it in V8/Node.js? Together with V8 team we added seeds to
all hash tables used in V8, and made sure that they are randomized on the
process start.&lt;/p&gt;
&lt;h2 id=&quot;inspiration-for-an-experiment&quot; tabindex=&quot;-1&quot;&gt;Inspiration for an Experiment &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/f.v8-hash-seed-timing-attack/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After reading this &lt;a href=&quot;http://perl11.org/blog/seed.html&quot;&gt;Perl blog post&lt;/a&gt; I thought that it would be funny to
carry out an actual hash seed extraction out of the live node.js process:
first - locally within the process itself, second - from http server on the same
machine, third - remotely (no luck so far). Knowing the seed means being able
to craft the collisions, and this gets us back to DoS problem.&lt;/p&gt;
&lt;p&gt;Numerous code paths in V8 have been tried, until I stumbled upon a
&lt;a href=&quot;https://github.com/v8/v8/blob/140d4df7954259e60a555efc0b2d00a9c924564c/src/objects-inl.h#L3140-L3157&quot;&gt;particular function&lt;/a&gt;. There V8 puts a new property into an internal list
called &lt;code&gt;DescriptorArray&lt;/code&gt;. For performance reasons properties in that array
must be sorted, and since V8 extends the array - it has to shift all bigger
properties to the right to make space for the new one.&lt;/p&gt;
&lt;p&gt;By measuring timing of such insertions, attacker could figure out approximate
position of the inserted key. &lt;code&gt;DescriptorArray&lt;/code&gt; holds no more than 18 keys, so
it could be attempted to insert the same 17 keys and one random one many times,
and infer the difference in timing to find the random keys that were placed
either at the very end or at the start of the array.&lt;/p&gt;
&lt;p&gt;It&#39;s easier said than done, though. V8 has many layers of caching (which is one
of the reasons why your JavaScript code is so fast!). In order to get
through to that &lt;code&gt;DescriptorArray::Append&lt;/code&gt; function, I had to outflank all of
them. In the end, the resulting program does everything in reverse - the random
key is inserted first, and then 17 predefined keys are inserted right after it.
The difference is non-obvious, but that&#39;s the part of the solution to skip all
of the caches.&lt;/p&gt;
&lt;p&gt;This is how it looks:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;pre&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; list&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; o &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  o&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;pre&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; list&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    o&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;list&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; o&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now this script has to create a &lt;code&gt;list&lt;/code&gt; of keys, and a large number of probes
(2093 strings that are passed one after another as &lt;code&gt;pre&lt;/code&gt;). It can try each probe
with the same &lt;code&gt;list&lt;/code&gt;, and measure the timing with &lt;code&gt;process.hrtime()&lt;/code&gt; with
nanosecond precision. Largertime difference means that the probe was inserted
at the start of the &lt;code&gt;DescriptorArray&lt;/code&gt;, and thus its hash value (32 bit number)
is less than all hashes of the keys in the &lt;code&gt;list&lt;/code&gt;. When the time delta is least&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;probe was appended to the end of the &lt;code&gt;DescriptorArray&lt;/code&gt;, meaning that its hash
is the biggest in it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It may sound like not too much to stick to, but if one can collect enough such
&amp;quot;relations&amp;quot; between the probe and keys - one can brute force all 32-bit seed
values to find the one that gives the best approximation to this relation!
In fact, it takes just about 15 minutes on 20 core machine to do it, and this
time can be improved by using GPU (I dare you!).&lt;/p&gt;
&lt;p&gt;The most important part of brute forcing function is &lt;code&gt;check&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-c&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;uint32_t&lt;/span&gt; seed&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; score&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token class-name&quot;&gt;uint32_t&lt;/span&gt; key_hashes&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ARRAY_SIZE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;keys&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  score &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;size_t&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ARRAY_SIZE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;keys&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    key_hashes&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;jenkins&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;keys&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; seed&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;size_t&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ARRAY_SIZE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;probes&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token class-name&quot;&gt;uint32_t&lt;/span&gt; l&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token class-name&quot;&gt;uint32_t&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    l &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;jenkins&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;probes&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; seed&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    r &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;jenkins&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;probes&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; seed&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;size_t&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ARRAY_SIZE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;keys&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;l &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; key_hashes&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        score&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key_hashes&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        score&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; score&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;l&lt;/code&gt; is a probe that supposedly has the lowest hash value in &lt;code&gt;DescriptorArray&lt;/code&gt;,
&lt;code&gt;r&lt;/code&gt; is a probe that has the highest. So all in all, &lt;code&gt;brute.c&lt;/code&gt; just searches for
the seed value that maximizes the result of &lt;code&gt;check&lt;/code&gt;. Simple!&lt;/p&gt;
&lt;h2 id=&quot;conclusions-and-code&quot; tabindex=&quot;-1&quot;&gt;Conclusions and code &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/f.v8-hash-seed-timing-attack/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This works locally as a charm, and works with a &lt;code&gt;http.Server&lt;/code&gt; on the same
machine to some extent. Unfortunately (or fortunately?) this attack doesn&#39;t work
with remote servers (or I wasn&#39;t able to execute it), even when the ping is
around 1ms. The timing difference that we are looking for is about several
microseconds, and it looks like it is smudged out in the network delay
distribution.&lt;/p&gt;
&lt;p&gt;V8 team is aware of this effort, and the decision is that this is not a security
defect - hence it is published here.&lt;/p&gt;
&lt;p&gt;All code is available on &lt;a href=&quot;https://github.com/indutny/hash-cracker&quot;&gt;github&lt;/a&gt;. Please enjoy with care!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>uv_link_t - libuv pipeline</title>
		<link href="https://darksi.de/e.uv-link-t/"/>
		<updated>2016-08-15T00:00:00Z</updated>
		<id>https://darksi.de/e.uv-link-t/</id>
		<content type="html">&lt;h2 id=&quot;preface&quot; tabindex=&quot;-1&quot;&gt;Preface &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/e.uv-link-t/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Writing servers/clients in C could be non-trivial. Even with the help of such
powerful (and awesome dinosaur) libraries as &lt;a href=&quot;https://github.com/libuv/libuv&quot;&gt;libuv&lt;/a&gt;, it still takes lots of
effort and boilerplate code to create real world applications.&lt;/p&gt;
&lt;p&gt;Some of this boilerplate code comes from the use of the widespread protocols
like TLS (SSL) and HTTP. While there are popular implementations available
as an Open Source libraries (&lt;a href=&quot;https://github.com/openssl/openssl&quot;&gt;OpenSSL&lt;/a&gt;, &lt;a href=&quot;https://github.com/nodejs/http-parser&quot;&gt;http-parser&lt;/a&gt;), they still either
provide very abstract interface (like &lt;a href=&quot;https://github.com/nodejs/http-parser&quot;&gt;http-parser&lt;/a&gt;), or an API to transfer
the responsibility of the networking to the library itself (like &lt;code&gt;SSL_set_fd()&lt;/code&gt;
in &lt;a href=&quot;https://github.com/openssl/openssl&quot;&gt;OpenSSL&lt;/a&gt; and Amazon&#39;s &lt;a href=&quot;https://github.com/awslabs/s2n&quot;&gt;s2n&lt;/a&gt;). Such abstract nature makes them easier
to embed, but the adaptor code inevitably tend to appear in the particular
applications.&lt;/p&gt;
&lt;h2 id=&quot;precursor-streambase&quot; tabindex=&quot;-1&quot;&gt;Precursor - StreamBase &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/e.uv-link-t/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/libuv/libuv&quot;&gt;libuv&lt;/a&gt; is hardly an exception, and &lt;a href=&quot;https://github.com/nodejs/node/blob/master/src/tls_wrap.cc&quot;&gt;node.js&lt;/a&gt; and &lt;a href=&quot;https://github.com/indutny/bud/blob/master/src/client.c&quot;&gt;bud&lt;/a&gt;&#39;s TLS
implementation is a vivid evidence of this. However, in a contrast to &lt;a href=&quot;https://github.com/indutny/bud/blob/master/src/client.c&quot;&gt;bud&lt;/a&gt;,
&lt;a href=&quot;https://github.com/nodejs/node/blob/master/src/tls_wrap.cc&quot;&gt;node.js&lt;/a&gt; TLS code lives off on an abstraction called &lt;a href=&quot;https://github.com/nodejs/node/blob/master/src/stream_base.h&quot;&gt;StreamBase&lt;/a&gt;. By
separating &lt;a href=&quot;https://github.com/libuv/libuv&quot;&gt;libuv&lt;/a&gt;-specific adaptor code into a generic C++ class, we have
created a foundation for a simpler and reusable implementation of any other
protocol! See, for example, recent &lt;a href=&quot;https://github.com/nodejs/node/blob/29228c4089431d0e65749421f43aafd05694f376/src/node_http_parser.cc#L472-L486&quot;&gt;node_http_parser.cc&lt;/a&gt; which uses only
a minor amount of power available through the means of &lt;a href=&quot;https://github.com/nodejs/node/blob/master/src/stream_base.h&quot;&gt;StreamBase&lt;/a&gt;, but
nevertheless provides &lt;a href=&quot;https://github.com/nodejs/node/pull/2355&quot;&gt;10-20%&lt;/a&gt; performance improvement since its inception.&lt;/p&gt;
&lt;p&gt;This implementation has some major drawbacks, preventing its wider adoption
outside of the node.js core:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++ headers: lots of virtual classes, complex API, non-trivial inheritance
scheme&lt;/li&gt;
&lt;li&gt;High internal dependence on the node.js core itself&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because of these issues (and my own limitations) &lt;a href=&quot;https://github.com/nodejs/node/blob/master/src/stream_base.h&quot;&gt;StreamBase&lt;/a&gt; has defied all
attempts to make it public.&lt;/p&gt;
&lt;h2 id=&quot;uv-link-t&quot; tabindex=&quot;-1&quot;&gt;uv_link_t &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/e.uv-link-t/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Heavily inspired by the success of &lt;a href=&quot;https://github.com/nodejs/node/blob/master/src/stream_base.h&quot;&gt;StreamBase&lt;/a&gt; in the node.js core, a
&lt;a href=&quot;https://github.com/indutny/uv_link_t&quot;&gt;uv_link_t&lt;/a&gt; library was created. It has lots of similarities with the
&lt;a href=&quot;https://github.com/nodejs/node/blob/master/src/stream_base.h&quot;&gt;StreamBase&lt;/a&gt;, but it is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implemented in C: self-documented structures, C-cast based inheritance, etc&lt;/li&gt;
&lt;li&gt;Standalone library&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The API is based on the &lt;a href=&quot;http://docs.libuv.org/en/v1.x/stream.html&quot;&gt;uv_stream_t&lt;/a&gt; and shouldn&#39;t come as a big surprise
to the users, since &lt;a href=&quot;https://github.com/indutny/uv_link_t&quot;&gt;uv_link_t&lt;/a&gt; is intended to be used together with
&lt;a href=&quot;https://github.com/libuv/libuv&quot;&gt;libuv&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is a visual explanation of how &lt;a href=&quot;https://github.com/libuv/libuv&quot;&gt;uv_link_t&lt;/a&gt; works:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://darksi.de/img/AoLNueYhpH-717.avif 717w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://darksi.de/img/AoLNueYhpH-717.webp 717w&quot;&gt;&lt;img alt=&quot;uv_link_source_t&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://darksi.de/img/AoLNueYhpH-717.svg&quot; width=&quot;717&quot; height=&quot;205&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;h2 id=&quot;examples&quot; tabindex=&quot;-1&quot;&gt;Examples &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/e.uv-link-t/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before we take a peek at the APIs, let&#39;s discuss what can be done with
&lt;a href=&quot;https://github.com/indutny/uv_link_t&quot;&gt;uv_link_t&lt;/a&gt;. Technically, any stream-based (i.e. anything that uses
&lt;code&gt;uv_stream-t&lt;/code&gt;) protocol can be implemented on top of it. Multiple protocols can
be chained together (that&#39;s why it is called &lt;code&gt;uv_&lt;/code&gt;&lt;strong&gt;link&lt;/strong&gt;&lt;code&gt;_t&lt;/code&gt;!), provided that
there is an implementation:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TCP &amp;lt;-&amp;gt; TLS &amp;lt;-&amp;gt; HTTP &amp;lt;-&amp;gt; WebSocket&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This chaining works in a pretty transparent way, and every segment of it can be
observed without disturbing the data flow and operation of the other links.&lt;/p&gt;
&lt;p&gt;Existing protocols:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/indutny/uv_ssl_t&quot;&gt;uv_ssl_t&lt;/a&gt; - TLS, based on OpenSSL&#39;s API&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/indutny/uv_http_t&quot;&gt;uv_http_t&lt;/a&gt; - low-level HTTP/1.1 implementation, possibly incomplete&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Small demo-project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/indutny/file-shooter&quot;&gt;file-shooter&lt;/a&gt; - dumb-simple HTTPS server based on both &lt;a href=&quot;https://github.com/indutny/uv_ssl_t&quot;&gt;uv_ssl_t&lt;/a&gt; and
&lt;a href=&quot;https://github.com/indutny/uv_http_t&quot;&gt;uv_http_t&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that all these projects, including &lt;a href=&quot;https://github.com/indutny/uv_link_t&quot;&gt;uv_link_t&lt;/a&gt; itself are supposed to
be built with a &lt;a href=&quot;https://github.com/gypkg/gypkg&quot;&gt;gypkg&lt;/a&gt;, which is a subject for a future blog post.&lt;/p&gt;
&lt;h2 id=&quot;api&quot; tabindex=&quot;-1&quot;&gt;API &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/e.uv-link-t/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The backbone of the API is a &lt;code&gt;uv_link_t&lt;/code&gt; structure:&lt;/p&gt;
&lt;pre class=&quot;language-c&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;uv_link_t.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;uv_link_methods_t&lt;/span&gt; methods &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;/* To be discussed below */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token class-name&quot;&gt;uv_link_t&lt;/span&gt; link&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;uv_link_init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;link&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;methods&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;/* ... some operations */&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;uv_link_close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;link&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; close_cb&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the most of the cases a first link should be an &lt;code&gt;uv_link_source_t&lt;/code&gt;. It
consumes an instance of &lt;code&gt;uv_stream_t&lt;/code&gt;, and propagates reads and writes from
the whole chain of links connected to it.&lt;/p&gt;
&lt;pre class=&quot;language-c&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;uv_link_source_t&lt;/span&gt; source&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token class-name&quot;&gt;uv_stream_t&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; to_be_consumed&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;uv_link_source_init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;source&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; to_be_consumed&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As mentioned before, links can be chained together:&lt;/p&gt;
&lt;pre class=&quot;language-c&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;uv_link_t&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token class-name&quot;&gt;uv_link_t&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;/* Initialize `a` and `b` */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;uv_link_chain&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* from */&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* to */&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &lt;code&gt;uv_link_chain&lt;/code&gt; call means that the data emitted by &lt;code&gt;a&lt;/code&gt; will be passed as
an input to &lt;code&gt;b&lt;/code&gt;, and the output of &lt;code&gt;b&lt;/code&gt; will written to &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Speaking of input/output, the API is pretty similar to &lt;a href=&quot;https://github.com/libuv/libuv&quot;&gt;libuv&lt;/a&gt;&#39;s:&lt;/p&gt;
&lt;pre class=&quot;language-c&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;uv_link_write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;uv_link_t&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; link&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;uv_buf_t&lt;/span&gt; bufs&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                  &lt;span class=&quot;token keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; nbufs&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;uv_stream_t&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; send_handle&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                  uv_link_write_cb cb&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; arg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;uv_link_read_start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;uv_link_t&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; link&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;uv_link_read_stop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;uv_link_t&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; link&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  link&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;alloc_cb &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* something */&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  link&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;read_cb &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* something */&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Please check the &lt;a href=&quot;https://github.com/indutny/uv_link_t/blob/master/docs/api.md&quot;&gt;API docs&lt;/a&gt; for further information on particular methods
and structures (likes &lt;code&gt;uv_link_source_t&lt;/code&gt; and &lt;code&gt;uv_link_observer_t&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;There is also an &lt;a href=&quot;https://github.com/indutny/uv_link_t/blob/master/docs/implementation-guide.md&quot;&gt;Implementation guide&lt;/a&gt; for implementing custom types of
&lt;code&gt;uv_link_t&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;error-reporting&quot; tabindex=&quot;-1&quot;&gt;Error reporting &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/e.uv-link-t/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having multiple independent implementations of &lt;code&gt;uv_link_t&lt;/code&gt; interface, it is a
natural question to ask: how does &lt;code&gt;uv_link_t&lt;/code&gt; handle error code conflict?&lt;/p&gt;
&lt;p&gt;The answer is that all error codes returned by &lt;code&gt;uv_link_...&lt;/code&gt; methods are
actually prefixed with the index of the particular link in a chain. Thus, even
if there are several similar links in a chain, it is possible to get the pointer
to the &lt;code&gt;uv_link_t&lt;/code&gt; instance that have emitted it:&lt;/p&gt;
&lt;pre class=&quot;language-c&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;uv_link_errno&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;uv_link_t&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; link&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;uv_link_strerror&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;uv_link_t&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; link&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;foreword-gypkg&quot; tabindex=&quot;-1&quot;&gt;Foreword: gypkg &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/e.uv-link-t/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/gypkg/gypkg&quot;&gt;gypkg&lt;/a&gt; is recommended to be used when embedding &lt;code&gt;uv_link_t&lt;/code&gt; in the C
project. There are not too many source files to put into a &lt;code&gt;Makefile&lt;/code&gt; or some
other build file, but the convenience that &lt;a href=&quot;https://github.com/gypkg/gypkg&quot;&gt;gypkg&lt;/a&gt; provides, pays off very
quickly!&lt;/p&gt;
&lt;h3 id=&quot;installation-node-js-v6-is-required&quot; tabindex=&quot;-1&quot;&gt;Installation (node.js v6 is required): &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/e.uv-link-t/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;pre class=&quot;language-sh&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-g&lt;/span&gt; gypkg&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;init&quot; tabindex=&quot;-1&quot;&gt;Init &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/e.uv-link-t/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;pre class=&quot;language-sh&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;&lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; project&lt;br&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; project&lt;br&gt;gypkg init&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;adding-uv-link-t-as-a-dependency&quot; tabindex=&quot;-1&quot;&gt;Adding &lt;code&gt;uv_link_t&lt;/code&gt; as a dependency &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/e.uv-link-t/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;pre class=&quot;language-sh&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;&lt;span class=&quot;token function&quot;&gt;vim&lt;/span&gt; project.gyp&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-python&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;variables&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;gypkg_deps&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token string&quot;&gt;&quot;git://github.com/libuv/libuv.git@^1.9.0 =&gt; uv.gyp:libuv&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token string&quot;&gt;&quot;git://github.com/indutny/uv_link_t@^1.0.0 [gpg] =&gt; uv_link_t.gyp:uv_link_t&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;# Some other GYP things&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;building&quot; tabindex=&quot;-1&quot;&gt;Building &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/e.uv-link-t/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;pre class=&quot;language-sh&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;gypkg build&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-la&lt;/span&gt; out/Release&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
	
	<entry>
		<title>Sea of Nodes</title>
		<link href="https://darksi.de/d.sea-of-nodes/"/>
		<updated>2015-10-08T00:00:00Z</updated>
		<id>https://darksi.de/d.sea-of-nodes/</id>
		<content type="html">&lt;h2 id=&quot;brief-intro&quot; tabindex=&quot;-1&quot;&gt;Brief intro &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/d.sea-of-nodes/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This post is going to be about the sea-of-nodes compiler concept that I have
recently learned.&lt;/p&gt;
&lt;p&gt;While it is not completely necessary, it may be useful to take a peek at the
some of my previous posts on JIT-compilers before reading this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://darksi.de/4.how-to-start-jitting&quot;&gt;How to start JIT-ting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://darksi.de/5.allocating-numbers&quot;&gt;Allocating numbers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://darksi.de/6.smis-and-doubles&quot;&gt;SMIs and Doubles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://darksi.de/a.deoptimize-me-not&quot;&gt;Deoptimize me not, v8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;compilers-translators&quot; tabindex=&quot;-1&quot;&gt;Compilers = translators &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/d.sea-of-nodes/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Compilers are something that every Software Engineer uses several times a day.
Surprisingly even people who consider themselves to be far from writing the
code, still use a compiler quite heavily throughout their day. This is
because most of the web depends on client-side code execution, and many of such
client-side programs are passed to the browser in a form of the source code.&lt;/p&gt;
&lt;p&gt;Here we come to an important thing: while source code is (usually)
human-readable, it looks like complete garbage to your
laptop/computer/phone/...&#39;s CPU. On other hand, machine code, that computers
&lt;strong&gt;can&lt;/strong&gt; read, is (almost always) not human-readable. Something should be done
about it, and the solution to this problem is provided by the process called
&lt;strong&gt;translation&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Trivial compilers perform a single pass of &lt;em&gt;translation&lt;/em&gt;: from the source code
to the machine code. However, in practice most compilers do at least two passes:
from the source code to &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_syntax_tree&quot;&gt;Abstract Syntax Tree&lt;/a&gt; (AST), and from &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_syntax_tree&quot;&gt;AST&lt;/a&gt; to
machine code. &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_syntax_tree&quot;&gt;AST&lt;/a&gt; in this case acts like an &lt;em&gt;Intermediate Representation&lt;/em&gt;
(IR), and as the name suggests, &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_syntax_tree&quot;&gt;AST&lt;/a&gt; is just another form of the same source
code. These intermediate representations chain together and essentially are
nothing else but the abstraction layers.&lt;/p&gt;
&lt;p&gt;There is no limit on the layer count. Each new layer brings the source program
closer to how it will look like in machine code.&lt;/p&gt;
&lt;h2 id=&quot;optimization-layers&quot; tabindex=&quot;-1&quot;&gt;Optimization layers &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/d.sea-of-nodes/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;However, not all layers are used solely for translation. Many compilers also
additionally attempt to optimize the human-written code. (Which is usually
written to have a balance between code elegance and code performance).&lt;/p&gt;
&lt;p&gt;Take the following JavaScript code, for example:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; acc &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  acc &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the compiler would translate it to the machine code straight out of &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_syntax_tree&quot;&gt;AST&lt;/a&gt;,
it may resemble (in very abstract and detached from reality instruction set):&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;acc = 0;&lt;br&gt;i = 0;&lt;br&gt;loop {&lt;br&gt;  // Load `.length` field of arr&lt;br&gt;  tmp = loadArrayLength(arr);&lt;br&gt;  if (i &gt;= tmp)&lt;br&gt;    break;&lt;br&gt;&lt;br&gt;  // Check that `i` is between 0 and `arr.length`&lt;br&gt;  // (NOTE: This is necessary for fast loads and&lt;br&gt;  // stores).&lt;br&gt;  checkIndex(arr, i);&lt;br&gt;&lt;br&gt;  // Load value&lt;br&gt;  acc += load(arr, i);&lt;br&gt;&lt;br&gt;  // Increment index&lt;br&gt;  i += 1;&lt;br&gt;}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It may not be obvious, but this code is far from optimal. Array length does not
really change inside of the loop, and the range checks are not necessary at all.
Ideally, it should look like this:&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;acc = 0;&lt;br&gt;i = 0;&lt;br&gt;len = loadArrayLength(arr);&lt;br&gt;loop {&lt;br&gt;  if (i &gt;= tmp)&lt;br&gt;    break;&lt;br&gt;&lt;br&gt;  acc += load(arr, i);&lt;br&gt;  i += 1;&lt;br&gt;}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&#39;s try to imagine how we could do this.&lt;/p&gt;
&lt;p&gt;Suppose we have an &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_syntax_tree&quot;&gt;AST&lt;/a&gt; at hand, and we try to generate the machine code
straight out of it:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(NOTE: Generated with &lt;a href=&quot;https://github.com/jquery/esprima&quot;&gt;esprima&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;ForStatement&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// This is `var i = 0;`&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br&gt;   &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;VariableDeclaration&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;     &lt;span class=&quot;token literal-property property&quot;&gt;declarations&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;VariableDeclarator&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token literal-property property&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Identifier&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;i&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token literal-property property&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Literal&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;raw&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;0&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;VariableDeclarator&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token literal-property property&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Identifier&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;acc&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token literal-property property&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Literal&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;raw&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;0&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;     &lt;span class=&quot;token literal-property property&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;var&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// `i &amp;lt; arr.length`&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br&gt;   &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;BinaryExpression&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;     &lt;span class=&quot;token literal-property property&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&amp;lt;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;     &lt;span class=&quot;token literal-property property&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Identifier&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;i&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;     &lt;span class=&quot;token literal-property property&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;MemberExpression&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Identifier&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;arr&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Identifier&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;length&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// `i++`&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br&gt;   &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;UpdateExpression&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;     &lt;span class=&quot;token literal-property property&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;++&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;     &lt;span class=&quot;token literal-property property&quot;&gt;argument&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Identifier&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;i&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;     &lt;span class=&quot;token literal-property property&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// `arr[i] += 1;`&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br&gt;   &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;ExpressionStatement&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;     &lt;span class=&quot;token literal-property property&quot;&gt;expression&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;AssignmentExpression&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;+=&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Identifier&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;acc&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br&gt;         &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;MemberExpression&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;           &lt;span class=&quot;token literal-property property&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;           &lt;span class=&quot;token literal-property property&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Identifier&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;arr&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;           &lt;span class=&quot;token literal-property property&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Identifier&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;i&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This JSON could also be visualized:
&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://darksi.de/img/m5iVXXukxl-1170.avif 1170w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://darksi.de/img/m5iVXXukxl-1170.webp 1170w&quot;&gt;&lt;img alt=&quot;AST&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://darksi.de/img/m5iVXXukxl-1170.svg&quot; width=&quot;1170&quot; height=&quot;556&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;This is a tree, so it is very natural to traverse it from the top to the bottom,
generating the machine code as we visit the AST nodes. The problem with this
approach is that the information about variables is very sparse, and is spread
through the different tree nodes.&lt;/p&gt;
&lt;p&gt;Again, to safely move the length lookup out of the loop we need to know that the
array length does not change between the loop&#39;s iterations. Humans can do it
easily just by looking at the source code, but the compiler needs to do quite a
lot of work to confidently extract those facts directly from the AST.&lt;/p&gt;
&lt;p&gt;Like many other compiler problems, this is often solved by lifting the data into
a more appropriate abstraction layer, i.e. intermediate representation. In this
particular case that choice of IR is known as a data-flow graph (DFG). Instead
of talking about syntax-entities (like &lt;code&gt;for loop&lt;/code&gt;s, &lt;code&gt;expressions&lt;/code&gt;, ...), we
should talk about the data itself (read, variables values), and how it changes
through the program.&lt;/p&gt;
&lt;h2 id=&quot;data-flow-graph&quot; tabindex=&quot;-1&quot;&gt;Data-flow Graph &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/d.sea-of-nodes/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In our particular example, the data we are interested in is the value of
variable &lt;code&gt;arr&lt;/code&gt;. We want to be able to easily observe all uses of it to verify
that there are no out-of-bounds accesses or any other change that would modify
the length of the array.&lt;/p&gt;
&lt;p&gt;This is accomplished by introducing &amp;quot;def-use&amp;quot; (definition and uses) relationship
between the different data values. Concretely, it means that the value has been
declared once (&lt;em&gt;node&lt;/em&gt;), and that it has been used somewhere to create new values
(&lt;em&gt;edge&lt;/em&gt; for every use). Obviously, connecting different values together will
form a &lt;strong&gt;data-flow graph&lt;/strong&gt; like this:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://darksi.de/img/Q8URzKczR8-681.avif 681w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://darksi.de/img/Q8URzKczR8-681.webp 681w&quot;&gt;&lt;img alt=&quot;Data-flow Graph&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://darksi.de/img/Q8URzKczR8-681.svg&quot; width=&quot;681&quot; height=&quot;647&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;Note the red &lt;code&gt;array&lt;/code&gt; box in this vast graph. The solid arrows going out of it
represent uses of this value. By iterating over those edges, the compiler can
derive that the value of &lt;code&gt;array&lt;/code&gt; is used at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;loadArrayLength&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;checkIndex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;load&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Such graphs are constructed in the way that explicitly &amp;quot;clones&amp;quot; the array node,
if its value was accessed in a destructive manner (i.e. stores, length sizes).
Whenever we see &lt;code&gt;array&lt;/code&gt; node and observe its uses - we are always certain that
its value does not change.&lt;/p&gt;
&lt;p&gt;It may sound complicated, but this property of the graph is quite easy to
achieve. The graph should follow &lt;a href=&quot;https://en.wikipedia.org/wiki/Static_single_assignment_form&quot;&gt;Single Static Assignment&lt;/a&gt; (SSA) rules.
In short, to convert any program to &lt;a href=&quot;https://en.wikipedia.org/wiki/Static_single_assignment_form&quot;&gt;SSA&lt;/a&gt; the compiler needs to rename all
assignments and later uses of the variables, to make sure that each variable is
assigned only once.&lt;/p&gt;
&lt;p&gt;Example, before SSA:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After SSA:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; a0 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a0&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; a1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This way, we can be sure that when we are talking about &lt;code&gt;a0&lt;/code&gt; - we are actually
talking about a single assignment to it. This is really close to how people do
things in the functional languages!&lt;/p&gt;
&lt;p&gt;Seeing that &lt;code&gt;loadArrayLength&lt;/code&gt; has no control dependency (i.e. no dashed lines;
we will talk about them in a bit), compiler may conclude that this node is free
to move anywhere it wants to be and can be placed outside of the loop.
By going through the graph further, we may observe that the value of &lt;code&gt;ssa:phi&lt;/code&gt;
node is always between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;arr.length&lt;/code&gt;, so the &lt;code&gt;checkIndex&lt;/code&gt; may be removed
altogether.&lt;/p&gt;
&lt;p&gt;Pretty neat, isn&#39;t it?&lt;/p&gt;
&lt;h2 id=&quot;control-flow-graph&quot; tabindex=&quot;-1&quot;&gt;Control Flow Graph &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/d.sea-of-nodes/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We just used some form of &lt;a href=&quot;https://en.wikipedia.org/wiki/Data-flow_analysis&quot;&gt;data-flow analysis&lt;/a&gt; to extract information from
the program. This allows us to make safe assumptions about how it could be
optimized.&lt;/p&gt;
&lt;p&gt;This &lt;em&gt;data-flow representation&lt;/em&gt; is very useful in many other cases too. The only
problem is that by turning our code into this kind of graph, we made a step
backwards in our representation chain (from the source code to the machine
code). This intermediate representation is less suitable for generating machine
code than even the AST.&lt;/p&gt;
&lt;p&gt;The reason is that the machine is just a sequential list of instructions, which
the CPU executes one-after-another. Our resulting graph doesn&#39;t appear to
convey that. In fact, there is no enforced ordering in it at all.&lt;/p&gt;
&lt;p&gt;Usually, this is solved by grouping the graph nodes into blocks. This
representation is known as a &lt;a href=&quot;https://en.wikipedia.org/wiki/Control_flow_graph&quot;&gt;Control Flow Graph&lt;/a&gt; (CFG). Example:&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;b0 {&lt;br&gt;  i0 = literal 0&lt;br&gt;  i1 = literal 0&lt;br&gt;&lt;br&gt;  i3 = array&lt;br&gt;  i4 = jump ^b0&lt;br&gt;}&lt;br&gt;b0 -&gt; b1&lt;br&gt;&lt;br&gt;b1 {&lt;br&gt;  i5 = ssa:phi ^b1 i0, i12&lt;br&gt;  i6 = ssa:phi ^i5, i1, i14&lt;br&gt;&lt;br&gt;  i7 = loadArrayLength i3&lt;br&gt;  i8 = cmp &quot;&amp;lt;&quot;, i6, i7&lt;br&gt;  i9 = if ^i6, i8&lt;br&gt;}&lt;br&gt;b1 -&gt; b2, b3&lt;br&gt;b2 {&lt;br&gt;  i10 = checkIndex ^b2, i3, i6&lt;br&gt;  i11 = load ^i10, i3, i6&lt;br&gt;  i12 = add i5, i11&lt;br&gt;  i13 = literal 1&lt;br&gt;  i14 = add i6, i13&lt;br&gt;  i15 = jump ^b2&lt;br&gt;}&lt;br&gt;b2 -&gt; b1&lt;br&gt;&lt;br&gt;b3 {&lt;br&gt;  i16 = exit ^b3&lt;br&gt;}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is called a graph not without the reason. For example, the &lt;code&gt;bXX&lt;/code&gt; blocks
represent nodes, and the &lt;code&gt;bXX -&amp;gt; bYY&lt;/code&gt; arrows represent edges. Let&#39;s visualize
it:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://darksi.de/img/sfOWjQef2W-134.avif 134w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://darksi.de/img/sfOWjQef2W-134.webp 134w&quot;&gt;&lt;img alt=&quot;CFG&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://darksi.de/img/sfOWjQef2W-134.svg&quot; width=&quot;134&quot; height=&quot;260&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;As you can see, there is code before the loop in block &lt;code&gt;b0&lt;/code&gt;, loop header in
&lt;code&gt;b1&lt;/code&gt;, loop test in &lt;code&gt;b2&lt;/code&gt;, loop body in &lt;code&gt;b3&lt;/code&gt;, and exit node in &lt;code&gt;b4&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Translation to machine code is very easy from this form. We just replace &lt;code&gt;iXX&lt;/code&gt;
identifiers with CPU register names (in some sense, CPU registers are sort of
variables, the CPU has a limited amount of registers, so we need to be careful
to not run out of them), and generating machine code for each instruction,
line-by-line.&lt;/p&gt;
&lt;p&gt;To recap, &lt;a href=&quot;https://en.wikipedia.org/wiki/Control_flow_graph&quot;&gt;CFG&lt;/a&gt; has data-flow relations and also ordering. This allows us to
utilize it for both data-flow analysis and machine code generation. However,
attempting to optimize the CFG, by manipulating the blocks and their contents
contained within it, can quickly become complex and error-prone.&lt;/p&gt;
&lt;p&gt;Instead, Clifford Click and Keith D. Cooper proposed to use an approach
called &lt;a href=&quot;http://www.researchgate.net/profile/Cliff_Click/publication/2394127_Combining_Analyses_Combining_Optimizations/links/0a85e537233956f6dd000000.pdf&quot;&gt;&lt;strong&gt;sea-of-nodes&lt;/strong&gt;&lt;/a&gt;, the very topic of this blog post!&lt;/p&gt;
&lt;h2 id=&quot;sea-of-nodes&quot; tabindex=&quot;-1&quot;&gt;Sea-of-Nodes &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/d.sea-of-nodes/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Remember our fancy data-flow graph with dashed lines? Those dashed-lines are
actually what make that graph a &lt;strong&gt;sea-of-nodes&lt;/strong&gt; graph.&lt;/p&gt;
&lt;p&gt;Instead of grouping nodes in blocks and ordering them, we choose to declare the
control dependencies as the dashed edges in a graph. If we will take that graph,
remove everything &lt;strong&gt;non-dashed&lt;/strong&gt;, and group things a bit we will get:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://darksi.de/img/fm8maclA7P-448.avif 448w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://darksi.de/img/fm8maclA7P-448.webp 448w&quot;&gt;&lt;img alt=&quot;Control-flow part of Sea-of-Nodes&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://darksi.de/img/fm8maclA7P-448.svg&quot; width=&quot;448&quot; height=&quot;921&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;With a bit of imagination and node reordering, we can see that this graph is the
same as the simplified CFG graphs that we have just seen above:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://darksi.de/img/sfOWjQef2W-134.avif 134w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://darksi.de/img/sfOWjQef2W-134.webp 134w&quot;&gt;&lt;img alt=&quot;CFG&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://darksi.de/img/sfOWjQef2W-134.svg&quot; width=&quot;134&quot; height=&quot;260&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;Let&#39;s take another look at the &lt;strong&gt;sea-of-nodes&lt;/strong&gt; representation:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://darksi.de/img/Q8URzKczR8-681.avif 681w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://darksi.de/img/Q8URzKczR8-681.webp 681w&quot;&gt;&lt;img alt=&quot;Sea-of-Nodes&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://darksi.de/img/Q8URzKczR8-681.svg&quot; width=&quot;681&quot; height=&quot;647&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;The striking difference between this graph and CFG is that there is no ordering
of the nodes, except the ones that have control dependencies (in other words,
the nodes participating in the control flow).&lt;/p&gt;
&lt;p&gt;This representation is very powerful way to look at the code. It has all
insights of the general data-flow graph, and could be changed easily without
constantly removing/replacing nodes in the blocks.&lt;/p&gt;
&lt;h2 id=&quot;reductions&quot; tabindex=&quot;-1&quot;&gt;Reductions &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/d.sea-of-nodes/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Speaking of changes, let&#39;s discuss the way to modify the graph. The sea-of-nodes
graph is usually modified by doing graph reductions. We just queue all nodes in
the graph. Invoke our reduction function for every node in the queue. Everything
that this function touches (changes, replaces) is queued back, and will be
passed to the function later on. If you have many reductions, you can just stack
them up together and invoke all of them on each node in the queue, or
alternatively, you can just apply them one after another, if they depend on the
final state of each other. It works like a charm!&lt;/p&gt;
&lt;p&gt;I have written a JavaScript toolset for my sea-of-nodes experiments, which
includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/indutny/json-pipeline&quot;&gt;json-pipeline&lt;/a&gt; - the builder and stdlib of the graph. Provides methods
to create nodes, add inputs to them, change their control dependencies, and
export/import the graph to/from the printable data!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/indutny/json-pipeline-reducer&quot;&gt;json-pipeline-reducer&lt;/a&gt; - the reductions engine. Just create a reducer
instance, feed it several reduction functions, and execute the reducer on the
existing &lt;a href=&quot;https://github.com/indutny/json-pipeline&quot;&gt;json-pipeline&lt;/a&gt; graph.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/indutny/json-pipeline-scheduler&quot;&gt;json-pipeline-scheduler&lt;/a&gt; - library for putting back unordered graph in a
limited amount of blocks connected to each other by control edges (dashed
lines).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Combined together, these tools can solve many problems that could be formulated
in terms of data-flow equations.&lt;/p&gt;
&lt;p&gt;Example of reduction, which will optimize our initial JS code:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; acc &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  acc &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;tl-dr&quot; tabindex=&quot;-1&quot;&gt;TL;DR &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/d.sea-of-nodes/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This code chunk is quite big, so if you want to skip it - here are the notes of
what we will do below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Compute integer ranges of various nodes: literal, add, phi&lt;/li&gt;
&lt;li&gt;Compute limits that apply to branch&#39;s body&lt;/li&gt;
&lt;li&gt;Apply range and limit information (&lt;code&gt;i&lt;/code&gt; is always a non-negative number limited
by &lt;code&gt;arr.length&lt;/code&gt;) to conclude that length check is not necessary and can be
removed&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arr.length&lt;/code&gt; will be moved out of the loop automatically by
&lt;code&gt;json-pipeline-scheduler&lt;/code&gt;. This is because it does &lt;a href=&quot;https://courses.cs.washington.edu/courses/cse501/04wi/papers/click-pldi95.pdf&quot;&gt;Global Code Motion&lt;/a&gt; to
schedule nodes in blocks.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Just for viewing graphviz output&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; fs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;fs&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; Pipeline &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;json-pipeline&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; Reducer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;json-pipeline-reducer&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; Scheduler &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;json-pipeline-scheduler&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// Create empty graph with CFG convenience&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// methods.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; p &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Pipeline&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;cfg&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// Parse the printable data and generate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// the graph.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;br&gt;p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;pipeline {&lt;br&gt;  b0 {&lt;br&gt;    i0 = literal 0&lt;br&gt;    i1 = literal 0&lt;br&gt;&lt;br&gt;    i3 = array&lt;br&gt;    i4 = jump ^b0&lt;br&gt;  }&lt;br&gt;  b0 -&gt; b1&lt;br&gt;&lt;br&gt;  b1 {&lt;br&gt;    i5 = ssa:phi ^b1 i0, i12&lt;br&gt;    i6 = ssa:phi ^i5, i1, i14&lt;br&gt;&lt;br&gt;    i7 = loadArrayLength i3&lt;br&gt;    i8 = cmp &quot;&amp;lt;&quot;, i6, i7&lt;br&gt;    i9 = if ^i6, i8&lt;br&gt;  }&lt;br&gt;  b1 -&gt; b2, b3&lt;br&gt;  b2 {&lt;br&gt;    i10 = checkIndex ^b2, i3, i6&lt;br&gt;    i11 = load ^i10, i3, i6&lt;br&gt;    i12 = add i5, i11&lt;br&gt;    i13 = literal 1&lt;br&gt;    i14 = add i6, i13&lt;br&gt;    i15 = jump ^b2&lt;br&gt;  }&lt;br&gt;  b2 -&gt; b1&lt;br&gt;&lt;br&gt;  b3 {&lt;br&gt;    i16 = exit ^b3&lt;br&gt;  }&lt;br&gt;}&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;cfg&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;printable&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;DEBUG&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;writeFileSync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;before.gv&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;graphviz&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// Just a helper to run reductions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;graph&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reduction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; reducer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Reducer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  reducer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addReduction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;reduction&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  reducer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;graph&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// Create reduction&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; ranges &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getRange&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ranges&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;has&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; ranges&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; range &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;Infinity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;Infinity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;any&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  ranges&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; range&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; range&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;updateRange&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reducer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; from&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; to&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; range &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getRange&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// Lowest type, can&#39;t get upwards&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;range&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;none&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;range&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;from &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; from &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; range&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;to &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; to &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; range&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;int&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  range&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;from &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; from&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  range&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;to &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; to&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  range&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;int&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  reducer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;updateType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reducer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; range &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getRange&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;range&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; type&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  range&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; type&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  reducer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// Set type of literal&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;reduceLiteral&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reducer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;literals&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;updateRange&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reducer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;reduceBinary&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; left&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; right&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reducer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;left&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;none&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; right&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;none&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;updateType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reducer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;none&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;left&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;int&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; right&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;int&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;updateType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reducer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;int&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;left&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;int&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; right&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;int&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// Just join the ranges of inputs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;reducePhi&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reducer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; left &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getRange&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;inputs&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; right &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getRange&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;inputs&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reduceBinary&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; left&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; right&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reducer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;inputs&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;opcode &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;add&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; left&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;from &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; left&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;to&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; from &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;left&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;from&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; right&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;from&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; to &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;left&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;to&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; right&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;to&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;updateRange&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reducer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; from&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; to&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// Detect: phi = phi + &amp;lt;positive number&gt;, where initial phi is number,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// report proper range.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;reduceAdd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reducer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; left &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getRange&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;inputs&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; right &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getRange&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;inputs&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reduceBinary&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; left&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; right&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reducer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; phi &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;inputs&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;phi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;opcode &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;ssa:phi&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; right&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;from &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; right&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;to&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; number &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; right&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;from&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;number &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; phi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;inputs&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; node&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; initial &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getRange&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;phi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;inputs&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;initial&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;int&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;updateRange&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reducer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; initial&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;from&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;Infinity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; limits &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getLimit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;limits&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;has&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; limits&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; map &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  limits&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; map&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; map&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;updateLimit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;holder&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reducer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; type&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; map &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getLimit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;holder&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;map&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;has&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    map&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;any&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; limit &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; map&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;limit&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; type &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; limit&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  limit&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; type&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  limit&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  reducer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;holder&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mergeLimit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reducer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; other&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; map &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getLimit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; otherMap &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getLimit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;other&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  otherMap&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;limit&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;updateLimit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reducer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; limit&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; limit&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// Propagate limit from: X &amp;lt; Y to `if`&#39;s true branch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;reduceIf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reducer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; test &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;inputs&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;test&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;opcode &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;cmp&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; test&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;literals&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&amp;lt;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; left &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; test&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;inputs&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; right &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; test&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;inputs&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;updateLimit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;controlUses&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; left&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reducer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&amp;lt;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; right&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;updateLimit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;controlUses&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; left&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reducer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&gt;=&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; right&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// Determine ranges and limits of&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// the values.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; rangeAndLimit &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Reducer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Reduction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function-variable function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reducer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;opcode &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;literal&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token function&quot;&gt;reduceLiteral&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reducer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;opcode &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;ssa:phi&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token function&quot;&gt;reducePhi&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reducer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;opcode &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;add&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token function&quot;&gt;reduceAdd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reducer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;opcode &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;if&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token function&quot;&gt;reduceIf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reducer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; rangeAndLimit&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// Now that we have ranges and limits,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// time to remove the useless array&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// length checks.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;reduceCheckIndex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reducer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// Walk up the control chain&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; region &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;control&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;region&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;opcode &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;region&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; region&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;opcode &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;start&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    region &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; region&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;control&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; array &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;inputs&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; index &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;inputs&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; limit &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getLimit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;region&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;limit&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; range &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getRange&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// Negative array index is not valid&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;range&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;from &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// Index should be limited by array length&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;limit&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&amp;lt;&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt;&lt;br&gt;      limit&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;opcode &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;loadArrayLength&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt;&lt;br&gt;      limit&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;inputs&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// Check is safe to remove!&lt;/span&gt;&lt;br&gt;  reducer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; eliminateChecks &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Reducer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Reduction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function-variable function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reducer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;opcode &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;checkIndex&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token function&quot;&gt;reduceCheckIndex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reducer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; eliminateChecks&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// Run scheduler to put everything&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// back to the CFG&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; out &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Scheduler&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reindex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;DEBUG&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;writeFileSync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;after.gv&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;graphviz&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;cfg&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;printable&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thank you for reading this. Please expect more information about this
sea-of-nodes approach.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Special thanks to &lt;a href=&quot;https://github.com/paulfryzel&quot;&gt;Paul Fryzel&lt;/a&gt; for proof-reading this, and providing
valuable feedback and grammar fixes!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Diving into C++ internals of node</title>
		<link href="https://darksi.de/c.cpp-in-node/"/>
		<updated>2015-05-16T00:00:00Z</updated>
		<id>https://darksi.de/c.cpp-in-node/</id>
		<content type="html">&lt;h2 id=&quot;intro&quot; tabindex=&quot;-1&quot;&gt;Intro &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/c.cpp-in-node/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There is nothing to be scared about in the C++ internals of the project,
especially in internals of &lt;a href=&quot;https://github.com/nodejs/io.js&quot;&gt;io.js&lt;/a&gt; and &lt;a href=&quot;https://github.com/nodejs/node&quot;&gt;node.js&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you ever tried to optimize JavaScript code to squeeze out every possible
performance or memory usage improvement out of it - you already wrote some C++
code.&lt;/p&gt;
&lt;p&gt;Many blogs, workshops mention JavaScript optimizations, and some of the popular
suggestions are:&lt;/p&gt;
&lt;h3 id=&quot;hidden-classes&quot; tabindex=&quot;-1&quot;&gt;Hidden Classes &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/c.cpp-in-node/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Declare all properties in the constructor to avoid creating extra
&amp;quot;hidden classes&amp;quot;. This makes them pretty much the same as a C structures,
or C++ classes, where properties are declared ahead of time to help the
compiler optimize access to them.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; z&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; x&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; y&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;z &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; z&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similar code in C++:&lt;/p&gt;
&lt;pre class=&quot;language-c&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;class Point &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt; public&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt; z&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;avoid-polymorphism&quot; tabindex=&quot;-1&quot;&gt;Avoid Polymorphism &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/c.cpp-in-node/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Avoid storing different types of values in a variables, and avoid passing
different types of values as an arguments to the function. This principle could
also be called &amp;quot;Make your code monomorphic&amp;quot;, or &amp;quot;don&#39;t mess with Compiler&amp;quot;.
This makes code look like as it has static typing, which is what we do in
C++.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &amp;lt;- good&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;bar&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &amp;lt;- polymorphism!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Compare to:&lt;/p&gt;
&lt;pre class=&quot;language-c&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;cache-and-reuse&quot; tabindex=&quot;-1&quot;&gt;Cache and Reuse &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/c.cpp-in-node/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Cache and reuse instances of objects that are expensive to create and are
allocated often. This is one is similar to manual memory allocation in C++.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;Parser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;freelist &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;Parser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;freelist&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;freelist&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token class-name&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;release &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In C++:&lt;/p&gt;
&lt;pre class=&quot;language-c&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;Parser&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; p &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; new &lt;span class=&quot;token function&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;delete p&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To conclude, even if you never wrote C++ code, you actually very likely did it
in JS.&lt;/p&gt;
&lt;p&gt;It is no surprise we use C++ in io.js/node.js. After all, V8 is written in C++
and it provides only a limited set of ECMAScript JavaScript APIs. They are
definitely cool, but if you got used to &lt;code&gt;setTimeout()&lt;/code&gt; / &lt;code&gt;clearTimeout()&lt;/code&gt; -
you&#39;ll be pretty disappointed to use just plain ECMA.&lt;/p&gt;
&lt;p&gt;Our C++ layer lives on top of the event-loop and provides all sorts of APIs:
from net sockets to dns queries, from file system events to the zlib bindings.
Which is the main reason why node.js was created in the first place!&lt;/p&gt;
&lt;h2 id=&quot;short-history-of-c-layer&quot; tabindex=&quot;-1&quot;&gt;Short History of C++ layer &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/c.cpp-in-node/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://darksi.de/img/pjQ6T0k8WH-1012.avif 1012w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://darksi.de/img/pjQ6T0k8WH-1012.webp 1012w&quot;&gt;&lt;img alt=&quot;History of Git Blame&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://darksi.de/img/pjQ6T0k8WH-1012.jpeg&quot; width=&quot;1012&quot; height=&quot;1500&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;To better understand all of these, and to ease the contribution process - it
might be a good idea to start with the history of the subject. Luckily, from its
inception, node.js is using VCS, in particular git, so the history of the
development might be revealed by running &lt;code&gt;git log&lt;/code&gt; and &lt;code&gt;git blame&lt;/code&gt; on it.&lt;/p&gt;
&lt;p&gt;Briefly, &lt;code&gt;git log deps/v8&lt;/code&gt; - has the history of v8 fighting us, and
&lt;code&gt;git log src/&lt;/code&gt; - has the history of us fighting v8.&lt;/p&gt;
&lt;h2 id=&quot;very-first-version&quot; tabindex=&quot;-1&quot;&gt;Very first version &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/c.cpp-in-node/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Jokes aside, everything started from &lt;a href=&quot;https://github.com/nodejs/io.js/commit/61890720&quot;&gt;61890720&lt;/a&gt; commit. The commit log
just says:&lt;/p&gt;
&lt;p&gt;add readme and initial code&lt;/p&gt;
&lt;p&gt;Unfortunately, we can&#39;t elaborate much from it, and need to figure out the
details ourselves. What do we see there?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/taf2/libebb&quot;&gt;libebb&lt;/a&gt; - which was used as an HTTP parser. Ryan used the code
from the &lt;a href=&quot;https://github.com/gnosek/ebb&quot;&gt;Ebb&lt;/a&gt; server that he has previously written for Ruby&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cs.fit.edu/code/projects/cse2410_fall2014_bounce/repository/revisions/90fc8d36220c0d66c352ee5f72080b8592d310d5/show/deps/liboi&quot;&gt;liboi&lt;/a&gt;- which was as a TCP server framework on top of the &lt;a href=&quot;http://software.schmorp.de/pkg/libev.html&quot;&gt;libev&lt;/a&gt;.
liboi stands for &lt;code&gt;Library for Output Input&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So the first code (that actually started compiling only at &lt;a href=&quot;https://github.com/nodejs/io.js/commit/7b7ceea&quot;&gt;7b7ceea&lt;/a&gt;) only
had one HTTP server and supplied JavaScript source code was just a handler for
it.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;options&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;verbose&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Processing &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;host &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;br&gt;        request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;path &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token string&quot;&gt;&quot; from &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;referrer &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token string&quot;&gt;&quot;@&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;userAgent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;output&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;host&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    output&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;host&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;br&gt;    output&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;host&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How was it organized internally?&lt;/p&gt;
&lt;p&gt;There was a &lt;code&gt;server.cc&lt;/code&gt; file which was reading the command line options, loading
the JavaScript source file, feeding all of these into V8, and starting the HTTP
server.&lt;/p&gt;
&lt;p&gt;Second C++ file was &lt;code&gt;js_http_request_processor.cc&lt;/code&gt; and it was responsible for
invoking the JavaScript http request handler. Not that much for a separate C++
file, right?&lt;/p&gt;
&lt;p&gt;It wasn&#39;t working that much at that point, and didn&#39;t have any of
functionality that is provided today. So let&#39;s conclude and move on from it
quickly.&lt;/p&gt;
&lt;p&gt;This version is characterized by following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One file to setup V8 and let JavaScript know about command-line arguments&lt;/li&gt;
&lt;li&gt;HTTP server fully implemented in C/C++, not invoking the JavaScript for any
networking activities&lt;/li&gt;
&lt;li&gt;One C++ instance per every incoming request, this instance maps some of the
HTTP fields (like host, url, method) to the JavaScript object.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last bullet point is very important to note: the C++ instance &amp;lt;-&amp;gt; JS object
mapping is a building brick of all future releases of node.js (including the
present one).&lt;/p&gt;
&lt;h2 id=&quot;064c8f02&quot; tabindex=&quot;-1&quot;&gt;064c8f02 &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/c.cpp-in-node/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now we quickly jump to &lt;a href=&quot;https://github.com/nodejs/io.js/commit/064c8f02&quot;&gt;064c8f02&lt;/a&gt;. The commit log says:&lt;/p&gt;
&lt;p&gt;Use ObjectWrap base class for File, Socket, Server.&lt;/p&gt;
&lt;p&gt;And this is the point where node.js has introduced one API to wrap all objects.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;net.Server&lt;/code&gt;, &lt;code&gt;net.Socket&lt;/code&gt;, and &lt;code&gt;File&lt;/code&gt; C++ classes are children of this
&lt;code&gt;ObjectWrap&lt;/code&gt; class. Which means that for every instance of them -
there will be one instance of a JS object. Invoking methods on this JS object
will invoke C++ methods on the corresponding C++ class, and the constructor
itself is a C++ class constructor.&lt;/p&gt;
&lt;p&gt;There are now different files for different parts of the provided API:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;src/node.cc&lt;/code&gt; to set up C++ libraries and invoke &lt;code&gt;src/main.js&lt;/code&gt; which
loads the script file and does some JavaScript initialization. (At this commit
we started to write as much code as possible in JavaScript, and leave
the rest in the C++ land. This pattern is used in io.js and node.js now too)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;src/http.cc&lt;/code&gt; - http server API, Connection, HttpRequest objects&lt;/li&gt;
&lt;li&gt;&lt;code&gt;src/file.cc&lt;/code&gt;, &lt;code&gt;src/file.js&lt;/code&gt; - future &lt;code&gt;fs&lt;/code&gt; module.
&lt;code&gt;src/file.js&lt;/code&gt; consists of the API abstractions for the C++ layer,
basically the same thing as with &lt;code&gt;src/node.cc&lt;/code&gt; and &lt;code&gt;src/main.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;src/process.cc&lt;/code&gt; has only &lt;code&gt;exit()&lt;/code&gt; method so far, will evolve into the
&lt;code&gt;process&lt;/code&gt; object&lt;/li&gt;
&lt;li&gt;&lt;code&gt;src/timers.cc&lt;/code&gt; is about &lt;code&gt;setTimeout&lt;/code&gt;/&lt;code&gt;setInterval&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Just a side note: HTTP server is still provided by &lt;a href=&quot;https://cs.fit.edu/code/projects/cse2410_fall2014_bounce/repository/revisions/90fc8d36220c0d66c352ee5f72080b8592d310d5/show/deps/liboi&quot;&gt;liboi&lt;/a&gt;, and node.js is
using &lt;a href=&quot;http://software.schmorp.de/pkg/libev.html&quot;&gt;libev&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;v0-2&quot; tabindex=&quot;-1&quot;&gt;v0.2 &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/c.cpp-in-node/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There was lots of growing and maturing from that commit to the v0.2, and most
notable of them were about separating the JS parts from the C++ ones,
adding CommonJS support, and tons of new modules! The file structure is
beginning to look like what we have now:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lib/&lt;/code&gt; folder for all JavaScript CommonJS modules&lt;/li&gt;
&lt;li&gt;&lt;code&gt;src/&lt;/code&gt; for their C++ counterparts&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deps/&lt;/code&gt; for all dependencies: v8, http-parser, c-ares (for async DNS),
libeio (for async FS), and libev (for async networking and auxiliary stuff)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Previously barely used through the &lt;code&gt;src/&lt;/code&gt;, &lt;code&gt;ObjectWrap&lt;/code&gt; now became a public API,
which helped polish it out a lot and improved our core use case as well.&lt;/p&gt;
&lt;p&gt;Very importantly, in &lt;a href=&quot;https://github.com/nodejs/io.js/commit/064c8f02&quot;&gt;064c8f02&lt;/a&gt; all C++ interfaces were global objects. In
v0.2 they are provided by &lt;code&gt;process.binding&lt;/code&gt; and are thus not directly visible to
the user&#39;s code.&lt;/p&gt;
&lt;p&gt;For example, &lt;code&gt;process.binding(&#39;fs&#39;)&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;fs&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;access&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Function&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; access&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Function&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; close&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Function&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; open&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;lots &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; stuff&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;returns lots of C++ methods and classes that are heavily used for interoperation
between C++ and JS in &lt;code&gt;lib/fs.js&lt;/code&gt;. Similar stuff is done for the rest of the
&lt;code&gt;lib/&lt;/code&gt; modules.&lt;/p&gt;
&lt;h2 id=&quot;v0-6&quot; tabindex=&quot;-1&quot;&gt;v0.6 &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/c.cpp-in-node/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Just a short note: &lt;code&gt;libev&lt;/code&gt; was removed and replaced by &lt;a href=&quot;https://github.com/libuv/libuv&quot;&gt;libuv&lt;/a&gt;. A product of
lots of work by Ben Noordhuis, Bert Belder, Ryan Dahl, and others!&lt;/p&gt;
&lt;p&gt;The v0.6 version is a major milestone in evolution of node.js. Partly because
Windows is now in the list of the officially supported platforms, partly because
we have our own single event-loop platform that supports both async File System
and async networking operations.&lt;/p&gt;
&lt;h2 id=&quot;v0-10&quot; tabindex=&quot;-1&quot;&gt;v0.10 &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/c.cpp-in-node/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Good, stable, but boring...&lt;/p&gt;
&lt;h2 id=&quot;v0-12-and-io-js&quot; tabindex=&quot;-1&quot;&gt;v0.12 and io.js &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/c.cpp-in-node/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Lots of new stuff! :)&lt;/p&gt;
&lt;p&gt;Mainly, we have outgrown the &lt;code&gt;ObjectWrap&lt;/code&gt; to accommodate the tracing API (which
is still needs lots of rework, AFAIK). The hip thing now is &lt;code&gt;AsyncWrap&lt;/code&gt; which is
in many ways the same thing, but now is attached to some particular domain of
operation (i.e. http, dns, tls) and which might have the another &lt;code&gt;AsyncWrap&lt;/code&gt; as
a parent. Note that &lt;code&gt;ObjectWrap&lt;/code&gt; lives in &lt;code&gt;src/node_object_wrap.h&lt;/code&gt;, and
&lt;code&gt;AsyncWrap&lt;/code&gt; in &lt;code&gt;src/async-wrap.h&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is now the present point of the node.js evolution, and I would like to
stop with the Software Archeology at this point.&lt;/p&gt;
&lt;h2 id=&quot;interoperation-handles-wraps-and-unicorns&quot; tabindex=&quot;-1&quot;&gt;Interoperation, handles, wraps, and unicorns! &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/c.cpp-in-node/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We are finally ready to dive into the C++ internals, and explore them in a
greater detail.&lt;/p&gt;
&lt;p&gt;As we already figured out - whole APIs provided by the node.js/io.js live in
two folders: &lt;code&gt;lib&lt;/code&gt; and &lt;code&gt;src&lt;/code&gt;. &lt;code&gt;lib&lt;/code&gt; holds the core modules, &lt;code&gt;src&lt;/code&gt; holds their
C++ counterparts.&lt;/p&gt;
&lt;p&gt;When you call &lt;code&gt;require(&#39;fs&#39;)&lt;/code&gt; - it does nothing but just executes the contents
of the &lt;code&gt;lib/fs.js&lt;/code&gt; file. No magic here.&lt;/p&gt;
&lt;p&gt;Now comes the interesting part, JavaScript is not capable of file system
operations, nor it is capable of networking. This is actually for the
best! (You don&#39;t want your browser to mess up whole file system,
right?) So when you do &lt;code&gt;fs.writeFileSync&lt;/code&gt;, or when you are calling
&lt;code&gt;http.request()&lt;/code&gt; there is a lot of low-level C++ stuff happening outside of the
JS-land.&lt;/p&gt;
&lt;p&gt;While the &lt;code&gt;fs&lt;/code&gt; module is quite simple to explain, it is quite boring too. After
all, in most of the cases it is just using number to represent the opened
file (so called &lt;code&gt;file descriptor&lt;/code&gt;), and it is passing this number around:
from C++ to JS, and from JS to C++. Nothing interesting, let&#39;s move on!&lt;/p&gt;
&lt;p&gt;Certainly much more attractive is the &lt;code&gt;net&lt;/code&gt; module. We create sockets, get
the &lt;code&gt;connect&lt;/code&gt; events, and expect the &lt;code&gt;.write()&lt;/code&gt; callbacks to be eventually
invoked. All of these should be powered by the C++ machinery!&lt;/p&gt;
&lt;p&gt;Here is where most of the interoperation is happening. The
&lt;code&gt;tcp_wrap&lt;/code&gt; and &lt;code&gt;stream_wrap&lt;/code&gt; bindings (remember, &lt;code&gt;process.binding()&lt;/code&gt;, right?)
provide very useful classes for JS-land: TCP, TCPConnectWrap, WriteWrap,
ShutdownWrap.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TCP&lt;/code&gt; holds the TCP socket and provides methods for writing and reading
stuff&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*Wrap&lt;/code&gt; objects are what you pass to the &lt;code&gt;TCP&lt;/code&gt; methods when you expect
some async action to happen, and need to receive notification (callback) on
their completion.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, the normal workflow for &lt;code&gt;net.connect()&lt;/code&gt; follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create &lt;code&gt;TCP&lt;/code&gt; instance in &lt;code&gt;lib/net.js&lt;/code&gt;, store it in the &lt;code&gt;_handle&lt;/code&gt; property of
the &lt;code&gt;net.Socket&lt;/code&gt; object&lt;/li&gt;
&lt;li&gt;Parse all arguments to &lt;code&gt;net.connect()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create &lt;code&gt;TCPConnectWrap&lt;/code&gt; instance (usually named &lt;code&gt;req&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Invoke &lt;code&gt;.connect()&lt;/code&gt; method with &lt;code&gt;req, port, host&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Get &lt;code&gt;req.oncomplete&lt;/code&gt; function invoked eventually, once the connection was
established, or once the kernel reported an error&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In conclusion: most of the C++ classes are either handles, or requests.
Requests are very temporary and never outlive the handle that they are bound to,
while the handles are something that live much longer (i.e. for the entire life
time of the TCP connection).&lt;/p&gt;
&lt;p&gt;Speaking of the file structure: &lt;code&gt;TCP&lt;/code&gt; is represented by the &lt;code&gt;TCPWrap&lt;/code&gt; class in
&lt;code&gt;src/tcp_wrap.cc&lt;/code&gt;, &lt;code&gt;TCPConnectWrap&lt;/code&gt; lives in the same place, and &lt;code&gt;WriteWrap&lt;/code&gt;
is in the &lt;code&gt;stream_base.cc&lt;/code&gt; file (in io.js).&lt;/p&gt;
&lt;h2 id=&quot;structure-of-c-files&quot; tabindex=&quot;-1&quot;&gt;Structure of C++ files &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/c.cpp-in-node/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;But how does the C++ provide this classes to JavaScript?&lt;/p&gt;
&lt;p&gt;Each binding has a &lt;code&gt;NODE_MODULE_CONTEXT_AWARE_BUILTIN&lt;/code&gt; macro that registers it
in the &lt;code&gt;node.cc&lt;/code&gt;. This has the same effect as following JavaScript snippet:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;modules&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;moduleName&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;initialized&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;initFn&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; moduleInitFn&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When &lt;code&gt;process.binding(&#39;moduleName&#39;)&lt;/code&gt; is invoked, &lt;code&gt;node.cc&lt;/code&gt; looks up the proper
internal binding in this hashmap and initializes it (if it wasn&#39;t previously
initialized) by calling the supplied function.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;binding&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;moduleName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; module &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; modules&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;moduleName&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;initialized&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;initFn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This initialization function receives &lt;code&gt;exports&lt;/code&gt; object as an input, and exports
the methods and classes to it in pretty much the same way as you normally do
in CommonJS modules.&lt;/p&gt;
&lt;p&gt;Each of the exported classes are bound to some C++ classes, and most of them are
actually derived from the &lt;code&gt;AsyncWrap&lt;/code&gt; C++ class.&lt;/p&gt;
&lt;p&gt;The Handle instances are destroyed automatically by V8&#39;s GC (once they are
closed in JS), and the Wraps are manually destroyed by the Handle, once they are
not used anymore.&lt;/p&gt;
&lt;p&gt;Side-note:&lt;/p&gt;
&lt;p&gt;there are two types of references to the JS
objects from C++ land: normal and weak. By default &lt;code&gt;AsyncWrap&lt;/code&gt;s are referencing
their objects in a &lt;code&gt;normal&lt;/code&gt; way, which means that the JS objects representing
the C++ classes won&#39;t be garbage collected until C++ class will dispose the
reference. The weak mode is turned on only when the &lt;code&gt;MakeWeak&lt;/code&gt; is called
somewhere in C++. This might be very useful when debugging memory leaks.&lt;/p&gt;
&lt;h2 id=&quot;small-exam&quot; tabindex=&quot;-1&quot;&gt;Small exam &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/c.cpp-in-node/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;situation&quot; tabindex=&quot;-1&quot;&gt;Situation &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/c.cpp-in-node/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You debug some io.js/node.js issue, and find that it is crashing when
instantiating a class provided by &lt;code&gt;process.binding(&#39;broken&#39;)&lt;/code&gt;. Where will you
attempt to search for the C++ source code of that class?&lt;/p&gt;
&lt;h3 id=&quot;answer&quot; tabindex=&quot;-1&quot;&gt;Answer &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/c.cpp-in-node/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Somewhere in &lt;code&gt;src/&lt;/code&gt;. Find
&lt;code&gt;NODE_MODULE_CONTEXT_AWARE_BUILTIN(broken, ...)&lt;/code&gt; and it is most like going to be
in &lt;code&gt;src/broken_something.cc&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;c-streams&quot; tabindex=&quot;-1&quot;&gt;C++ Streams &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/c.cpp-in-node/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now comes one of my recent obsessions. The C++ Stream API.&lt;/p&gt;
&lt;p&gt;It is a established fact for me that exposing the building blocks of APIs helps
to renovate, reshape and make them better &lt;em&gt;a lot better&lt;/em&gt;. One of such thing
that I was always keen to re-do was a &lt;code&gt;StreamWrap&lt;/code&gt; instance.&lt;/p&gt;
&lt;p&gt;It was ok-ish in v0.10, but when we moved TLS (SSL) implementation into C++
land it changed dramatically... and, honestly saying, not in a good way.&lt;/p&gt;
&lt;p&gt;The previously singular &lt;code&gt;StreamWrap&lt;/code&gt; instance, now became a monster that was
capable of passing the incoming data elsewhere, skipping the JavaScript
callbacks completely and doing some dark-magic OpenSSL machinery on top of it.
The implementation worked like a charm, providing much better TLS performance,
but the source code became cluttered and rigid.&lt;/p&gt;
&lt;p&gt;This &amp;quot;move-parsing-to-elsewhere&amp;quot; thing reminded me a lot about the
&lt;code&gt;stream.pipe&lt;/code&gt; that we had for JavaScript streams for ages. The natural thing to
do about it was to introduce something similar in the C++ land too. This is
exactly what was done in io.js, and the results of this live in
&lt;code&gt;src/stream_base.cc&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;next-step-with-the-c-stream-apis&quot; tabindex=&quot;-1&quot;&gt;Next step with the C++ Stream APIs &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/c.cpp-in-node/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now we have a very general implementation of this thing that could be reused in
many places. The first thing that I expect will be using this might be an
HTTP2 stream. To do it in core, we should do it in user-land first, and it could
be accomplished only by exposing the C++ Stream API, in the same way as we did
it with ObjectWrap.&lt;/p&gt;
&lt;h2 id=&quot;epilogue&quot; tabindex=&quot;-1&quot;&gt;Epilogue &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/c.cpp-in-node/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&#39;m going to ask you to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clone the io.js repo&lt;/li&gt;
&lt;li&gt;Open the &lt;code&gt;src/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Go through files in it, and check what you read about it&lt;/li&gt;
&lt;li&gt;Open &lt;code&gt;src/stream_base.h&lt;/code&gt;, &lt;code&gt;src/stream_base.cc&lt;/code&gt; and friends and figure out
what seems to be wrong to you&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nodejs/io.js/pulls&quot;&gt;Send a PR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Have fun!&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>Side Projects</title>
		<link href="https://darksi.de/b.side-projects/"/>
		<updated>2015-02-26T00:00:00Z</updated>
		<id>https://darksi.de/b.side-projects/</id>
		<content type="html">&lt;p&gt;After reading &lt;a href=&quot;https://github.com/antirez&quot;&gt;antirez&lt;/a&gt;&#39;s &lt;a href=&quot;http://antirez.com/news/86&quot;&gt;blog post&lt;/a&gt; I decided that it might be a good
exercise to write down the notable side projects that I spent my time upon since
Jan 2014.&lt;/p&gt;
&lt;p&gt;Here is the list and some comments from me:&lt;/p&gt;
&lt;h3 id=&quot;bn-js&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;https://github.com/indutny/bn.js&quot;&gt;bn.js&lt;/a&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/b.side-projects/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;JavaScript library for working with Big Numbers. &lt;a href=&quot;https://github.com/indutny/bn.js&quot;&gt;bn.js&lt;/a&gt; is an ultra-fast
&lt;a href=&quot;https://github.com/justmoon/node-bignum&quot;&gt;bignum&lt;/a&gt; alternative with support for running in io.js/node.js and browsers.&lt;/p&gt;
&lt;p&gt;This one took lots of time and effort through whole year with some periodic
&lt;a href=&quot;https://github.com/indutny/bn.js/graphs/contributors&quot;&gt;sparks in a contributions graph&lt;/a&gt;, and many PRs from OpenSource community.
Seriously, big kudos to you people for helping me with it!&lt;/p&gt;
&lt;h3 id=&quot;elliptic&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;https://github.com/indutny/elliptic&quot;&gt;elliptic&lt;/a&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/b.side-projects/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;JS library for doing Elliptic Curve crypto. It was the reason for creating the
&lt;a href=&quot;https://github.com/indutny/bn.js&quot;&gt;bn.js&lt;/a&gt; in the first place, and excuse for me to learn more about EC
cryptography and crazy math behind it.&lt;/p&gt;
&lt;h3 id=&quot;bud&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;https://github.com/indutny/bud&quot;&gt;bud&lt;/a&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/b.side-projects/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A friendly and clever TLS-terminating proxy in C.&lt;/p&gt;
&lt;p&gt;Although I worked on it since Nov 2013, lots of development happened during the
2014 year. This is my biggest project in C so far, and it has taught me a lot
about designing the APIs and interfaces in low-level languages.&lt;/p&gt;
&lt;p&gt;Bud seens lots of love from &lt;a href=&quot;https://github.com/odeke-em&quot;&gt;Emmanuel Odeke&lt;/a&gt;. Big thanks to you, Emmanuel!&lt;/p&gt;
&lt;h3 id=&quot;tls-js&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;https://github.com/indutny/tls.js&quot;&gt;tls.js&lt;/a&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/b.side-projects/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;(Incomplete) TLS implementation in JavaScript.&lt;/p&gt;
&lt;p&gt;Totally experimental protocol implementation. Did it just for fun, but it turned
to be useful in screening the web servers.&lt;/p&gt;
&lt;h3 id=&quot;hash-js&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;https://github.com/indutny/hash.js&quot;&gt;hash.js&lt;/a&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/b.side-projects/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Implementations of SHA1, SHA224, SHA256, SHA384, SHA512, RIPEMD160, various
HMACs. One of the mandatory dependencies of...&lt;/p&gt;
&lt;h3 id=&quot;bcoin&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;https://github.com/indutny/bcoin&quot;&gt;bcoin&lt;/a&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/b.side-projects/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;BitCoin SPV client implementation. Purely experimental, but I heard that some
people do use it.&lt;/p&gt;
&lt;p&gt;Lots of contributions from &lt;a href=&quot;https://github.com/chjj&quot;&gt;Christopher Jeffrey&lt;/a&gt; here. Thank you!&lt;/p&gt;
&lt;h3 id=&quot;bthread-src&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/bthread/ldbfhhncehnfgppdlgjhfgffachpehkd&quot;&gt;bthread&lt;/a&gt; (&lt;a href=&quot;https://github.com/indutny/bthread&quot;&gt;src&lt;/a&gt;) &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/b.side-projects/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Writing blog posts in a BitCoin block-chain.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I know many people hate me for this, but still I wanted to experiment with it
a little&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&quot;js-js&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;https://github.com/js-js/js.js&quot;&gt;js.js&lt;/a&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/b.side-projects/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;JS JIT compiler written in JS.&lt;/p&gt;
&lt;p&gt;Very preliminary implementation with little or no compatibility with ECMAScript
yet :)&lt;/p&gt;
&lt;h3 id=&quot;heap-js-jit-js-cfg-js&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;https://github.com/js-js&quot;&gt;heap.js, jit.js, cfg.js, ...&lt;/a&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/b.side-projects/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Various &lt;a href=&quot;https://github.com/js-js/js.js&quot;&gt;js.js&lt;/a&gt; dependencies.&lt;/p&gt;
&lt;h3 id=&quot;lll-reduction&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;https://github.com/indutny/lll-reduction&quot;&gt;lll-reduction&lt;/a&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/b.side-projects/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Lenstra%E2%80%93Lenstra%E2%80%93Lov%C3%A1sz_lattice_basis_reduction_algorithm&quot;&gt;Lenstra–Lenstra–Lovász algorithm&lt;/a&gt; JavaScript implementation.&lt;/p&gt;
&lt;p&gt;I don&#39;t remember exact reasons for writing this, but I guess I thought about
doing more optimal &lt;a href=&quot;http://www.hyperelliptic.org/tanja/conf/ECC08/slides/Mike-Scott.pdf&quot;&gt;GLV Method&lt;/a&gt; for &lt;a href=&quot;https://github.com/indutny/elliptic&quot;&gt;elliptic&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;core2dump&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;https://github.com/indutny/core2dump&quot;&gt;core2dump&lt;/a&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/b.side-projects/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Creating heap snapshots out of the core file on OS X, linuxes, and FreeBSD.&lt;/p&gt;
&lt;h3 id=&quot;asn1-js&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;https://github.com/indutny/asn1.js&quot;&gt;asn1.js&lt;/a&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/b.side-projects/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;ASN.1 encoding implementation in JS.&lt;/p&gt;
&lt;h3 id=&quot;miller-rabin&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;https://github.com/indutny/miller-rabin&quot;&gt;miller-rabin&lt;/a&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/b.side-projects/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Miller-Rabin primality test in JS.&lt;/p&gt;
&lt;h3 id=&quot;caine&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;https://github.com/indutny/caine&quot;&gt;caine&lt;/a&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/b.side-projects/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Butler bot for github projects. I wanted it to be used for io.js, but we decided
to walk a different road.&lt;/p&gt;
&lt;h4 id=&quot;epilogue&quot; tabindex=&quot;-1&quot;&gt;Epilogue &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/b.side-projects/&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;I guess that&#39;s it.&lt;/p&gt;
&lt;p&gt;Most of these projects were a big incentive for me to dig into the protocols,
technology, science. I find it much more enjoyable and interesting to
investigate new topics through their applications.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thank you for all your contributions, people! It is really awesome to see
you interested in helping me with these and other projects!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Thanks for reading this.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Deoptimize me not, v8</title>
		<link href="https://darksi.de/a.deoptimize-me-not/"/>
		<updated>2014-12-15T00:00:00Z</updated>
		<id>https://darksi.de/a.deoptimize-me-not/</id>
		<content type="html">&lt;p&gt;Compilers are awesome, right? If any programming concept may exist, it will
probably be used in compiler implementation at some point. I am always amazed
by my findings during v8 bug triaging or just random code exploration.&lt;/p&gt;
&lt;p&gt;The interesting thing about v8 that I was always passionate about, but never
truly understood, was the Deoptimizer. The idea here is that v8 optimizes
code to make it run faster, but this optimization relies on assumptions
about types, ranges, actual values, const-ness, etc. These assumptions imply
that the optimized code won&#39;t run when these conditions are not met,
since the compiler needs to &amp;quot;deoptimize&amp;quot; it by returning to the previous
&amp;quot;no-assumptions&amp;quot; version of generated code when the assumptions are failing.&lt;/p&gt;
&lt;p&gt;Technically it means that the compiler is in fact two compilers:
a base compiler and an &amp;quot;optimizer&amp;quot;. (Or even more, if we are talking about JSC
and SpiderMonkey). The concept is quite sound and can yield incredible
performance, but there is a nuance: the optimized code may be &amp;quot;deoptimized&amp;quot; in
various places, not just at the entry point, meaning that the environment (local
variables, arguments, context) should be mapped and moved around.&lt;/p&gt;
&lt;h2 id=&quot;stack-machines&quot; tabindex=&quot;-1&quot;&gt;Stack machines &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/a.deoptimize-me-not/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To better understand what needs to be done and how things are happening let&#39;s
consider a basic stack machine, like the one that we might use to interpret
program instead of JIT compiling it.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note that this stack machine and assembly below are just an output of some
abstract compiler and has nothing do to with v8. Thus here only for
demonstration purposes&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;push a&lt;br&gt;push b&lt;br&gt;push c&lt;br&gt;mul     ; pop 2 values and push `arg0 * arg1`&lt;br&gt;push d&lt;br&gt;mul     ; b * c * d&lt;br&gt;add     ; pop 2 values and push `arg0 + arg`&lt;br&gt;ret     ; pop and return value&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The interpreter will execute instructions one-by-one, maintaining the stack at
every point.&lt;/p&gt;
&lt;p&gt;Now we let&#39;s imagine some register machine (like x86_64), and write down
the same program in assembly language. To make it a bit more interesting,
consider that the target architecture has only two registers and the rest of the
values need to be stored in memory (on-stack).&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;mov [slot0], a   ; store value in 0 memory slot&lt;br&gt;mov rax, b       ; store value in rax register&lt;br&gt;mov rbx, c       ; store value in rbx register&lt;br&gt;mul rax, rbx     ; rax = rax * rbx&lt;br&gt;mov rbx, d&lt;br&gt;mul rax, rbx     ; rax = b * c * d&lt;br&gt;mov rbx, [slot0] ; load value from 0 memory slot&lt;br&gt;add rax, rbx     ; rax = b * c * d + a&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The instructions are executed one-by-one, maintaining the register values and
memory slots.&lt;/p&gt;
&lt;p&gt;In terms of our compiler, the former code is an unoptimized version of our
program, and the latter one is optimized. In fact, this is a completely valid
claim if we would like to run it on x86_64 platform, as assembly has much higher
execution speed than interpreted code that needs to be emulated.&lt;/p&gt;
&lt;p&gt;Suppose that the second &lt;code&gt;mul&lt;/code&gt; instruction in assembly works only when the &lt;code&gt;d&lt;/code&gt;
(which is in &lt;code&gt;rbx&lt;/code&gt; register) is a small integer. Now if the execution will
reach the &lt;code&gt;mul&lt;/code&gt; and find that there is a JavaScript string, it will just fail
to do the &amp;quot;right thing&amp;quot;. This &lt;code&gt;mul(num, str)&lt;/code&gt; operation will definitely require
some sort of type coercion, and could be easily handled by the interpreter.
Doing it in assembly will very likely be much more costly in terms of
performance. To deal with this the compiler inserts check instructions:&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;mov [slot0], a&lt;br&gt;mov rax, b&lt;br&gt;mov rbx, c&lt;br&gt;checkSmallInt rax&lt;br&gt;checkSmallInt rbx&lt;br&gt;mul rax, rbx&lt;br&gt;mov rbx, d&lt;br&gt;checkSmallInt rax&lt;br&gt;checkSmallInt rbx&lt;br&gt;mul rax, rbx ;&lt;br&gt;mov rbx, [slot0]&lt;br&gt;add rax, rbx&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So in such an uncommon case, where the argument of &lt;code&gt;mul&lt;/code&gt; is not a small integer,
this code should somehow be &amp;quot;deoptimized&amp;quot; from assembly code to the stack
machine and continue execution in the interpreted version. Here is the position
in the optimized code where it will stop:&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;mov [slot0], a&lt;br&gt;mov rax, b&lt;br&gt;mov rbx, c&lt;br&gt;checkSmallInt rax&lt;br&gt;checkSmallInt rbx&lt;br&gt;mul rax, rbx&lt;br&gt;mov rbx, d&lt;br&gt;checkSmallInt rax&lt;br&gt;checkSmallInt rbx &amp;lt;-----&lt;br&gt;mul rax, rbx ;&lt;br&gt;mov rbx, [slot0]&lt;br&gt;add rax, rbx&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;...and position in unoptimized code, where would like it to continue:&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;push a&lt;br&gt;push b&lt;br&gt;push c&lt;br&gt;mul&lt;br&gt;push d&lt;br&gt;mul     ; &amp;lt;-----&lt;br&gt;add&lt;br&gt;ret&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How could it do that? The simplest way is just to re-execute all code from the
program&#39;s entry point using the input arguments. This solution is very limited
though, because it is possible only if the optimized function was pure, or in
other words had no instructions with side effects (like function calls, etc...).&lt;/p&gt;
&lt;p&gt;The more general solution is to find all live values (the ones that may be used
by later functions) at the deoptimization point, find their locations in both
optimized and unoptimized code, and copy the values from the registers/memory
to stack machine&#39;s slot.&lt;/p&gt;
&lt;p&gt;This is exactly what the &amp;quot;deoptimizer&amp;quot; in v8 does. The main difference from our
imaginary example is that both unoptimized and optimized codes are in &lt;code&gt;x86_64&lt;/code&gt;
assembly language.&lt;/p&gt;
&lt;h2 id=&quot;simulates&quot; tabindex=&quot;-1&quot;&gt;Simulates &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/a.deoptimize-me-not/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now we know what to do, but how is it actually implemented in v8?&lt;/p&gt;
&lt;p&gt;These mappings are possible thanks to the special high-level instructions called
&lt;code&gt;Simulate&lt;/code&gt;s. This is how they look in the v8&#39;s high-level intermediate
representation (abbr. IR, see my &lt;a href=&quot;https://www.youtube.com/watch?v=tf6YTgO6Org&quot;&gt;EmpireNode talk&lt;/a&gt; for more info on the IRs):&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;v9 BlockEntry  &amp;lt;|@&lt;br&gt;v10 Simulate id=3 var[3] = t8 &amp;lt;|@&lt;br&gt;v11 StackCheck  changes[NewSpacePromotion] &amp;lt;|@&lt;br&gt;v12 UseConst t8 &amp;lt;|@&lt;br&gt;t13 ThisFunction  &amp;lt;|@&lt;br&gt;t14 CheckNonSmi t3 &amp;lt;|@&lt;br&gt;t15 CheckMaps t3 [0x2e26d7019781] &amp;lt;|@&lt;br&gt;v16 CheckPrototypeMaps [...] &amp;lt;|@&lt;br&gt;v17 Simulate id=24 push t3, push t4, push t8, var[3] = t13 &amp;lt;|@&lt;br&gt;v18 EnterInlined middle, id=4 &amp;lt;|@&lt;br&gt;t54 PushArgument t3 &amp;lt;|@&lt;br&gt;t55 PushArgument t4 &amp;lt;|@&lt;br&gt;t56 ArgumentsElements  &amp;lt;|@&lt;br&gt;v19 UseConst t1 &amp;lt;|@&lt;br&gt;t20 Constant ... &amp;lt;|@&lt;br&gt;v25 Simulate id=26 pop 1, push t19, var[3] = t2, var[4] = t20 &amp;lt;|@&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Note that you can obtain such IR by running node.js with &lt;code&gt;--trace-hydrogen&lt;/code&gt;
flag, which will print it out into the &lt;code&gt;hydrogen.cfg&lt;/code&gt; or &lt;code&gt;hydrogen-&amp;lt;pid&amp;gt;.cfg&lt;/code&gt;
file).&lt;/p&gt;
&lt;p&gt;The thing is called &lt;code&gt;Simulate&lt;/code&gt; with good reason. Strip away all other
instructions:&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;v10 Simulate id=3 var[3] = t8 &amp;lt;|@&lt;br&gt;v17 Simulate id=24 push t3, push t4, push t8, var[3] = t13 &amp;lt;|@&lt;br&gt;v25 Simulate id=26 pop 1, push t19, var[3] = t2, var[4] = t20 &amp;lt;|@&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;...and we will see something that resembles... our simplified stack machine!
Having a stack machine means that we could &amp;quot;simulate&amp;quot; it&#39;s state by executing
instructions one-by-one. v8&#39;s has a couple of them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;var[index] = value&lt;/code&gt; - put a value in some on-stack slot&lt;/li&gt;
&lt;li&gt;&lt;code&gt;push value&lt;/code&gt; - push a value to a virtual stack&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pop count&lt;/code&gt; - pop &lt;code&gt;count&lt;/code&gt; of values from the stack&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&#39;s simulate some states out of the above sample:&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;v10: var = { 3: t8 }, stack = []&lt;br&gt;v17: var = { 3: t13 }, stack = [ t3, t4, t8 ]&lt;br&gt;v25: var = { 3: t13, 4: t20 }, stack = [ t3, t4, t19 ]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note that this &amp;quot;simulation&amp;quot; happens at compile-time, not when actually
deoptimizing.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;These states can be used to map the values from optimized to unoptimized code.
For example, if we would like to &amp;quot;deoptimize&amp;quot; at &lt;code&gt;t56&lt;/code&gt;, we will have to find the
latest state which was at &lt;code&gt;v17&lt;/code&gt;: &lt;code&gt;var = { 3: t13 }, stack = [ t3, t4, t8 ]&lt;/code&gt;, and
just place the present values into a proper stack slots and local variables (for
&lt;code&gt;var&lt;/code&gt; ones).&lt;/p&gt;
&lt;p&gt;With the &lt;code&gt;--trace-deopt&lt;/code&gt; flag v8 will give us some insights on how it is doing
this:&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;**** DEOPT: outer at bailout #14, address 0x0, frame size 56&lt;br&gt;[deoptimizing: begin 0x341ad2082a49 outer @14]&lt;br&gt;translating outer =&gt; node=24, height=8&lt;br&gt;0x7fff5fbff3e8: [top + 72] &amp;lt;- 0xb7720f7d8b9 ; [sp + 96] 0xb7720f7d8b9 &amp;lt;an O&gt;&lt;br&gt;0x7fff5fbff3e0: [top + 64] &amp;lt;- 0xb7720f7d8b9 ; rbx 0xb7720f7d8b9 &amp;lt;an O&gt;&lt;br&gt;0x7fff5fbff3d8: [top + 56] &amp;lt;- 0x21ba55263fa9 ; caller&#39;s pc&lt;br&gt;0x7fff5fbff3d0: [top + 48] &amp;lt;- 0x7fff5fbff410 ; caller&#39;s fp&lt;br&gt;0x7fff5fbff3c8: [top + 40] &amp;lt;- 0xb7720f7d479; context&lt;br&gt;0x7fff5fbff3c0: [top + 32] &amp;lt;- 0x341ad2082ad9; function&lt;br&gt;0x7fff5fbff3b8: [top + 24] &amp;lt;- 0x341ad2004121 &amp;lt;undefined&gt; ; literal&lt;br&gt;0x7fff5fbff3b0: [top + 16] &amp;lt;- 0x341ad2082ad9 &amp;lt;JS Function inner&gt; ; literal&lt;br&gt;0x7fff5fbff3a8: [top + 8] &amp;lt;- 0xb7720f7d8b9 ; [sp + 24] 0xb7720f7d8b9 &amp;lt;an O&gt;&lt;br&gt;0x7fff5fbff3a0: [top + 0] &amp;lt;- 0x341ad2004121 ; rax 0x341ad2004121 &amp;lt;undefined&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Arrows here indicate the direction of movement. The output frame of the
unoptimized code is on the left side, and on the right side - optimized code&#39;s
values.&lt;/p&gt;
&lt;p&gt;The mentioned frame is an on-stack structure used for storing the caller address
(to make &lt;code&gt;return&lt;/code&gt; statements work), caller&#39;s frame address, and sometimes some
additional stuff (like JS context, &lt;code&gt;this&lt;/code&gt;, arguments, and the function itself):&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://darksi.de/img/1g3z_8Q7Fn-397.avif 397w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://darksi.de/img/1g3z_8Q7Fn-397.webp 397w&quot;&gt;&lt;img alt=&quot;Callstack&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://darksi.de/img/1g3z_8Q7Fn-397.png&quot; width=&quot;397&quot; height=&quot;472&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;Ignoring all the internal frame things, the interesting part would be:&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;translating outer =&gt; node=24, height=8&lt;br&gt;0x7fff5fbff3a8: [top + 8] &amp;lt;- 0xb7720f7d8b9 ; [sp + 24] 0xb7720f7d8b9 &amp;lt;an O&gt;&lt;br&gt;0x7fff5fbff3a0: [top + 0] &amp;lt;- 0x341ad2004121 ; rax 0x341ad2004121 &amp;lt;undefined&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The high-level IR of the code that generated this trace contained:&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;0 0 v10 Simulate id=3 var[3] = t8 &amp;lt;|@&lt;br&gt;...&lt;br&gt;0 0 v17 Simulate id=24 push t3, push t4 &amp;lt;|@&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is only one simulate instruction, and the state is: &lt;code&gt;stack = [t3, t4]&lt;/code&gt;.
(Sorry ignoring the local variables for this blog post).
Thus, the deoptimizer needs to put the values of the &lt;code&gt;t3&lt;/code&gt; and &lt;code&gt;t4&lt;/code&gt; instructions
into the stack slots. This information was stored ahead of time, and will be
looked up right when deoptimizing the code. Here, &lt;code&gt;t3&lt;/code&gt; was in the &lt;code&gt;[sp + 24]&lt;/code&gt;
stack slot in the optimized code, and &lt;code&gt;t4&lt;/code&gt; was in &lt;code&gt;rax&lt;/code&gt;. This process is called
a &amp;quot;frame translation&amp;quot;. Afterwards the execution will be redirected to the
unoptimized code, which will just continue operating on the values at the place
where the optimized code has been &amp;quot;deoptimized&amp;quot;.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/a.deoptimize-me-not/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &amp;quot;deoptimizer&amp;quot; is really an interesting tool, and it is one of the main
cogs in &lt;a href=&quot;http://blog.chromium.org/2010/12/new-crankshaft-for-v8.html&quot;&gt;Crankshaft&lt;/a&gt;&#39;s engine. This instrument helps the compiler in
executing the dynamic-language code as if it had been written in C++, because
it can always return to the slow unoptimized code with &amp;quot;true&amp;quot; JavaScript
semantics.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note that things are a bit more tricky with inlined functions, but this is a
topic for another blog post.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Big kudos to&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Vyacheslav Egorov&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Ben Noordhuis&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Jeremiah Senkpiel&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;for proof-reading this and providing valuable feedback.&lt;/em&gt;&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Cracking Cloudflare&#39;s heartbleed challenge</title>
		<link href="https://darksi.de/9.heartbleed/"/>
		<updated>2014-04-16T00:00:00Z</updated>
		<id>https://darksi.de/9.heartbleed/</id>
		<content type="html">&lt;h2 id=&quot;challenge&quot; tabindex=&quot;-1&quot;&gt;Challenge &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/9.heartbleed/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At April 11th 2014 Cloudflare has published a &lt;a href=&quot;http://blog.cloudflare.com/answering-the-critical-question-can-you-get-private-ssl-keys-using-heartbleed&quot;&gt;blog post&lt;/a&gt; suggesting to
try out extracting a private key of their specially prepared
&lt;a href=&quot;https://www.cloudflarechallenge.com/heartbleed&quot;&gt;challenge site&lt;/a&gt; using the &lt;a href=&quot;http://heartbleed.com/&quot;&gt;Heartbleed&lt;/a&gt; OpenSSL vulnerability. Being busy
at the time, I decided to give it a try a couple of hours later, if noone would
crack it yet. This was a legal way to do some hackery, after all!&lt;/p&gt;
&lt;h2 id=&quot;method&quot; tabindex=&quot;-1&quot;&gt;Method &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/9.heartbleed/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The method of attack was following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Send a lot of random-sized fake heartbeats (without body)&lt;/li&gt;
&lt;li&gt;Try to find a 128-byte prime factor of the certificate&#39;s &lt;a href=&quot;http://en.wikipedia.org/wiki/RSA_(cryptosystem)#Key_generation&quot;&gt;modulus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Generate the rest of the private key&#39;s parameters out of it&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I wasn&#39;t searching for a PEM-encoded private key and/or:&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;-----BEGIN RSA PRIVATE KEY-----&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;for a couple of reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is loaded only at the process startup&lt;/li&gt;
&lt;li&gt;The key may be encrypted, and there is no point in brute forcing it&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;According to my tests, DER-encoded key wasn&#39;t appearing in the memory either, so
trying to extract primes that are definitely in memory seem more feasible,
because they are stored in the following struct in OpenSSL:&lt;/p&gt;
&lt;pre class=&quot;language-c&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;rsa_st&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;/* The first parameter is used to pickup errors where&lt;br&gt;   * this is passed instead of aEVP_PKEY, it is set to 0 */&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; pad&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt; version&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; RSA_METHOD &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;meth&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;/* functional reference if &#39;meth&#39; is ENGINE-provided */&lt;/span&gt;&lt;br&gt;  ENGINE &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;engine&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  BIGNUM &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  BIGNUM &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  BIGNUM &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;d&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  BIGNUM &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  BIGNUM &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;q&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  BIGNUM &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;dmp1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  BIGNUM &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;dmq1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  BIGNUM &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;iqmp&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;/* be careful using this if the RSA structure is shared */&lt;/span&gt;&lt;br&gt;  CRYPTO_EX_DATA ex_data&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; references&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; flags&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;/* Used to cache montgomery values */&lt;/span&gt;&lt;br&gt;  BN_MONT_CTX &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;_method_mod_n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  BN_MONT_CTX &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;_method_mod_p&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  BN_MONT_CTX &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;_method_mod_q&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;/* all BIGNUM values are actually in the following data, if it is not&lt;br&gt;   * NULL */&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;bignum_data&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  BN_BLINDING &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;blinding&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  BN_BLINDING &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;mt_blinding&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Where &lt;code&gt;BIGNUM&lt;/code&gt; is:&lt;/p&gt;
&lt;pre class=&quot;language-c&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;bignum_st&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  BN_ULONG &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;d&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;token comment&quot;&gt;/* Pointer to an array of &#39;BN_BITS2&#39; bit chunks. */&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; top&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;token comment&quot;&gt;/* Index of last used d +1. */&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;/* The next are internal book keeping for bn_expand. */&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; dmax&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;token comment&quot;&gt;/* Size of the d array. */&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; neg&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;token comment&quot;&gt;/* one if the number is negative */&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; flags&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And &lt;code&gt;d&lt;/code&gt; field of &lt;code&gt;BIGNUM&lt;/code&gt; is a pointer to a little-endian representation of the
number. Note that I could have been searching for a &lt;code&gt;dmp1&lt;/code&gt;, &lt;code&gt;dmpq1&lt;/code&gt; or &lt;code&gt;iqmp&lt;/code&gt; as
well, but I was too lame at the time to put this in my tests.&lt;/p&gt;
&lt;h2 id=&quot;implementation&quot; tabindex=&quot;-1&quot;&gt;Implementation &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/9.heartbleed/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Being a node.js core developer, the platform choice for the extraction script
was obvious to me. Unfortunately, since node.js is embedding OpenSSL and
exposing only some limited amount of methods as a JavaScript API, the
&lt;a href=&quot;https://github.com/indutny/heartbleed/blob/master/node-v0.10.26.patch&quot;&gt;patch to add fake heartbeat methods&lt;/a&gt; was needed. (Update: patch is no longer
needed, just install module from npm).&lt;/p&gt;
&lt;p&gt;Having this at hand, the implementation was almost straightforward. It is
available as an &lt;a href=&quot;https://github.com/indutny/heartbleed&quot;&gt;OpenSource project on github&lt;/a&gt; now. Here are instructions for
obtaining and using it:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# Update: patch is no longer needed, just install module from npm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; clone git://github.com/indutny/heartbleed&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; clone git://github.com/joyent/node &lt;span class=&quot;token parameter variable&quot;&gt;-b&lt;/span&gt; v0.10.26 node-hb&lt;br&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; node-hb&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; apply &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;/heartbleed/node-v0.10.26.patch&lt;br&gt;./configure &lt;span class=&quot;token parameter variable&quot;&gt;--prefix&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token environment constant&quot;&gt;$HOME&lt;/span&gt;/.node/0.10.26-hb&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-j24&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; ./node&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PATH&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token environment constant&quot;&gt;$HOME&lt;/span&gt;/.node/0.10.26-hb/bin:&lt;span class=&quot;token environment constant&quot;&gt;$PATH&lt;/span&gt;&quot;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;# Here it goes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-g&lt;/span&gt; heartbleed.js&lt;br&gt;&lt;br&gt;heartbleed &lt;span class=&quot;token parameter variable&quot;&gt;-h&lt;/span&gt; cloudflarechallenge.com &lt;span class=&quot;token parameter variable&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; key.pem&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that it won&#39;t produce any result immediately, it took me 3 hours and a
certain amount of luck to obtain the key in a Cloudflare&#39;s challenge.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Bud - a TLS &quot;swiss knife&quot;</title>
		<link href="https://darksi.de/8.bud-a-tls-swiss-knife/"/>
		<updated>2014-04-03T00:00:00Z</updated>
		<id>https://darksi.de/8.bud-a-tls-swiss-knife/</id>
		<content type="html">&lt;h2 id=&quot;bud&quot; tabindex=&quot;-1&quot;&gt;Bud &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/8.bud-a-tls-swiss-knife/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To terminate TLS or not? Good question, but instead of answering it - I&#39;ll try
to make you believe that if you need a TLS terminator - the &lt;a href=&quot;http://github.com/indutny/bud&quot;&gt;Bud&lt;/a&gt; is just
the right choice.&lt;/p&gt;
&lt;h2 id=&quot;other-choices&quot; tabindex=&quot;-1&quot;&gt;Other choices &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/8.bud-a-tls-swiss-knife/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Certainly, there are some other choices for TLS termination like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/voxer/stud&quot;&gt;stud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.stunnel.org/&quot;&gt;stunnel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx&lt;/a&gt; (though, not only a TLS terminator, but a web server too)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://haproxy.1wt.eu/&quot;&gt;haproxy&lt;/a&gt; (much more than just a TLS terminator, but quite good!)&lt;/li&gt;
&lt;li&gt;...probably some others?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, in many cases &lt;a href=&quot;http://github.com/indutny/bud&quot;&gt;bud&lt;/a&gt; could do their job as well as they do and also
provide some unique features.&lt;/p&gt;
&lt;h2 id=&quot;features&quot; tabindex=&quot;-1&quot;&gt;Features &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/8.bud-a-tls-swiss-knife/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;speed&quot; tabindex=&quot;-1&quot;&gt;Speed &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/8.bud-a-tls-swiss-knife/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Bud is as fast as all of it rivals, here are comparison of it to &lt;a href=&quot;https://github.com/voxer/stud&quot;&gt;stud&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;Normal response:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://darksi.de/img/QmnPUk4SPb-661.avif 661w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://darksi.de/img/QmnPUk4SPb-661.webp 661w&quot;&gt;&lt;img alt=&quot;Normal RPS&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://darksi.de/img/QmnPUk4SPb-661.png&quot; width=&quot;661&quot; height=&quot;375&quot;&gt;&lt;/picture&gt;
&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://darksi.de/img/1qCqcQP_Ga-663.avif 663w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://darksi.de/img/1qCqcQP_Ga-663.webp 663w&quot;&gt;&lt;img alt=&quot;Normal Response&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://darksi.de/img/1qCqcQP_Ga-663.png&quot; width=&quot;663&quot; height=&quot;374&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;Big response:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://darksi.de/img/_675-jDdym-655.avif 655w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://darksi.de/img/_675-jDdym-655.webp 655w&quot;&gt;&lt;img alt=&quot;Big RPS&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://darksi.de/img/_675-jDdym-655.png&quot; width=&quot;655&quot; height=&quot;399&quot;&gt;&lt;/picture&gt;
&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://darksi.de/img/Bge6f3HPKv-661.avif 661w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://darksi.de/img/Bge6f3HPKv-661.webp 661w&quot;&gt;&lt;img alt=&quot;Big Response&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://darksi.de/img/Bge6f3HPKv-661.png&quot; width=&quot;661&quot; height=&quot;489&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;h3 id=&quot;asynchronous-sni-and-balancing&quot; tabindex=&quot;-1&quot;&gt;Asynchronous SNI and balancing &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/8.bud-a-tls-swiss-knife/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is a killer feature for any serious PaaS offering an HTTPS access to the
hosted applications. When enabled in configuration, on every incoming request
bud will do an http query to receive a TLS certificate/key pair and an address
of the backend to which this connection should be balanced.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&quot;https://github.com/indutny/bud#sni-storage&quot;&gt;docs&lt;/a&gt; for details.&lt;/p&gt;
&lt;h3 id=&quot;asynchronous-ocsp-stapling&quot; tabindex=&quot;-1&quot;&gt;Asynchronous OCSP stapling &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/8.bud-a-tls-swiss-knife/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The same kind of thing could be used to perform &lt;a href=&quot;http://en.wikipedia.org/wiki/OCSP_stapling&quot;&gt;OCSP stapling&lt;/a&gt;
asynchronously, which is pretty useful if certificates are loaded dynamically
and it isn&#39;t possible to store all of them in memory.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&quot;https://github.com/indutny/bud#ocsp-stapling&quot;&gt;docs&lt;/a&gt; for more details.&lt;/p&gt;
&lt;p&gt;All that asynchronous APIs are JSON based, so replying to such requests is as
easy as possible for almost any platform (including node.js).&lt;/p&gt;
&lt;h3 id=&quot;x-forwarded-for&quot; tabindex=&quot;-1&quot;&gt;X-Forwarded-For &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/8.bud-a-tls-swiss-knife/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The latest feature that I have implemented so far is an &lt;code&gt;x-forward&lt;/code&gt; backend
option. When enabled, bud will add &lt;code&gt;X-Forwarded-For&lt;/code&gt; header to the first request
of all incoming HTTP connections and send custom &lt;code&gt;X_FORWARD&lt;/code&gt; frame for all
&lt;a href=&quot;http://en.wikipedia.org/wiki/SPDY&quot;&gt;SPDY&lt;/a&gt; connections.&lt;/p&gt;
&lt;p&gt;This custom &lt;code&gt;X_FORWARD&lt;/code&gt; frame is already supported in &lt;a href=&quot;https://www.npmjs.org/package/spdy&quot;&gt;node-spdy@1.25.0&lt;/a&gt; and
will automatically add &lt;code&gt;X-Forwarded-For&lt;/code&gt; header to all requests on that SPDY
connection.&lt;/p&gt;
&lt;p&gt;The main pros of this method is that no actual protocol parsing is happening.
The cons is that, in case of HTTP protocol, only first request gets this header
added. This could be worked around by checking this header on incoming request
and associating it with a underlying socket (&lt;code&gt;req.socket&lt;/code&gt; in node.js.)&lt;/p&gt;
&lt;h2 id=&quot;try-it-out&quot; tabindex=&quot;-1&quot;&gt;Try it out! &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/8.bud-a-tls-swiss-knife/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hearing all that awesome things - you may become interested in giving it a try,
thanks to &lt;a href=&quot;https://npmjs.org/&quot;&gt;npm&lt;/a&gt; it is quite simple:&lt;/p&gt;
&lt;pre class=&quot;language-sh&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-g&lt;/span&gt; bud-tls&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Generating a configuration is easy too:&lt;/p&gt;
&lt;pre class=&quot;language-sh&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;bud --default-config &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; config.json&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;vim&lt;/span&gt; config.json&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All this options are documented in the &lt;a href=&quot;https://github.com/indutny/bud#bud-&quot;&gt;project&#39;s readme&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Just in case, this blog is running behind &lt;a href=&quot;http://github.com/indutny/bud&quot;&gt;bud&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id=&quot;reporting-issues&quot; tabindex=&quot;-1&quot;&gt;Reporting issues &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/8.bud-a-tls-swiss-knife/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Something does not work as expected or just crashes? Please do not hesitate to
report it on &lt;a href=&quot;https://github.com/indutny/bud/issues&quot;&gt;github issues&lt;/a&gt;.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Running node.js + DTrace on FreeBSD</title>
		<link href="https://darksi.de/7.freebsd-dtrace/"/>
		<updated>2014-04-01T00:00:00Z</updated>
		<id>https://darksi.de/7.freebsd-dtrace/</id>
		<content type="html">&lt;h2 id=&quot;preface&quot; tabindex=&quot;-1&quot;&gt;Preface &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/7.freebsd-dtrace/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Tracing node.js activity and detecting performance problems and bottlenecks
has always been an important topic for many people in the community. Though,
various ways to do this were available, including: systemtap, ETW and perfctr on
Windows. The most complete tracing support was done by Joyent guys for the
DTrace tool which works best on their &lt;a href=&quot;http://wiki.illumos.org/display/illumos/illumos+Home&quot;&gt;Illumos&lt;/a&gt; fork, called &lt;a href=&quot;http://smartos.org/&quot;&gt;SmartOS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Fortunately, since 9.0 version, FreeBSD maintainers have started fixing and
tweaking their DTrace implementation too (which is actually a backport from
Solaris). Considering that FreeBSD is much easier to install and is much
more usable as a primary OS for developers, being able to do flamegraphs for
node.js on it is something that I highly desired at the time.&lt;/p&gt;
&lt;h2 id=&quot;what-was-broken&quot; tabindex=&quot;-1&quot;&gt;What was broken &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/7.freebsd-dtrace/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sadly, it wasn&#39;t working out-of-the-box. After the installation of FreeBSD in a
VirtualBox has finished, I immediately tried to build and dtrace node with a
&lt;code&gt;jstack()&lt;/code&gt; utility (see my previous &lt;a href=&quot;https://darksi.de/3.dtrace-ustack-helper&quot;&gt;blog post&lt;/a&gt; on that topic), but it did
not work out. After some struggling it became obvious that &lt;code&gt;/dev/dtrace/helper&lt;/code&gt;
has pretty narrow permissions and the node, running under non-root user, wasn&#39;t
able to register itself within the system&#39;s DTrace module.&lt;/p&gt;
&lt;p&gt;Calling &lt;code&gt;sudo chmod 666 /dev/dtrace/helper&lt;/code&gt; improved the situation, but not that
much: version 0.11 of node.js was crashing, and version v0.10 was still not
registering it&#39;s ustack helper and DTrace provider (see &lt;a href=&quot;http://www.solarisinternals.com/wiki/index.php/DTrace_Topics_USDT#USDT&quot;&gt;USDT&lt;/a&gt; docs). This
problem was a bit tougher than the helper permissions, and took awhile to fix.&lt;/p&gt;
&lt;h2 id=&quot;how-node-interacts-with-dtrace&quot; tabindex=&quot;-1&quot;&gt;How node interacts with DTrace &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/7.freebsd-dtrace/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First of all, a bit of information about how node.js compiles it&#39;s DTrace
helpers and how they are used by the system. There were &lt;a href=&quot;http://www.bsdcan.org/2008/schedule/attachments/60_dtrace_bsdcan.pdf&quot;&gt;some slides&lt;/a&gt; on that
topic (how DTrace USDT interacts with kernel), but at that moment I figured it
out by reading the implementation&#39;s source.&lt;/p&gt;
&lt;p&gt;There are two &lt;code&gt;.d&lt;/code&gt; files in the node.js source tree: &lt;code&gt;src/node_provider.d&lt;/code&gt; and
&lt;code&gt;src/v8ustack.d&lt;/code&gt;. The former declares a &lt;code&gt;node&lt;/code&gt; DTrace USDT provider and the
latter exports an ustack helper Both of these files are compiled with
&lt;code&gt;dtrace -G -s &amp;lt;file.d&amp;gt; -o &amp;lt;out.o&amp;gt;&lt;/code&gt;, which in fact does the following thing:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Compile all D-language chunks into DIFs (&lt;a href=&quot;https://github.com/freebsd/freebsd/blob/3ecc6f129801776dd571d69cf9a262a97ad23968/sys/cddl/contrib/opensolaris/uts/common/sys/dtrace.h#L112&quot;&gt;DTrace Intermediate Format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Encode them in the DOF (&lt;a href=&quot;https://github.com/freebsd/freebsd/blob/3ecc6f129801776dd571d69cf9a262a97ad23968/sys/cddl/contrib/opensolaris/uts/common/sys/dtrace.h#L570&quot;&gt;DTrace Object File&lt;/a&gt;) format&lt;/li&gt;
&lt;li&gt;Put them into the special &lt;code&gt;._SUNW_dof&lt;/code&gt; ELF section&lt;/li&gt;
&lt;li&gt;Link it to the internally-stored &lt;code&gt;drti.o&lt;/code&gt;, providing &lt;code&gt;dtrace_dof_init&lt;/code&gt; and
&lt;code&gt;dtrace_dof_fini&lt;/code&gt; helper functions.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These functions are called on the executable&#39;s initialization and
deinitialization (surprisingly!), each making an &lt;code&gt;ioctl()&lt;/code&gt; syscall on the
&lt;code&gt;/dev/dtrace/helper&lt;/code&gt;. Specifically, &lt;code&gt;dtrace_dof_init()&lt;/code&gt; loads and verifies the
&lt;code&gt;._SUNW_dof&lt;/code&gt; section of an ELF-file and registers it with-in the kernel.&lt;/p&gt;
&lt;h2 id=&quot;how-i-fixed-it&quot; tabindex=&quot;-1&quot;&gt;How I fixed it &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/7.freebsd-dtrace/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I decided to investigate the node.js v0.11 crashes. It was crashing on a
&lt;a href=&quot;https://github.com/freebsd/freebsd/blob/4d784918edbf9aefbab5ab12e4701d3104c3ff45/cddl/contrib/opensolaris/lib/libdtrace/common/drti.c#L110&quot;&gt;this line&lt;/a&gt;, so it was either an ELF symbol problem or a DOF string
problem. Initially, I found that the DOF did not contain the STRTAB section
that &lt;code&gt;dtri.o&lt;/code&gt; was searching for, but it turned out to be a slightly bigger
problem. Since node.js has two separate &lt;code&gt;.d&lt;/code&gt; files, it has two DOFs for
each of them in it&#39;s &lt;code&gt;._SUNW_dof&lt;/code&gt; section, but the &lt;code&gt;drti.o&lt;/code&gt; was loading only
one! After all I came up with a following patch:&lt;/p&gt;
&lt;pre class=&quot;language-diff&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-diff&quot;&gt;commit c46786f47483e7fc218727aa52cf6b2278a45053&lt;br&gt;Author: Fedor Indutny &amp;lt;fedor.indutny@gmail.com&gt;&lt;br&gt;Date:   Mon Feb 17 01:16:13 2014 +0400&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;   dtrace: proper symbol fixup and import in drti&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;   &lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;   Application may contain multiple DOFs, merged into one ._SUNW_dof ELF&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;   section. Process all of them and fix symbols only in those ones that&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;   actaully define a provider. Use proper strtab for resolving symbols.&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;diff --git a/cddl/contrib/opensolaris/lib/libdtrace/common/drti.c b/cddl/contrib/opensolaris/lib/libdtrace/common/drti.c&lt;br&gt;index 3b4a38c..e47cfb4d 100644&lt;br&gt;&lt;span class=&quot;token coord&quot;&gt;--- a/cddl/contrib/opensolaris/lib/libdtrace/common/drti.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token coord&quot;&gt;+++ b/cddl/contrib/opensolaris/lib/libdtrace/common/drti.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token coord&quot;&gt;@@ -20,6 +20,7 @@&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt; */&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;/*&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt; * Copyright 2008 Sun Microsystems, Inc.  All rights reserved.&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt; * Copyright 2013 Voxer Inc. All rights reserved.&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt; * Use is subject to license terms.&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt; */&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;@@ -144,7 +145,8 @@ dtrace_dof_init(void)&lt;br&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	Lmid_t lmid;&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;#else&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	u_long lmid = 0;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token deleted-sign deleted&quot;&gt;&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	dof_sec_t *sec;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	dof_sec_t *sec, *secstart, *dofstrtab, *dofprobes;&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	dof_provider_t *dofprovider;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	size_t i;&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;#endif&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	int fd;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;@@ -152,12 +154,13 @@ dtrace_dof_init(void)&lt;br&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;#if !defined(sun)&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	Elf *e;&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	Elf_Scn *scn = NULL;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token deleted-sign deleted&quot;&gt;&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	Elf_Data *symtabdata = NULL, *dynsymdata = NULL;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	Elf_Data *symtabdata = NULL, *dynsymdata = NULL, *dofdata = NULL;&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	dof_hdr_t *dof_next = NULL;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	GElf_Shdr shdr;&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	int efd, nprobes;&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	char *s;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	char *dofstrtabraw;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	size_t shstridx, symtabidx = 0, dynsymidx = 0;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token deleted-sign deleted&quot;&gt;&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	unsigned char *dofstrtab = NULL;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	unsigned char *buf;&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	int fixedprobes = 0;&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;#endif&lt;br&gt;&lt;/span&gt;&lt;/span&gt;@@ -209,7 +212,9 @@ dtrace_dof_init(void)&lt;br&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;		} else if (shdr.sh_type == SHT_PROGBITS) {&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;			s = elf_strptr(e, shstridx, shdr.sh_name);&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;			if  (s &amp;amp;&amp;amp; strcmp(s, &quot;.SUNW_dof&quot;) == 0) {&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token deleted-sign deleted&quot;&gt;&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;				dof = elf_getdata(scn, NULL)-&gt;d_buf;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;				dofdata = elf_getdata(scn, NULL);&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;				dof = dofdata-&gt;d_buf;&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;				break;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;			}&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;		}&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	}&lt;br&gt;&lt;/span&gt;&lt;/span&gt;@@ -219,6 +224,9 @@ dtrace_dof_init(void)&lt;br&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;		close(efd);&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;		return;&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	}&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	while ((char *) dof &amp;lt; (char *) dofdata-&gt;d_buf + dofdata-&gt;d_size) {&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;		dof_next = (void *) ((char *) dof + dof-&gt;dofh_filesz);&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;#endif&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	if (dof-&gt;dofh_ident[DOF_ID_MAG0] != DOF_MAG_MAG0 ||&lt;br&gt;&lt;/span&gt;&lt;/span&gt;@@ -290,34 +298,49 @@ dtrace_dof_init(void)&lt;br&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	 * We are assuming the number of probes is less than the number of&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	 * symbols (libc can have 4k symbols, for example).&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	 */&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token deleted-sign deleted&quot;&gt;&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	sec = (dof_sec_t *)(dof + 1);&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	secstart = sec = (dof_sec_t *)(dof + 1);&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	buf = (char *)dof;&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	for (i = 0; i &amp;lt; dof-&gt;dofh_secnum; i++, sec++) {&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token deleted-sign deleted&quot;&gt;&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;		if (sec-&gt;dofs_type == DOF_SECT_STRTAB)&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;			dofstrtab = (unsigned char *)(buf + sec-&gt;dofs_offset);&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;		else if (sec-&gt;dofs_type == DOF_SECT_PROBES &amp;amp;&amp;amp; dofstrtab)&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;		if (sec-&gt;dofs_type != DOF_SECT_PROVIDER)&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;			continue;&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;		dofprovider = (void *) (buf + sec-&gt;dofs_offset);&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;		dofstrtab = secstart + dofprovider-&gt;dofpv_strtab;&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;		dofprobes = secstart + dofprovider-&gt;dofpv_probes;&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;		if (dofstrtab-&gt;dofs_type != DOF_SECT_STRTAB) {&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;			fprintf(stderr, &quot;WARNING: expected STRTAB section, but got %d&#92;n&quot;,&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;					dofstrtab-&gt;dofs_type);&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;			break;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token deleted-sign deleted&quot;&gt;&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	}&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	nprobes = sec-&gt;dofs_size / sec-&gt;dofs_entsize;&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	fixsymbol(e, symtabdata, symtabidx, nprobes, buf, sec, &amp;amp;fixedprobes,&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	    dofstrtab);&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	if (fixedprobes != nprobes) {&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;		/*&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;		 * If we haven&#39;t fixed all the probes using the&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;		 * symtab section, look inside the dynsym&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;		 * section.&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;		 */&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;		fixsymbol(e, dynsymdata, dynsymidx, nprobes, buf, sec,&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;		    &amp;amp;fixedprobes, dofstrtab);&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	}&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	if (fixedprobes != nprobes) {&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;		fprintf(stderr, &quot;WARNING: number of probes &quot;&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;		    &quot;fixed does not match the number of &quot;&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;		    &quot;defined probes (%d != %d, &quot;&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;		    &quot;respectively)&#92;n&quot;, fixedprobes, nprobes);&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;		fprintf(stderr, &quot;WARNING: some probes might &quot;&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;		    &quot;not fire or your program might crash&#92;n&quot;);&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;		}&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;		if (dofprobes-&gt;dofs_type != DOF_SECT_PROBES) {&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;			fprintf(stderr, &quot;WARNING: expected PROBES section, but got %d&#92;n&quot;,&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;			    dofprobes-&gt;dofs_type);&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;			break;&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;		}&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;		dprintf(1, &quot;found provider %p&#92;n&quot;, dofprovider);&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;		dofstrtabraw = (char *)(buf + dofstrtab-&gt;dofs_offset);&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;		nprobes = dofprobes-&gt;dofs_size / dofprobes-&gt;dofs_entsize;&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;		fixsymbol(e, symtabdata, symtabidx, nprobes, buf, dofprobes, &amp;amp;fixedprobes,&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;				dofstrtabraw);&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;		if (fixedprobes != nprobes) {&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;			/*&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;			 * If we haven&#39;t fixed all the probes using the&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;			 * symtab section, look inside the dynsym&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;			 * section.&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;			 */&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;			fixsymbol(e, dynsymdata, dynsymidx, nprobes, buf, dofprobes,&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;					&amp;amp;fixedprobes, dofstrtabraw);&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;		}&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;		if (fixedprobes != nprobes) {&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;			fprintf(stderr, &quot;WARNING: number of probes &quot;&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;			    &quot;fixed does not match the number of &quot;&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;			    &quot;defined probes (%d != %d, &quot;&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;			    &quot;respectively)&#92;n&quot;, fixedprobes, nprobes);&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;			fprintf(stderr, &quot;WARNING: some probes might &quot;&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;			    &quot;not fire or your program might crash&#92;n&quot;);&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;		}&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	}&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;#endif&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	if ((gen = ioctl(fd, DTRACEHIOC_ADDDOF, &amp;amp;dh)) == -1)&lt;br&gt;&lt;/span&gt;&lt;/span&gt;@@ -330,7 +353,12 @@ dtrace_dof_init(void)&lt;br&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	}&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	(void) close(fd);&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;#if !defined(sun)&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;		/* End of while loop */&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;		dof = dof_next;&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	}&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	elf_end(e);&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;	(void) close(efd);&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;#endif&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Although, node.js v0.11 has stopped crashing after applying it to the kernel
source code and rebuilding &lt;code&gt;libdtrace&lt;/code&gt;, it still wasn&#39;t registering an ustack
helper and a provider (&lt;code&gt;sudo dtrace -l&lt;/code&gt; did not contain any
&lt;code&gt;node&amp;lt;pid&amp;gt;:::&lt;/code&gt; probes).&lt;/p&gt;
&lt;p&gt;While reading &lt;a href=&quot;https://github.com/freebsd/freebsd/blob/4d784918edbf9aefbab5ab12e4701d3104c3ff45/cddl/contrib/opensolaris/lib/libdtrace/common/drti.c#L52&quot;&gt;FreeBSD&#39;s source code&lt;/a&gt; further, I found an environment
variable &lt;code&gt;DTRACE_DOF_INIT_DEBUG&lt;/code&gt; that helped me to take a deeper look into
what was happening for both node.js v0.10 and v0.11. After setting it to
&lt;code&gt;DTRACE_DOF_INIT_DEBUG=1&lt;/code&gt; node.js has started printing following things to the
stderr:&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;dtrace DOF node: DTrace ioctl failed for DOF at 0x804c00000:&lt;br&gt;Argument list too long&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This was totally uninformative, and I started grepping through a DTrace kernel
module with a hope to find some clues to this errors. &lt;code&gt;Argument list too long&lt;/code&gt;
is a verbose description of the &lt;code&gt;E2BIG&lt;/code&gt; errno, and luckily the &lt;a href=&quot;https://github.com/freebsd/freebsd/blob/3ecc6f129801776dd571d69cf9a262a97ad23968/sys/cddl/contrib/opensolaris/uts/common/dtrace/dtrace.c#L11989&quot;&gt;first place&lt;/a&gt;
where it is used was the place that I needed to fix. Basically, for the security
purpose kernel limits the size of the DOF that could be loaded in it&#39;s memory.
This limit is set to the 128 KB by default, and the node.js now has
significantly bigger ustack helper (7 MB for v0.11). Instead of just raising it
to a higher value, I decided to export &lt;code&gt;sysctl&lt;/code&gt; variable to make it configurable
without rebuilding the kernel. Running node again after this tweaks gave me:&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;dtrace DOF node: DTrace ioctl failed for DOF at 0x804c00000:&lt;br&gt;Invalid argument&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This failure was even more vague, since it meant that the &lt;code&gt;EINVAL&lt;/code&gt; was returned
somewhere, and there was tons of places where it could have happened. After
inserting tons of debug prints in all possible places in kernel, I have isolated
it down to &lt;a href=&quot;https://github.com/freebsd/freebsd/blob/3ecc6f129801776dd571d69cf9a262a97ad23968/sys/cddl/contrib/opensolaris/uts/common/dtrace/dtrace.c#L12462&quot;&gt;this place&lt;/a&gt;. Indeed, both of node DOFs contained a lot of
actions and the default limit (16 * 1024) was way to small for it. Exporting
another sysctl variable has solved all problems and running node.js has finally
printed this:&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;dtrace DOF node: DTrace ioctl succeeded for DOF at 0x8052c2c2c&lt;br&gt;dtrace DOF node: DTrace ioctl succeeded for DOF at 0x804c00000&lt;br&gt;dtrace DOF node: found provider 0x8052c3000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Just to confirm it, I checked the &lt;code&gt;dtrace -l&lt;/code&gt; output and (yikes!) it was there
too:&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;48986 node909 node ... gc-done&lt;br&gt;48987 node909 node ... gc-start&lt;br&gt;48988 node909 node ... http-client-request&lt;br&gt;48989 node909 node ... http-client-response&lt;br&gt;48990 node909 node ... http-server-request&lt;br&gt;48991 node909 node ... http-server-response&lt;br&gt;48992 node909 node ... net-server-connection&lt;br&gt;48993 node909 node ... net-socket-read&lt;br&gt;48994 node909 node ... net-socket-write&lt;br&gt;48995 node909 node ... net-stream-end&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;how-to-apply-all-this-patches&quot; tabindex=&quot;-1&quot;&gt;How to apply all this patches &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/7.freebsd-dtrace/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have came up with &lt;a href=&quot;https://github.com/indutny/freebsd/compare/release/10.0.0...feature/10.0-dtrace-patches&quot;&gt;this instruction&lt;/a&gt; for fixing your FreeBSD installation
to make node.js DTrace helpers work. Just a brief in-line description:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Apply &lt;a href=&quot;https://github.com/indutny/freebsd/compare/release/10.0.0...feature/10.0-dtrace-patches&quot;&gt;these patches&lt;/a&gt; to &lt;code&gt;/usr/src&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Rebuild and install kernel:
&lt;code&gt;sudo make buildkernel &amp;amp;&amp;amp; sudo make installkernel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Reboot &lt;code&gt;sudo shutdown -r&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Raise sysctl limits:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo sysctl -w kern.dtrace.helper_actions_max=16000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo sysctl -w kern.dtrace.dof_maxsize=8000000&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;Clone node.js:
&lt;code&gt;git clone git://github.com/joyent/node &amp;amp;&amp;amp; cd node &amp;amp;&amp;amp; git checkout v0.10&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Configure it: &lt;code&gt;./configure --prefix=... --with-dtrace&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Build and install it: &lt;code&gt;gmake -j24 &amp;amp;&amp;amp; gmake install&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Make DTrace device accessible to non-root users:
&lt;code&gt;sudo chmod 666 /dev/dtrace/helper&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Verify that node.js DTrace probes are inserted:
&lt;code&gt;DTRACE_DOF_INIT_DEBUG=1 /path/to/node&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thanks for reading this, and please let me know if any of these patches don&#39;t
work for you!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>SMIs and Doubles</title>
		<link href="https://darksi.de/6.smis-and-doubles/"/>
		<updated>2013-11-14T00:00:00Z</updated>
		<id>https://darksi.de/6.smis-and-doubles/</id>
		<content type="html">&lt;p&gt;This is a third post in the series of the JIT compiling crash-course. For a
context please consider reading &lt;a href=&quot;https://darksi.de/4.how-to-start-jitting&quot;&gt;the first one&lt;/a&gt; and &lt;a href=&quot;https://darksi.de/5.allocating-numbers&quot;&gt;the second&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;goal&quot; tabindex=&quot;-1&quot;&gt;Goal &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/6.smis-and-doubles/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Last time we created very basic bump memory allocator and made our existing
code work with floating point double numbers, stored in the allocated heap
objects. However floating point numbers are not suitable for some of
precision-dependent operations and also, since they are stored in memory,
requiring additional memory loads and stores, slowing down the code performance.&lt;/p&gt;
&lt;p&gt;Both of this problems could be solved by working with the integers stored in the
registers (as we did it in &lt;a href=&quot;https://darksi.de/4.how-to-start-jitting&quot;&gt;first blog post&lt;/a&gt;), which means that we will need
to support both types of numbers in our compiler&#39;s runtime (doubles and
integers).&lt;/p&gt;
&lt;h2 id=&quot;tagging&quot; tabindex=&quot;-1&quot;&gt;Tagging &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/6.smis-and-doubles/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let&#39;s recall that we are storing both pointers and numbers in the 64bit general
purpose registers (&lt;code&gt;rax&lt;/code&gt;, &lt;code&gt;rbx&lt;/code&gt;, ...). The main issue here is that, given some
register (say &lt;code&gt;rax&lt;/code&gt;), we should be able to tell if it is a pointer to the heap
object (a &amp;quot;boxed value&amp;quot;) or an integer itself (an &amp;quot;unboxed value&amp;quot;,
Small Integer, or &lt;em&gt;SMI&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Usually, a method called &amp;quot;tagging&amp;quot; is used to solve this. While there are
&lt;a href=&quot;http://wingolog.org/archives/2011/05/18/value-representation-in-javascript-implementations&quot;&gt;various ways&lt;/a&gt; to implement tagging, including: &lt;a href=&quot;http://evilpie.github.io/sayrer-fatval-backup/cache.aspx.htm&quot;&gt;Nan-Boxing&lt;/a&gt; (scroll down
to &lt;em&gt;Mozilla’s New JavaScript Value Representation&lt;/em&gt;), Nun-Boxing, and probably
some others, our compiler will just reserve the least significant bit of the
64bit register and put &lt;code&gt;1&lt;/code&gt; here if the value is a pointer and &lt;code&gt;0&lt;/code&gt; if it is a
&lt;em&gt;SMI&lt;/em&gt; (Small Integer).&lt;/p&gt;
&lt;p&gt;Here is an example of this representation:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://darksi.de/img/FZYMic5DRc-352.avif 352w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://darksi.de/img/FZYMic5DRc-352.webp 352w&quot;&gt;&lt;img alt=&quot;Smi and Pointer&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://darksi.de/img/FZYMic5DRc-352.png&quot; width=&quot;352&quot; height=&quot;202&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;Note that to get the actual value of a SMI (&amp;quot;untag&amp;quot;) we will need to shift it
right for one bit (&lt;code&gt;&amp;gt;&amp;gt; 1&lt;/code&gt;), and to convert an integer to the SMI - shift left
(&lt;code&gt;&amp;lt;&amp;lt; 1&lt;/code&gt;). Using zero for tagging SMIs pays off greatly, since we don&#39;t need to
to untag numbers to perform addition and subtraction.&lt;/p&gt;
&lt;p&gt;To use tagged pointers to heap objects we&#39;ll need to look one byte behind the
actual value, which is relatively simple in the assembly language:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Lets say that tagged pointer is in rbx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// And we&#39;re loading its contents into the rax&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And just for the convenience - example of untagging SMIs:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Untag&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;shr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// Tag&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;shl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now the most important part that we&#39;re going to do a lot - checking if the
value is a pointer:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Test that &#39;rax&#39; has the last bit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// &#39;z&#39; stands for zero&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// Basically, jump to the label if `(rax &amp;amp; 1) == 0`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;z&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;is-smi&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// &#39;nz&#39; stands for non-zero&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// Basically, jump to the label if `(rax &amp;amp; 1) != 0`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;ne&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;is-heap-object-pointer&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;reworking-previous-code&quot; tabindex=&quot;-1&quot;&gt;Reworking previous code &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/6.smis-and-doubles/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Using &lt;a href=&quot;https://github.com/indutny/jit.js/tree/master/example/heap&quot;&gt;the code from the previous blog post&lt;/a&gt;, we can finally proceed to
implementing all this recently learned stuff.&lt;/p&gt;
&lt;p&gt;First, let&#39;s add a convenient helper methods to the assembly context.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;untagSmi&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;reg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;shr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;reg&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;checkSmi&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// If no `true-` and `false-` bodies were specified -&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// just test the value.&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;t &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// Enter the scope to be able to use named labels&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;labelScope&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Test the value&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Skip SMI case if result is non-zero&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;nz&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;non-smi&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Run SMI case&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Jump to the shared end&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;end&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Non-SMI case&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;non-smi&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Shared end&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;end&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;heapOffset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;reg&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; offset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// NOTE: 8 is the size of pointer on x64 arch.&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// We&#39;re adding 1 to the offset, because first&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// quad word is used to store the heap object&#39;s type.&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;reg&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;offset &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can hook this methods into the jit.js context by passing them as a &lt;code&gt;helpers&lt;/code&gt;
option to the &lt;code&gt;jit.compile()&lt;/code&gt; API method:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; helpers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;untagSmi&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; untagSmi&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;checkSmi&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; checkSmi&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;heapOffset&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; heapOffset&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;jit&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// We can use helpers here:&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;untagSmi&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;checkSmi&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Work with SMI&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Work with pointer&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;heapOffset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;stubs&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; stubs&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;helpers&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; helpers &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;allocation&quot; tabindex=&quot;-1&quot;&gt;Allocation &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/6.smis-and-doubles/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now we should make our &lt;code&gt;Alloc&lt;/code&gt; stub return tagged pointer. Also we will use the
opportunity and improve it a bit by adding &lt;code&gt;tag&lt;/code&gt; and &lt;code&gt;size&lt;/code&gt; arguments to the
stub (thus making possible generalized allocation with variable size and tag
in the future):&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;stubs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Alloc&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;size&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; tag&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// Save &#39;rbx&#39; and &#39;rcx&#39; registers&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;spill&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;rcx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Load `offset`&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// NOTE: We&#39;ll use pointer to `offset` variable,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// to be able to update&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// it below&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;offset&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Load end&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// NOTE: Same applies to end, though, we&#39;re&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// not updating it right now&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;end&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Calculate new `offset`&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rcx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Add tag size and body size&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rcx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rcx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; size&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Check if we won&#39;t overflow our fixed size buffer&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cmp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rcx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// this.j() performs conditional jump to the specified label.&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// &#39;g&#39; stands for &#39;greater&#39;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// &#39;overflow&#39; is a label name, bound below&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;g&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;overflow&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Ok, we&#39;re good to go, update offset&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;offset&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;rcx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// First 64bit pointer is reserved for &#39;tag&#39;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// second one is a `double` value&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rcx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; tag&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;rcx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// !!!!!!!!!!!!!!!&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// ! Tag pointer !&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// !!!!!!!!!!!!!!!&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Return &#39;rax&#39;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Overflowed :(&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;overflow&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Invoke javascript function!&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// NOTE: This is really funky stuff, but I&#39;m not&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// going to dive deep into it right now&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;runtime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;GC is needed, but not implemented&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Crash&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;int3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;math-stubs&quot; tabindex=&quot;-1&quot;&gt;Math stubs &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/6.smis-and-doubles/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Also, as we&#39;re going to do a bit more book-keeping in math operations to support
both SMIs and doubles, let&#39;s split it apart and put the code, handling doubles
into the stub:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; operators &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;+&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;-&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; map &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&#39;+&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;addsd&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&#39;-&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;subsd&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;mulsd&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token string-property property&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;divsd&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// Define `Binary+`, `Binary-`, `Binary*`, and `Binary/` stubs&lt;/span&gt;&lt;br&gt;operators&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  stubs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Binary&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; operator&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;left&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; right&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Save &#39;rbx&#39; and &#39;rcx&#39;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;spill&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;rcx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token comment&quot;&gt;// Load arguments to rax and rbx&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; left&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; right&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;      &lt;span class=&quot;token comment&quot;&gt;// Convert both numbers to doubles&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;xmm1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;xmm2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;regs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; nonSmi &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; done &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;checkSmi&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;regs&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;nz&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nonSmi&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token comment&quot;&gt;// Convert integer to double&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;untagSmi&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;regs&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cvtsi2sd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;regs&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; regs&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;done&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nonSmi&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;movq&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;regs&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;heapOffset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;regs&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;done&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; instr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; map&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;operator&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;      &lt;span class=&quot;token comment&quot;&gt;// Execute binary operation&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;instr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;instr&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;xmm1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;xmm2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Unsupported binary operator: &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;br&gt;                        operator&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;      &lt;span class=&quot;token comment&quot;&gt;// Allocate new number, and put value in it&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token comment&quot;&gt;// NOTE: Last two arguments are arguments to&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token comment&quot;&gt;// the stub (`size` and `tag`)&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stub&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Alloc&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;movq&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;heapOffset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;xmm1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that this stub also converts all incoming numbers to doubles.&lt;/p&gt;
&lt;h2 id=&quot;compiler&quot; tabindex=&quot;-1&quot;&gt;Compiler &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/6.smis-and-doubles/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;And back to the compiler&#39;s code:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;visitProgram&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  assert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;               &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;               &lt;span class=&quot;token string&quot;&gt;&#39;Only one statement programs are supported&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  assert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;ExpressionStatement&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// We&#39;ve a pointer in &#39;rax&#39;, convert it to integer&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;expression&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// Get floating point number out of heap number&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;checkSmi&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Untag smi&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;untagSmi&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;movq&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;xmm1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;heapOffset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Round it towards zero&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;roundsd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;zero&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;xmm1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;xmm1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Convert double to integer&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cvtsd2si&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;xmm1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;visitLiteral&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  assert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;number&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Small Integer (SMI), Tagged value&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// (i.e. val * 2) with last bit set to&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// zero&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; utils&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;tagSmi&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Allocate new heap number&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stub&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Alloc&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Save &#39;rbx&#39; register&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;spill&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;loadDouble&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;      &lt;span class=&quot;token comment&quot;&gt;// NOTE: Pointers have last bit set to 1&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token comment&quot;&gt;// That&#39;s why we need to use &#39;heapOffset&#39;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token comment&quot;&gt;// routine to access it&#39;s memory&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;heapOffset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;visitBinary&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// Preserve &#39;rbx&#39; after leaving the AST node&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;spill&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Visit left side of expresion&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;right&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Move it to &#39;rbx&#39;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Visit right side of expression (the result is in &#39;rax&#39;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;left&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// So, to conclude, we&#39;ve left side in &#39;rax&#39; and right in &#39;rbx&#39;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;operator &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token comment&quot;&gt;// Call stub for division&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stub&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Binary&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;operator&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;labelScope&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token comment&quot;&gt;// Check if both numbers are SMIs&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;checkSmi&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;nz&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;call stub&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;checkSmi&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;nz&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;call stub&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token comment&quot;&gt;// Save rax in case of overflow&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rcx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token comment&quot;&gt;// NOTE: both &#39;rax&#39; and &#39;rbx&#39; are tagged at this&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token comment&quot;&gt;// point.&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token comment&quot;&gt;// Tags don&#39;t need to be removed if we&#39;re doing&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token comment&quot;&gt;// addition or subtraction. However, in case of&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token comment&quot;&gt;// multiplication result would be 2x bigger if&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token comment&quot;&gt;// we won&#39;t untag one of the arguments.&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;operator &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;+&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;operator &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;-&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;operator &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;untagSmi&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token comment&quot;&gt;// On overflow restore &#39;rax&#39; from &#39;rcx&#39; and invoke stub&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;o&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;restore&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token comment&quot;&gt;// Otherwise return &#39;rax&#39;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;done&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;restore&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;rcx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;call stub&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token comment&quot;&gt;// Invoke stub and return heap number in &#39;rax&#39;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stub&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Binary&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;operator&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;done&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;visitUnary&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;operator &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;-&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Negate argument by emulating binary expression&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;BinaryExpression&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;argument&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Literal&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Unsupported unary operator: &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;operator&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To conclude, we are now working with SMIs by default, inlining all operations
for the speed&#39;s sake, and falling back to the doubles in case of overflow or any
other trouble, like trying to sum a double and a SMI!&lt;/p&gt;
&lt;p&gt;That&#39;s all for now, see you here next time! Here is the full compiler code from
this article: &lt;a href=&quot;https://github.com/indutny/jit.js/tree/master/example/heap-smi-and-double&quot;&gt;github&lt;/a&gt;. Please try cloning, running and playing with it!
Hope you enjoyed this post.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Allocating numbers</title>
		<link href="https://darksi.de/6.allocating-numbers/"/>
		<updated>2013-11-06T00:00:00Z</updated>
		<id>https://darksi.de/6.allocating-numbers/</id>
		<content type="html">&lt;h2 id=&quot;jit&quot; tabindex=&quot;-1&quot;&gt;JIT &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/6.allocating-numbers/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is the second blog post in the series about JIT compiling.
&lt;a href=&quot;https://darksi.de/4.how-to-start-jitting&quot;&gt;The previous post&lt;/a&gt; was an introduction into the Just-In-Time code
generation and, in particular, &lt;a href=&quot;https://github.com/indutny/jit.js&quot;&gt;jit.js&lt;/a&gt; usage. If you haven&#39;t read it yet -
I recommend you to familiarize yourself with &lt;a href=&quot;https://darksi.de/4.how-to-start-jitting&quot;&gt;it&lt;/a&gt; first.&lt;/p&gt;
&lt;h2 id=&quot;objectives&quot; tabindex=&quot;-1&quot;&gt;Objectives &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/6.allocating-numbers/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Previously, we created a JIT compiler, supporting a very limited subset of
JavaScript: integer numbers, math binary operators (&lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;), and
&lt;code&gt;-&lt;/code&gt; unary operator. This time, we will extend it by adding floating point
number support, and, to make the process funnier and to spice things up,
we will allocate and store these numbers in the heap.&lt;/p&gt;
&lt;p&gt;Though, because we are doing things one step at a time, our heap won&#39;t have
Garbage Collection, and will live inside fixed sized memory chunk (say &amp;quot;yay&amp;quot; to
simplicity!).&lt;/p&gt;
&lt;h2 id=&quot;stubs&quot; tabindex=&quot;-1&quot;&gt;Stubs &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/6.allocating-numbers/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Knowing what we aim to do, we can now set up internal structures for these
features. Essentially, what we&#39;ll need is a memory allocation procedure, that
generates and returns memory addresses suitable for our goals.&lt;/p&gt;
&lt;p&gt;This allocation code could be generated for every AST node using series of
inlined assembly instructions, which works great and, more importantly, is
incredibly fast for concise operations. But due to the relatively big code&#39;s
size of this procedure, the resulting machine code output may become too big to
be fit entirely into the CPU&#39;s cache, causing potential performance problems to
the whole system.&lt;/p&gt;
&lt;p&gt;Generally, this is considered a bad practice. A better approach would be
parameterizing such code blocks into shared procedures called &lt;code&gt;stubs&lt;/code&gt; (I picked
that naming from &lt;a href=&quot;https://github.com/v8/v8/blob/master/src/ia32/code-stubs-ia32.cc&quot;&gt;v8&#39;s source&lt;/a&gt; and, perhaps, it is how these things are
named in other VMs too). For even better optimization these procedures
could be lazily compiled, i.e. we should not compile those ones that are not
used by generated code. This technique is good for both compilation time and
executable code size (and therefore CPU caches too).&lt;/p&gt;
&lt;p&gt;Fortunately, &lt;a href=&quot;https://github.com/indutny/jit.js&quot;&gt;jit.js&lt;/a&gt; lets you generate &lt;em&gt;stubs&lt;/em&gt; easily:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; stubs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; jit&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stubs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;stubs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Allocate&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// Our code here&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// ....&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// Returning back to caller&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Simple, isn&#39;t it? Now, to use it in our JIT compiler we&#39;ll need to pass it in
an options argument:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;jit&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// Compiler code generation happens in this context&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// Explanation:&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// Read address of &#39;Allocate&#39; stub into &#39;rax&#39; register and&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// call it.&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stub&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Allocate&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;stubs&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; stubs &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As mentioned above, only stubs that were used during compilation process will
actually be generated and reused between all callers.&lt;/p&gt;
&lt;h2 id=&quot;heap&quot; tabindex=&quot;-1&quot;&gt;Heap &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/6.allocating-numbers/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With this knowledge, we can proceed to the memory allocation phase. But first,
lets take a short look at the structure and organization of the heap.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;heap&lt;/em&gt; is the place where JavaScript (and many other) VMs create and store
objects (usually, ones that can&#39;t be fit into CPU registers). Some heap objects
may contain references to other objects (in other words, can reference them).
All live objects and their references create a directed graph, starting at
so called &lt;em&gt;roots&lt;/em&gt; (which are usually global variables and pointers on stack).&lt;/p&gt;
&lt;p&gt;Although, it is usually used in VMs with JIT compilation, Garbage Collection is
not required for the Heap. Indeed, many VMs and languages choose to use
unmanaged memory instead (C/C++ as a banal example). In such cases you (as the
language user) will generally need to explicitly free unused resources to not
run out of the memory.&lt;/p&gt;
&lt;p&gt;But for obvious reasons, the JavaScript subset compiler that we&#39;re implementing,
should support both managed memory and Garbage Collection (which will be
implemented later).&lt;/p&gt;
&lt;p&gt;There are tons of books that may give you an advanced introduction into the
heap allocation and garbage collection (my recommendation is
&lt;a href=&quot;http://www.amazon.com/The-Garbage-Collection-Handbook-Management/dp/1420082795/ref=sr_1_1?ie=UTF8&amp;amp;qid=1383600127&amp;amp;sr=8-1&amp;amp;keywords=garbage+collection+handbook&quot;&gt;The Garbage Collection Handbook&lt;/a&gt;), and considerably many ways to allocate
and collect memory in the heap.&lt;/p&gt;
&lt;p&gt;Usually, you will need to choose between the allocation speed and memory
fragmentation. But, since we are not covering this very deeply, I would
recommend to stick with the method called &amp;quot;bump allocation&amp;quot; for now.&lt;/p&gt;
&lt;h2 id=&quot;bump-allocation&quot; tabindex=&quot;-1&quot;&gt;Bump allocation &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/6.allocating-numbers/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Fixed-page bump allocation works in a following way.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Take the memory chunk of fixed size (a &lt;em&gt;page&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Give away consequent slices of it as a return value of the allocation
procedure.&lt;/li&gt;
&lt;li&gt;When running low on memory, perform the Garbage Collection and free all
unused space, by either compacting live objects or evacuating them to the
new memory chunk (replacing references to live objects in both cases).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In terms of &lt;a href=&quot;https://github.com/indutny/jit.js&quot;&gt;jit.js&lt;/a&gt; and stubs API, this procedure may look as following:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Create fixed size memory chunk&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; page &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// Set-up pointers to page start and page end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; offset &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; jit&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;page&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; end &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; jit&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;page&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;stubs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Alloc&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// Save &#39;rbx&#39; and &#39;rcx&#39; registers&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;spill&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;rcx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Load `offset`&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// NOTE: We&#39;ll use pointer to `offset` variable, to be able to update&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// it below&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;offset&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Load end&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// NOTE: Same applies to end, though, we&#39;re not updating it right now&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;end&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Calculate new `offset`&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rcx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// We&#39;ll assume that all allocations are 16 bytes = two 64bit pointers&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rcx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Check if we won&#39;t overflow our fixed size buffer&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cmp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rcx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// this.j() performs conditional jump to the specified label.&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// &#39;g&#39; stands for &#39;greater&#39;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// &#39;overflow&#39; is a label name, bound below&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;g&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;overflow&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Ok, we&#39;re good to go, update offset&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;offset&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;rcx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// The first 64bit pointer is reserved for &#39;tag&#39;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// the second one is a `double` value&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Return &#39;rax&#39;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Overflowed :(&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;overflow&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Invoke javascript function!&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// NOTE: This is really funky stuff, but I&#39;m not going to dive deep&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// into it right now&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;runtime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;GC is needed, but not implemented&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Crash&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;int3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&#39;s it! Not totally straightforward, but not really complicated either!&lt;/p&gt;
&lt;p&gt;This procedure will give away consequent slices of the &lt;em&gt;page&lt;/em&gt;, and even tag
them! (I&#39;ll cover tagging in one of the next posts. Basically, they&#39;re used to
distinguish different kinds of heap objects).&lt;/p&gt;
&lt;p&gt;Few things to note here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;jit.ptr(buf, offset)&lt;/code&gt; returns a &lt;code&gt;Buffer&lt;/code&gt;, containing a pointer to the given
&lt;code&gt;buf&lt;/code&gt; with &lt;code&gt;offset&lt;/code&gt; added to it.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this.spill()&lt;/code&gt; is a routine for saving and restoring registers to/from the
memory (this process is usually called &lt;em&gt;spilling&lt;/em&gt;). It takes list of the
registers and the closure. These registers will be saved before entering the
closure, and restored right after leaving it.
NOTE: The restore code will be generated before each &lt;code&gt;this.Return()&lt;/code&gt; too.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this.mov([&#39;rbx&#39;], &#39;rcx&#39;)&lt;/code&gt; - stores &lt;code&gt;rcx&lt;/code&gt; register into the memory location,
pointed by the value of &lt;code&gt;rbx&lt;/code&gt; register.
NOTE: you can also specify an offset here: &lt;code&gt;this.mov([&#39;rbx&#39;, 8], &#39;rcx&#39;)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;jit.js supports branching primitives: &lt;code&gt;this.cmp(a, b)&lt;/code&gt;,
&lt;code&gt;this.j(condition, labelName)&lt;/code&gt;, &lt;code&gt;this.j(labelName)&lt;/code&gt;, &lt;code&gt;this.bind(labelName)&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;floating-point&quot; tabindex=&quot;-1&quot;&gt;Floating point &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/6.allocating-numbers/&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Now as we have a &lt;em&gt;presumably&lt;/em&gt; working allocation procedure, let&#39;s recall what
should be stored inside of this heap chunks. In the allocation procedure, we
create chunks with the 8 byte tag value, and the 8 byte contents. This is
enough to store &lt;code&gt;double&lt;/code&gt; (as C type) floating point numbers.&lt;/p&gt;
&lt;p&gt;There are plenty of assembly instructions to load/store/work with such numbers.
But note that to work with them - you&#39;ll need to store them in the different
register set: &lt;code&gt;xmm0&lt;/code&gt;, &lt;code&gt;xmm1&lt;/code&gt;, ... &lt;code&gt;xmm15&lt;/code&gt;. Although, 64-bit floating numbers
could be stored in the general purpose registers: &lt;code&gt;rax&lt;/code&gt;, &lt;code&gt;rbx&lt;/code&gt;, ... Performing
math operations is possible only with a &lt;code&gt;xmm&lt;/code&gt; register set. Here are some
instructions, that are present in &lt;code&gt;jit.js&lt;/code&gt; and should be useful for our
compiler:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;movq(&#39;xmm&#39;, &#39;gp&#39;)&lt;/code&gt; or &lt;code&gt;movq(&#39;gp&#39;, &#39;xmm&#39;)&lt;/code&gt; to move 64bits from the general
purpose register (or memory pointed by it) to xmm, or the other way around.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;movsd(&#39;xmm&#39;, &#39;xmm&#39;)&lt;/code&gt; to move the value from one xmm to another.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;addsd&lt;/code&gt;, &lt;code&gt;mulsd&lt;/code&gt;, &lt;code&gt;subsd&lt;/code&gt;, &lt;code&gt;divsd&lt;/code&gt; - addition, multiplication, subtraction,
division.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cvtsi2sd(&#39;xmm&#39;, &#39;gp&#39;)&lt;/code&gt;, &lt;code&gt;cvts2si(&#39;gp&#39;, &#39;xmm&#39;)&lt;/code&gt; - converts integer into
double, and double into integer, respectively.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;roundsd(&#39;mode&#39;, &#39;xmm&#39;, &#39;xmm&#39;)&lt;/code&gt; - round the &lt;code&gt;src&lt;/code&gt; register using specified
&lt;code&gt;mode&lt;/code&gt; (which is one of: &lt;code&gt;nearest&lt;/code&gt;, &lt;code&gt;down&lt;/code&gt;, &lt;code&gt;up&lt;/code&gt;, &lt;code&gt;zero&lt;/code&gt;) and place the
result into the &lt;code&gt;dst&lt;/code&gt; register.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Using this sacred knowledge we can patch our existing code to make it work with
the floating point numbers (yeah, we will remove the integer support for now):&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Compile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; fn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; jit&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// This will generate default entry boilerplate&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Proc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ast&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// The result should be in &#39;rax&#39; at this point&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// This will generate default exit boilerplate&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;stubs&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; stubs &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// Execute&lt;/span&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Program&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;visitProgram&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ast&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Literal&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;visitLiteral&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ast&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;UnaryExpression&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;visitUnary&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ast&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;BinaryExpression&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;visitBinary&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ast&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Unknown ast node: &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;visitProgram&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  assert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;               &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;               &lt;span class=&quot;token string&quot;&gt;&#39;Only one statement programs are supported&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  assert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;ExpressionStatement&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// We&#39;ve a pointer in &#39;rax&#39;, convert it to integer&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;expression&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// Get floating point number out of heap number&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;movq&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;xmm1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// Round it towards zero&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;roundsd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;zero&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;xmm1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;xmm1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// Convert double to integer&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cvtsd2si&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;xmm1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;visitLiteral&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  assert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;number&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// Allocate new heap number&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stub&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Alloc&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// Save &#39;rbx&#39; register&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;spill&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;loadDouble&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;visitBinary&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// Preserve &#39;rbx&#39; after leaving the AST node&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;spill&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Visit right side of expresion&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;right&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Move it to &#39;rbx&#39;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Visit left side of expression (the result is in &#39;rax&#39;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;left&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// So, to conclude, we&#39;ve left side in &#39;rax&#39; and right in &#39;rbx&#39;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Let&#39;s load their double values&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;movq&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;xmm1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;movq&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;xmm2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Execute binary operation&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;operator &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;+&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addsd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;xmm1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;xmm2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;operator &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;-&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subsd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;xmm1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;xmm2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;operator &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mulsd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;xmm1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;xmm2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;operator &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;divsd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;xmm1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;xmm2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Unsupported binary operator: &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;operator&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Allocate new number, and put value in it&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stub&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Alloc&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;movq&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;xmm1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;visitUnary&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;operator &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;-&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Negate argument by emulating binary expression&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;BinaryExpression&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;argument&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Literal&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Unsupported unary operator: &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;operator&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;to-be-continued&quot; tabindex=&quot;-1&quot;&gt;To be continued &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/6.allocating-numbers/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So, that&#39;s all I have to say to you for now. On a more social theme, you may
want subscribe to my &lt;a href=&quot;https://twitter.com/indutny&quot;&gt;twitter&lt;/a&gt; or watch my &lt;a href=&quot;https://github.com/indutny/blog&quot;&gt;blog on github&lt;/a&gt;. Don&#39;t miss
the next post!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to start JIT-ting</title>
		<link href="https://darksi.de/4.how-to-start-jitting/"/>
		<updated>2013-11-01T00:00:00Z</updated>
		<id>https://darksi.de/4.how-to-start-jitting/</id>
		<content type="html">&lt;h2 id=&quot;premise&quot; tabindex=&quot;-1&quot;&gt;Premise &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/4.how-to-start-jitting/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Most developers heard about JIT compilers and how they can make slow interpreted
languages run at a speed, comparable to native code. However, not many people
understand how exactly this JIT thing works, and even less people could
write their own compilers.&lt;/p&gt;
&lt;p&gt;I think having at least, basic knowledge of compiler internals may greatly
improve understanding of the code that is running on that software.&lt;/p&gt;
&lt;p&gt;In this article, we&#39;ll visit some peaks of JIT-island, and probably even
implement a compiler ourselves!&lt;/p&gt;
&lt;h2 id=&quot;what-we-ll-start-with&quot; tabindex=&quot;-1&quot;&gt;What we&#39;ll start with &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/4.how-to-start-jitting/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Knowing some compiler basics, we can assume that every compiler is
transforming input in some format (usually, a source code) into the output in
another or same format (usually, a machine code). JIT compilers are not an
exception.&lt;/p&gt;
&lt;p&gt;What really makes them exceptional, is the fact that they&#39;re running not ahead
of time (like gcc, clang and others), but Just-In-Time (i.e. right before
executing compiler&#39;s output).&lt;/p&gt;
&lt;p&gt;To start developing our own JIT compiler we&#39;ll need to select the input language
for it. Considering &lt;a href=&quot;http://adambard.com/blog/top-github-languages-for-2013-so-far/&quot;&gt;TOP GITHUB LANGUAGES FOR 2013 (SO FAR)&lt;/a&gt;, JavaScript
seems like a good candidate for implementing some limited subset of
it with simplified semantics. Even more, we&#39;ll implement JIT compiler in the
JavaScript itself. You can call it META-META!&lt;/p&gt;
&lt;h2 id=&quot;ast&quot; tabindex=&quot;-1&quot;&gt;AST &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/4.how-to-start-jitting/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Our compiler will accept JavaScript source code as its input, and produce (and
immediately execute) machine code for the very popular X64 platform. But, while
its pretty comfortable for humans to work with a textual representation,
compiler developers are usually tending to create multiple Intermediate
Representations (IR) before generating the final machine code.&lt;/p&gt;
&lt;p&gt;Since we&#39;re writing simplified compiler, having only one IR should be enough for
us, and I&#39;ll choose Abstract Syntax Tree (AST) representation for this purposes.&lt;/p&gt;
&lt;p&gt;Getting AST out of JavaScript code is really easy nowadays, and we can choose
any (of dozens) library we like: &lt;a href=&quot;https://github.com/ariya/esprima&quot;&gt;esprima&lt;/a&gt;, &lt;a href=&quot;https://github.com/ariya/esprima&quot;&gt;uglify-js&lt;/a&gt;, etc. Just to be
on one page with me, I recommend you to choose &lt;a href=&quot;https://github.com/ariya/esprima&quot;&gt;esprima&lt;/a&gt;. It has a nice and
well defined &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API&quot;&gt;output format&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For example, this code: &lt;code&gt;obj.method(42)&lt;/code&gt; will produce the following AST (using
&lt;code&gt;esprima.parse(&amp;quot;...&amp;quot;)&lt;/code&gt;):&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Program&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br&gt;   &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;ExpressionStatement&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;       &lt;span class=&quot;token literal-property property&quot;&gt;expression&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;CallExpression&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token literal-property property&quot;&gt;callee&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br&gt;           &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;MemberExpression&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;             &lt;span class=&quot;token literal-property property&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;             &lt;span class=&quot;token literal-property property&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Identifier&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;obj&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;             &lt;span class=&quot;token literal-property property&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Identifier&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;method&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token literal-property property&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Literal&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;machine-code&quot; tabindex=&quot;-1&quot;&gt;Machine code &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/4.how-to-start-jitting/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let&#39;s summarize: we have JavaScript source (&lt;em&gt;check&lt;/em&gt;), its AST (&lt;em&gt;check&lt;/em&gt;), and we
want to get machine code for it.&lt;/p&gt;
&lt;p&gt;If you&#39;re already familiar with assembly language then you can skip this
chapter, as it contains only basic introductionary material on this topic.
However, if you&#39;re new to it, reading next chapter may be hard without learning
some basics first. So please stay here, it won&#39;t take too long!&lt;/p&gt;
&lt;p&gt;Assembly language is the nearest textual representation of the binary code that
your CPU(s) understand and is(are) able to run. Considering that processors are
executing code by reading and running instructions one-by-one, it may seem
logical to you that almost every line in assembly program represent an
instruction:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mov rax, 1    ; Put 1 into the register named `rax`
mov rbx, 2    ; Put 2 into the register named `rbx`
add rax, rbx  ; Calculate sum of `rax` and `rbx` and put it into `rax`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This program&#39;s output (assuming you&#39;ll get it from &lt;code&gt;rax&lt;/code&gt; register) is 3. And,
as you&#39;ve probably already figured out, it puts some data in some CPU slots
(&lt;a href=&quot;http://en.wikipedia.org/wiki/Processor_register&quot;&gt;registers&lt;/a&gt;) and asks the CPU to calculate the sum of them.&lt;/p&gt;
&lt;p&gt;Usually processors have enough registers to store results of intermediate
operations, but in some situations you may want to store/load data (and work
with it) from the computer&#39;s memory:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mov rax, 1
mov [rbp-8], rbx  ; Save rbx register into a stack slot
mov rbx, 2
add rax, rbx
mov rbx, [rbp-8]  ; Restore rbx register from a stack slot
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Registers have names, memory slots have addresses. These addresses are usually
written using &lt;code&gt;[...]&lt;/code&gt; syntax. For example, &lt;code&gt;[rbp-8]&lt;/code&gt; means: take the value of
the &lt;code&gt;rbp&lt;/code&gt; register, subtract &lt;code&gt;8&lt;/code&gt;, and access a memory slot using the resulting
value as the address.&lt;/p&gt;
&lt;p&gt;You can see that we&#39;re using &lt;code&gt;rbp&lt;/code&gt; register here. &lt;code&gt;rbp&lt;/code&gt; usually contains
address at which on-stack variables storage (i.e. variables that are stored in
current procedure&#39;s &lt;a href=&quot;http://en.wikipedia.org/wiki/Stack_(abstract_data_type)&quot;&gt;stack&lt;/a&gt;) starts; &lt;code&gt;8&lt;/code&gt; is a size of &lt;code&gt;rbx&lt;/code&gt; register (and any
other register, prefixed with &lt;code&gt;r&lt;/code&gt;), and since the &lt;a href=&quot;http://en.wikipedia.org/wiki/Stack_(abstract_data_type)&quot;&gt;stack&lt;/a&gt; is growing upwards,
we need to subtract it from &lt;code&gt;rbp&lt;/code&gt; to get a free address slot for our purposes.&lt;/p&gt;
&lt;p&gt;There are many more nuances of programming at such a low level, and
unfortunately I&#39;m not going to cover all of them here. Also, please be aware
that I gave you a very shallow description, and what actually happens here may
sometimes be much more complex.&lt;/p&gt;
&lt;p&gt;Knowing things mentioned above should be enough to proceed to the code
generation.&lt;/p&gt;
&lt;h2 id=&quot;code-generation&quot; tabindex=&quot;-1&quot;&gt;Code generation &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/4.how-to-start-jitting/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Implementing the entire JavaScript is a rather complicated practice, so we&#39;ll
implement only a simplified arithmetics engine for now. (Which should be as fun
as getting to the whole thing later!)&lt;/p&gt;
&lt;p&gt;The best and the easiest way to do it, is to traverse the AST using
&lt;a href=&quot;http://en.wikipedia.org/wiki/Depth-first_search&quot;&gt;Depth First Search&lt;/a&gt;, generating machine code for each node. You might wonder
how could you generate machine code in a memory-safe language like JavaScript.
That&#39;s where I&#39;m going to introduce you to &lt;a href=&quot;https://github.com/indutny/jit.js&quot;&gt;jit.js&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It is a node.js module (and C++ addon, actually) capable of generating and
execution of machine code, using assembly-like JavaScript syntax:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; jit &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;jit.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; fn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; jit&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Proc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// 42&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;let-s-write-it&quot; tabindex=&quot;-1&quot;&gt;Let&#39;s write it &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/4.how-to-start-jitting/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thus only one thing left now, a module to traverse the AST tree, generated by
&lt;a href=&quot;https://github.com/ariya/esprima&quot;&gt;esprima&lt;/a&gt;. Thankfully, considering its structure and our minimalistic
compiler design it should be pretty easy.&lt;/p&gt;
&lt;p&gt;We&#39;re going to support:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Number literals (&lt;code&gt;{ type: &#39;Literal&#39;, value: 123 }&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Binary expression, with operators: &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;
(&lt;code&gt;{ type: &#39;BinaryExpression&#39;, operator: &#39;+&#39;, left: ... , right: .... }&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Unary expression, with the &lt;code&gt;-&lt;/code&gt; operator
(&lt;code&gt;{ type: &#39;UnaryExpression&#39;, operator: &#39;-&#39;, argument: ... }&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All these operations are performed on integers, so don&#39;t expect it to work
properly with values like &lt;code&gt;0.5&lt;/code&gt;, &lt;code&gt;0.66666&lt;/code&gt;, etc.&lt;/p&gt;
&lt;p&gt;While processing expression, we&#39;ll be visiting each supported AST node of it,
generating code that returns it&#39;s result in the &lt;code&gt;rax&lt;/code&gt; register. Sounds easy,
right? The only rule here is that we should keep all other registers clean
after leaving the AST node. Which, in other words, means that we should save all
registers that are used and restore them after they&#39;re not needed anymore.
Fortunately, CPUs have two magic instructions &lt;code&gt;push&lt;/code&gt; and &lt;code&gt;pop&lt;/code&gt; that can help us
with that task.&lt;/p&gt;
&lt;p&gt;Here is the resulting code with descriptive comments:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; jit &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;jit.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    esprima &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;esprima&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    assert &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;assert&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; ast &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; esprima&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;argv&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// Compile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; fn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; jit&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// This will generate default entry boilerplate&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Proc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ast&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// The result should be in &#39;rax&#39; at this point&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// This will generate default exit boilerplate&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// Execute&lt;/span&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Program&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;visitProgram&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ast&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Literal&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;visitLiteral&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ast&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;UnaryExpression&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;visitUnary&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ast&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;BinaryExpression&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;visitBinary&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ast&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Unknown ast node: &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;visitProgram&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  assert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;               &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;               &lt;span class=&quot;token string&quot;&gt;&#39;Only one statement programs are supported&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  assert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;ExpressionStatement&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;expression&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;visitLiteral&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  assert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;number&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  assert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;               ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;               &lt;span class=&quot;token string&quot;&gt;&#39;Only integer numbers are supported&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;visitBinary&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// Preserve &#39;rbx&#39; after leaving the AST node&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// Visit right side of expresion&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;right&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// Move it to &#39;rbx&#39;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// Visit left side of expression (the result is in &#39;rax&#39;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;left&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// So, to conclude, we&#39;ve left side in &#39;rax&#39; and right in &#39;rbx&#39;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// Execute binary operation&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;operator &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;+&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;operator &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;-&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;operator &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Signed multiplication&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// rax = rax * rbx&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;imul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;operator &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Preserve &#39;rdx&#39;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rdx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// idiv is dividing rdx:rax by rbx, therefore we need to clear rdx&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// before running it&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;xor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rdx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;rdx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Signed division, rax = rax / rbx&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;idiv&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Restore &#39;rdx&#39;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rdx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;operator &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;%&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Preserve &#39;rdx&#39;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rdx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Prepare to execute idiv&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;xor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rdx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;rdx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;idiv&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// idiv puts remainder in &#39;rdx&#39;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;rdx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Restore &#39;rdx&#39;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rdx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Unsupported binary operator: &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;operator&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// Restore &#39;rbx&#39;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rbx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// The result is in &#39;rax&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;visitUnary&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// Visit argument and put result into &#39;rax&#39;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;argument&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;operator &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;-&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Negate argument&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;neg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rax&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Unsupported unary operator: &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;operator&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can try it by cloning it from &lt;a href=&quot;https://github.com/indutny/jit.js/tree/master/example/basic&quot;&gt;github&lt;/a&gt;, running &lt;code&gt;npm install&lt;/code&gt; in it&#39;s
folder and then voila!&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;node&lt;/span&gt; ./main.js &lt;span class=&quot;token string&quot;&gt;&#39;1 + 2 * 3&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thanks for reading up to this point! I&#39;ll talk about floating point operations
and the heap in the next blog post!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>DTrace and the little ustack helper that could</title>
		<link href="https://darksi.de/3.dtrace-ustack-helper/"/>
		<updated>2013-01-11T00:00:00Z</updated>
		<id>https://darksi.de/3.dtrace-ustack-helper/</id>
		<content type="html">&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://darksi.de/img/8T1ihGV-f7-747.avif 747w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://darksi.de/img/8T1ihGV-f7-747.webp 747w&quot;&gt;&lt;img alt=&quot;Flamegraph&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://darksi.de/img/8T1ihGV-f7-747.png&quot; width=&quot;747&quot; height=&quot;326&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.nodejs.org/2012/04/25/profiling-node-js/&quot;&gt;Flamegraphs&lt;/a&gt; are awesome if you need to profile your node.js application.
They provide a nice looking visual view of where your application is spending
its time. Although they&#39;re &lt;a href=&quot;http://blog.nodejs.org/2012/04/25/profiling-node-js/&quot;&gt;well&lt;/a&gt; &lt;a href=&quot;http://dtrace.org/blogs/dap/2012/01/05/where-does-your-node-program-spend-its-time/&quot;&gt;documented&lt;/a&gt;, no one has ever said a
word on how they work internally, but everyone mentions
&amp;quot;ustack helper&amp;quot; which, right now, works only on SmartOS.&lt;/p&gt;
&lt;h1 id=&quot;call-stack&quot; tabindex=&quot;-1&quot;&gt;Call stack &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/3.dtrace-ustack-helper/&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;To understand profiling, one must understand what a callstack is. During its
lifetime every application is using &lt;a href=&quot;http://en.wikipedia.org/wiki/Stack_(abstract_data_type)&quot;&gt;stack&lt;/a&gt;, which is a chunk of memory which can
be changed by using &lt;code&gt;push&lt;/code&gt;, &lt;code&gt;pop&lt;/code&gt;, &lt;code&gt;call&lt;/code&gt; and other CPU instructions, or
by accessing it directly.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;push&lt;/code&gt; and &lt;code&gt;pop&lt;/code&gt; instructions simply expand/shrink stack storing/loading
data on top of it. The &lt;code&gt;call&lt;/code&gt; instruction is a little bit more interesting:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Quote from
&lt;a href=&quot;http://download.intel.com/products/processor/manual/325462.pdf&quot;&gt;Intel® 64 and IA-32 Architectures Software Developer’s Manual&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
    ...the processor pushes the value of the EIP register (which contains the
    offset of the instruction following the CALL instruction) on the stack (for
    use later as a return-instruction pointer). The processor then branches to
    the address in the current code segment specified by the target operand.
&lt;/blockquote&gt;
&lt;p&gt;So coupled with the &lt;code&gt;ret&lt;/code&gt; instruction &lt;code&gt;call&lt;/code&gt; allows you to jump into some
function and return back to the place where it was called. (Despite it&#39;s
simplicity, I still find it amazing.)&lt;/p&gt;
&lt;p&gt;That&#39;s how calling functions really work internally, but stack can be also used
to store local (on-stack) function&#39;s data. This is achieved using stack frames.
This is how functions&#39; assembly code do usually look:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(I&#39;ll use &lt;a href=&quot;http://en.wikipedia.org/wiki/X86_assembly_language#Syntax&quot;&gt;AT&amp;amp;T assembly syntax&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;push ebp ; Save previous frame pointer&lt;br&gt;mov  esp, ebp ; Set new frame pointer&lt;br&gt;sub  $0x60, esp ; Allocate space on stack&lt;br&gt;&lt;br&gt;; Function&#39;s body.&lt;br&gt;mov  $0x10, -0x8(%ebp) ; set on-stack variable&lt;br&gt;&lt;br&gt;mov  ebp, esp ; Shrink stack to it&#39;s initial value&lt;br&gt;pop  ebp ; Restore previous frame pointer&lt;br&gt;ret  0 ; Return to caller&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If represented graphically stack generally looks like this:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://darksi.de/img/1g3z_8Q7Fn-397.avif 397w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://darksi.de/img/1g3z_8Q7Fn-397.webp 397w&quot;&gt;&lt;img alt=&quot;Callstack&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://darksi.de/img/1g3z_8Q7Fn-397.png&quot; width=&quot;397&quot; height=&quot;472&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;The main pros of using structure above are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Easiness of restoring stack back to its initial position&lt;/li&gt;
&lt;li&gt;Fast and simple access to on-stack variables&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;stack-trace&quot; tabindex=&quot;-1&quot;&gt;Stack trace &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/3.dtrace-ustack-helper/&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Suppose your application has thrown an exception or crashed with a segmentation
fault. To find the cause of the problem one may start by looking at the stack
trace where the crash has happened:&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;#0  0x00007fff84356d16 in kevent ()&lt;br&gt;#1  0x00000001000557b7 in kqueue_poll ()&lt;br&gt;#2  0x000000010004c77a in uv__run ()&lt;br&gt;#3  0x000000010004c92a in uv_run ()&lt;br&gt;#4  0x0000000100015319 in node::Start ()&lt;br&gt;#5  0x000000010000dd24 in start ()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, on the left, you can see addresses of functions&#39; code. Debugger gets them
by taking current &lt;code&gt;eip&lt;/code&gt; and &lt;code&gt;ebp&lt;/code&gt; registers (which stands for current
instruction address and current stack frame address), walking stack frames and
collecting return addresses from it. On the right side, you can see functions&#39;
real names. &lt;a href=&quot;http://www.gnu.org/software/gdb/&quot;&gt;gdb&lt;/a&gt; automatically loads this information for you by searching
for debugging symbols corresponding to addresses it has collected.&lt;/p&gt;
&lt;h1 id=&quot;flamegraph&quot; tabindex=&quot;-1&quot;&gt;Flamegraph &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/3.dtrace-ustack-helper/&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;In order to create flamegraph, one will need to periodically collect
application&#39;s stack traces and join them (the process is called
&lt;a href=&quot;http://en.wikipedia.org/wiki/Profiling_(computer_programming)#Statistical_profilers&quot;&gt;statistical profiling&lt;/a&gt;),  making boxes with functions that were called more
often - wider, and putting box on the top of another box only if their functions
appear above each other in the stack trace.&lt;/p&gt;
&lt;h1 id=&quot;v8-s-stack-frames&quot; tabindex=&quot;-1&quot;&gt;V8&#39;s stack frames &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/3.dtrace-ustack-helper/&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;When collecting stack traces of C/C++ application, dtrace will use static
debugging information using binary&#39;s symbols table. But when it comes to dynamic
languages, getting such information turns out to be more complicated:
functions are compiled lazily, often recompiled with applied optimizations, old
code may be evicted by GC... in other words, application is evolving during its
execution.&lt;/p&gt;
&lt;p&gt;Thankfully, V8 provides this information, but instead of debugging symbols
it stores it in stack frames. Here is an example of v8&#39;s stack frame structure:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://darksi.de/img/yVoU9rIBqQ-397.avif 397w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://darksi.de/img/yVoU9rIBqQ-397.webp 397w&quot;&gt;&lt;img alt=&quot;V8 Callstack&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://darksi.de/img/yVoU9rIBqQ-397.png&quot; width=&quot;397&quot; height=&quot;367&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;So knowing this structure we can identify frames by checking marker/function
value and getting function names from V8&#39;s heap (it&#39;s too big topic to cover
here, believe me).&lt;/p&gt;
&lt;p&gt;That&#39;s exactly the job of ustack helper, it takes frame address and should figure
out and return function&#39;s name, or just fail. So everytime you call &lt;code&gt;jstack()&lt;/code&gt;
function in DTrace probe, ustack helper will be called for every unidentified
frame.&lt;/p&gt;
&lt;h1 id=&quot;ustack-helper-example&quot; tabindex=&quot;-1&quot;&gt;ustack helper example &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/3.dtrace-ustack-helper/&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;NOTE: some knowledge of D language is required to fully understand code below&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;language-d&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-d&quot;&gt;dtrace&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;helper&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;ustack&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;/* frame pointer */&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;fp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; arg1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;/* Last statement - result */&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;whoa! you&#39;ve identified me&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you replace contents of &lt;code&gt;src/v8ustack.d&lt;/code&gt; in node.js sources, recompile it
(on SmartOS), run &lt;code&gt;bash benchmark/http-flamegraph.sh&lt;/code&gt;, and open &lt;code&gt;stacks.src&lt;/code&gt;,
which should contain following stack traces:&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;node`_ZN2v88internal7Context14native_contextEv&lt;br&gt;node`_ZN4node10StreamWrap15WriteStringImplILNS_13...&lt;br&gt;node`_ZN4node10StreamWrap15WriteUtf8StringERKN2v89ArgumentsE+0x9&lt;br&gt;whoa! you&#39;ve identified me&lt;br&gt;whoa! you&#39;ve identified me&lt;br&gt;whoa! you&#39;ve identified me&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, DTrace has identified some C++ functions and for all other
addresses has called our ustack helper.&lt;/p&gt;
&lt;p&gt;Let&#39;s read some data from V8&#39;s stack frame:&lt;/p&gt;
&lt;pre class=&quot;language-d&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-d&quot;&gt;#define FP_MARKER &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;#define FT_ENTRY &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;/* Init */&lt;/span&gt;&lt;br&gt;dtrace&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;helper&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;ustack&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;fp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; arg1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;done &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;marker &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;uint64_t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;/* Get marker */&lt;/span&gt;&lt;br&gt;dtrace&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;helper&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;ustack&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;marker &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;uint64_t&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;copyin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;fp &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; FP_MARKER&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                                     &lt;span class=&quot;token function&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;uint64_t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;/* Match entry marker */&lt;/span&gt;&lt;br&gt;dtrace&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;helper&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;ustack&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;marker &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; FT_ENTRY&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;done &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;entry&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;/* Match everything else */&lt;/span&gt;&lt;br&gt;dtrace&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;helper&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;ustack&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;done&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;everything else&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run it again, and if you&#39;re lucky enough you&#39;ll find this in &lt;code&gt;stacks.src&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;everything else&lt;br&gt;everything else&lt;br&gt;entry&lt;br&gt;node`_ZN2v88internalL6InvokeEbNS0...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Important things about ustack helper:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It&#39;s running within kernel (though, in it&#39;s own context, so it can&#39;t crash
it). The most important consequences of it is that user-land addresses can&#39;t
be accessed directly, but only by using &lt;code&gt;copyin()&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;Usage of control flow statements (if/foreach/while) in DTrace scripts is
prohibited, since all probes should terminate in a reasonable time. Otherwise
infinite loop in kernel space will cause your system to halt.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;debugging-ustack-helper&quot; tabindex=&quot;-1&quot;&gt;Debugging ustack helper &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/3.dtrace-ustack-helper/&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;During development of 64bit platform support for node.js ustack helper, I found
that it&#39;s pretty hard to debug ustack helper. The only method to do this is
insertion of probes which are returning some debugging information, and
observing this information later in stack traces.&lt;/p&gt;
&lt;p&gt;Additionally, it&#39;s worth noting that failed &lt;code&gt;copyin()&lt;/code&gt; or any bad memory access
won&#39;t produce any informative output, but you&#39;ll see raw address in stack trace
(i.e. 0x0000000012345678) rather than your pretty real function&#39;s name.&lt;/p&gt;
&lt;h1 id=&quot;epilogue&quot; tabindex=&quot;-1&quot;&gt;Epilogue &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/3.dtrace-ustack-helper/&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;You can look at/play with node&#39;s &lt;a href=&quot;https://github.com/joyent/node/blob/master/src/v8ustack.d&quot;&gt;ustack helper&lt;/a&gt;, big kudos to
&lt;a href=&quot;https://github.com/davepacheco&quot;&gt;Dave Pacheco&lt;/a&gt; for developing it!&lt;/p&gt;
&lt;p&gt;And you should check out Bryan Cantrill&#39;s and Dave Pacheco&#39;s presentation that
explains many things that wasn&#39;t covered in this post:
&lt;a href=&quot;http://www.slideshare.net/bcantrill/goto2012&quot;&gt;Dynamic Languages in Production: Progress and Open Challenges&lt;/a&gt; and
&lt;a href=&quot;http://www.livestream.com/dataweek/video?clipId=pla_59016422-9a89-45be-ac86-64bc4c45fe99&amp;amp;utm_source=lslibrary&amp;amp;utm_medium=ui-thumb&quot;&gt;video&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Huge thanks to &lt;a href=&quot;http://voxer.com/&quot;&gt;Voxer&lt;/a&gt; for funding my investigation and work on porting
DTrace ustack helper to 64bit platform! Guys, I love you. You&#39;re awesome!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Candor returns</title>
		<link href="https://darksi.de/2.candor-returns/"/>
		<updated>2012-11-21T00:00:00Z</updated>
		<id>https://darksi.de/2.candor-returns/</id>
		<content type="html">&lt;p&gt;Before I start diving into the deep sea of compiler internals, I would like to
familiarize you with the &lt;a href=&quot;https://github.com/indutny/candor&quot;&gt;Candor&lt;/a&gt; programming language and its Virtual
Machine.&lt;/p&gt;
&lt;p&gt;This is the thing I was working on last 10 months, and one of the most wonderful
and complex things I&#39;ve been working on since the start of my software
development career.&lt;/p&gt;
&lt;p&gt;Candor is an Ecmascript-inspired language, but while the newer versions of the
Ecmascript standard are adding new functionality and syntax features, my
language aims to make the syntax as simple as possible.&lt;/p&gt;
&lt;h3 id=&quot;no-exceptions&quot; tabindex=&quot;-1&quot;&gt;No exceptions &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/2.candor-returns/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Caller can always be sure that function will return after the call. You should
either invoke a callback with an error argument, return negative number on
error, or do anything else to let caller know about errors that has happened.&lt;/p&gt;
&lt;h3 id=&quot;no-undefined-and-null&quot; tabindex=&quot;-1&quot;&gt;No undefined and null &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/2.candor-returns/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There is the only one value and type that represents undefined value - &lt;code&gt;nil&lt;/code&gt;.
Thus, less checks and a more understandable behaviour of your application.&lt;/p&gt;
&lt;h3 id=&quot;no-implicit-global-variables&quot; tabindex=&quot;-1&quot;&gt;No implicit global variables &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/2.candor-returns/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Every global variable access should be done explicitly, by loading/storing
properties of the &lt;code&gt;global&lt;/code&gt; object. To my mind, it&#39;s the most simplest and
powerful way to prevent global leaks.&lt;/p&gt;
&lt;h3 id=&quot;no-default-runtime&quot; tabindex=&quot;-1&quot;&gt;No default runtime &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/2.candor-returns/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Candor has no default APIs that are doing &#39;high-level&#39; things with objects and
arrays. These routines should be implemented by embedder (like &lt;a href=&quot;https://github.com/indutny/candor.io&quot;&gt;candor.io&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Removing runtime from VM is good in terms of support, less dependencies - less
things to care about, and leaving things out of the core keeps it compact.&lt;/p&gt;
&lt;h3 id=&quot;no-prototype-chains&quot; tabindex=&quot;-1&quot;&gt;No prototype chains &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/2.candor-returns/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Objects are just magic-less hash-maps without special properties like
&lt;code&gt;toString&lt;/code&gt; or &lt;code&gt;__proto__&lt;/code&gt;. Additionally you can have both numeric and string
keys in objects (in other words, &lt;code&gt;a[0]&lt;/code&gt; and &lt;code&gt;a[&#39;0&#39;]&lt;/code&gt; are not the same thing).&lt;/p&gt;
&lt;p&gt;Also there&#39;re no &lt;code&gt;length&lt;/code&gt; property of array, it&#39;s replaced by &lt;code&gt;sizeof&lt;/code&gt; keyword.
Example: &lt;code&gt;sizeof [1,2,3] == 3&lt;/code&gt; or even &lt;code&gt;sizeof &amp;quot;string&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;no-complicated-type-coercion&quot; tabindex=&quot;-1&quot;&gt;No complicated type coercion &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/2.candor-returns/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Objects, arrays and nil are always converted either to empty string or to zero,
depending on type of another argument. For example, this lets you increment
uninitialized variables without getting any errors or unexpected behaviour:
&lt;code&gt;nil + 1 == 1&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;dart-like-function-syntax&quot; tabindex=&quot;-1&quot;&gt;Dart-like function syntax &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/2.candor-returns/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;No &lt;code&gt;function&lt;/code&gt; keyword, yay! Just write:&lt;/p&gt;
&lt;pre class=&quot;language-dart&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-dart&quot;&gt;&lt;span class=&quot;token function&quot;&gt;function_name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arguments&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;//body&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;syntax&quot; tabindex=&quot;-1&quot;&gt;Syntax &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/2.candor-returns/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can learn more about syntax and play with it on &lt;a href=&quot;http://candor-lang.org/&quot;&gt;the official website&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;compiler&quot; tabindex=&quot;-1&quot;&gt;Compiler &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/2.candor-returns/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Since the &lt;a href=&quot;https://github.com/indutny/candor/commit/f3b1ebf3a839e32fcafa14b21af3&quot;&gt;start of this year&lt;/a&gt; I have been working on delivering very
primitive JIT compiler and VM for Candor. The first version was generating
pretty ugly machine code, which was ineffective and massive.&lt;/p&gt;
&lt;p&gt;It was using the following algorithm:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Visit AST node.&lt;/li&gt;
&lt;li&gt;Generate all it&#39;s children, and place their results into &lt;code&gt;rax&lt;/code&gt;, &lt;code&gt;rbx&lt;/code&gt;, &lt;code&gt;rcx&lt;/code&gt;
(depending on child&#39;s index). (Just in case - &lt;a href=&quot;http://en.wikipedia.org/wiki/X86-64&quot;&gt;x86-64&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Generate code that calculates the result of operation and return value in
&lt;code&gt;rax&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pros - fast compilation, easy to understand algorithm. Cons - hard way to deal
with different CPU architectures (i.e. it needed more than 6 registers), dumb
generated machine code.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href=&quot;https://code.google.com/p/v8/&quot;&gt;v8&lt;/a&gt; and &lt;a href=&quot;http://www.dartlang.org/&quot;&gt;Dart&lt;/a&gt; hacker &lt;a href=&quot;http://mrale.ph/&quot;&gt;Vyacheslav Egorov&lt;/a&gt; and
&lt;a href=&quot;http://wingolog.org/&quot;&gt;Andy Wingo&#39;s blog&lt;/a&gt;, I&#39;ve figured out that &lt;a href=&quot;https://github.com/indutny/candor/wiki/Compiler-papers&quot;&gt;there&#39;re much better ways&lt;/a&gt; to
do JIT code generation, but it was too complex for me to understand at that
time. And despite I&#39;ve created new branch &lt;code&gt;feature-ssa&lt;/code&gt; and written tons of
code, I&#39;ve never got something truly working.&lt;/p&gt;
&lt;p&gt;I got stuck at implementing registry allocator, mostly because of wrong design
decisions that I made before, and continuing development of this branch in this
form was impossible.&lt;/p&gt;
&lt;p&gt;That&#39;s why I took a long break (for almost 6 months) and worked on other
projects, until I realized how this thing should be implemented.&lt;/p&gt;
&lt;h2 id=&quot;candor-returns&quot; tabindex=&quot;-1&quot;&gt;Candor returns &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/2.candor-returns/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After this pause I&#39;ve considered many things and finally did it. Even more,
Candor now has two compilers: non-optimizing and optimizing. The non-optimizing
is used where it needs to compile a lot of source as fast as possible, and the
optimizing compiler is used for small functions that might be quickly optimized.&lt;/p&gt;
&lt;p&gt;Main things that helped me to got to this state:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Understanding how &lt;a href=&quot;http://en.wikipedia.org/wiki/Control_flow_graph&quot;&gt;CFG&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Static_single_assignment_form&quot;&gt;SSA&lt;/a&gt; should be really handled and
represented. CFG is a way to represent tree of input source code (AST) in a
linear form, by placing instructions in blocks and connecting them with the
control-flow edges like: goto and branch (which is used in &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;while&lt;/code&gt;
statements). What I was missing is that the instruction and it&#39;s value should
be the same object, otherwise it&#39;s very problematic to exploit
&lt;a href=&quot;http://en.wikipedia.org/wiki/Use-define_chain&quot;&gt;def-use chains&lt;/a&gt;, which are very useful for getting type information and
performing dead code elimination.&lt;/li&gt;
&lt;li&gt;I was detecting variable conflicts in the blocks with two incoming
edges in a over-complicated way. I was using lists of active variables and
performing very complex analysis to propagate them to blocks that needed
them. Apparently, it&#39;s very cool and simple to do it in a way v8 does it. By
creating environment for each basic block in CFG, placing variables into it
and copying it as-it-is when adding successor to the block.&lt;/li&gt;
&lt;li&gt;I didn&#39;t understand that low-level intermediate representation should
operate on &lt;code&gt;uses&lt;/code&gt; which a parts of variable&#39;s liveness intervals... Previous
version was doing simplified linear-scan register allocation without holes in
variable&#39;s liveness intervals, which isn&#39;t resulting in good allocation.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The main difference between optimizing and non-optimizing compiler is that the
former is trying to place everything in registers, while the latter operates
only on the stack slots (i.e. doing memory access on every variable load and
store).&lt;/p&gt;
&lt;p&gt;By having a register allocator that&#39;s capable of allocating registers in very
generic terms, it was really straightforward to add support for a 32bit code
generation. And now Candor is officially running on two platforms: ia32 and x64.&lt;/p&gt;
&lt;h2 id=&quot;plans&quot; tabindex=&quot;-1&quot;&gt;Plans &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/2.candor-returns/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that there are two brand new compilers, I&#39;m going to work on adaptive
optimization/deoptimization for it. Candor should be capable of optimizing
hot functions on the fly and inlining small functions into their callers. Also,
it&#39;s quite practical to generate code that&#39;s very fast in common cases, and
falls back to unoptimized code in all other cases.&lt;/p&gt;
&lt;p&gt;ARM support is also the part of my future plans for Candor, and I&#39;ll start
working on it as soon as I&#39;ll receive my Raspberry PI.&lt;/p&gt;
&lt;h2 id=&quot;more-info&quot; tabindex=&quot;-1&quot;&gt;More info &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/2.candor-returns/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you want to ask questions and/or learn more about Candor you can subscribe to
our &lt;a href=&quot;https://groups.google.com/forum/?fromgroups&amp;amp;hl=en#!forum/candorlang&quot;&gt;google group&lt;/a&gt; or join the #candor IRC channel on freenode.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>To lock, or not to lock</title>
		<link href="https://darksi.de/1.to-lock-or-not-to-lock/"/>
		<updated>2012-10-11T00:00:00Z</updated>
		<id>https://darksi.de/1.to-lock-or-not-to-lock/</id>
		<content type="html">&lt;h1 id=&quot;tl-dr&quot; tabindex=&quot;-1&quot;&gt;TL;DR &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/1.to-lock-or-not-to-lock/&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;As I&#39;ve promised you in my &lt;a href=&quot;https://darksi.de/0.benchmarking-tls/&quot;&gt;previous post&lt;/a&gt;, I made &lt;a href=&quot;https://github.com/indutny/tlsnappy&quot;&gt;TLSnappy&lt;/a&gt; balance and
handle requests a little bit better.&lt;/p&gt;
&lt;h1 id=&quot;data-flow&quot; tabindex=&quot;-1&quot;&gt;Data flow &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/1.to-lock-or-not-to-lock/&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;For leveraging all available CPUs TLSnappy runs multiple threads that are each
picking and processing tasks from their dispatch queues, one by one. Tasks are
created from node&#39;s event-loop in following cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data comes from client and should be decrypted&lt;/li&gt;
&lt;li&gt;Data from server should be encrypted&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, as you can see, each thread is receiving data from it&#39;s inputs (either
&lt;code&gt;encrypted&lt;/code&gt; or &lt;code&gt;clear&lt;/code&gt;) and/or emitting data to it&#39;s outputs. This pattern
apparently requires a lot of data transfer &lt;code&gt;to&lt;/code&gt; and &lt;code&gt;from&lt;/code&gt; worker threads and
requires storing (buffering) that data in some temporary storage before
processing it.&lt;/p&gt;
&lt;p&gt;To my mind, best structure to fit this needs is &lt;a href=&quot;http://en.wikipedia.org/wiki/Circular_buffer&quot;&gt;Circular (Ring) buffer&lt;/a&gt;.
Because it&#39;s fast, can be grown if more than it&#39;s current capacity needs to be
held.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/indutny/tlsnappy/blob/old-ring/src/ring.h&quot;&gt;Naive version&lt;/a&gt; of it was good enough to try out things, but it wasn&#39;t
supposed to be run in a multi-threaded concurrent environment - all access to
this buffer can take place only in a &lt;a href=&quot;http://en.wikipedia.org/wiki/Critical_section&quot;&gt;critical section&lt;/a&gt;. This means that at
any time only one thread may access the ring&#39;s methods or properties. You might
think that this doesn&#39;t make difference, but, according to &lt;a href=&quot;http://en.wikipedia.org/wiki/Amdahl&#39;s_law&quot;&gt;Amdahl&#39;s law&lt;/a&gt;,
reducing time spent in non-parallelizable (sequential) parts of application is
much more critical for overall performance than speeding up parallel parts.&lt;/p&gt;
&lt;h1 id=&quot;lock-less-ring-buffer&quot; tabindex=&quot;-1&quot;&gt;Lock-less ring buffer &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/1.to-lock-or-not-to-lock/&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Removing locks seemed to be essential for achieving better performance, however
a special structure needs to be used in order to make a ring buffer work across
multiple CPUs. Here is the structure I chose for it:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://darksi.de/img/esP-7oyjWx-480.avif 480w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://darksi.de/img/esP-7oyjWx-480.webp 480w&quot;&gt;&lt;img alt=&quot;Ring buffer&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://darksi.de/img/esP-7oyjWx-480.png&quot; width=&quot;480&quot; height=&quot;350&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;Ring consists of pages that&#39;re forming circular linked list, each page has two
offsets: reader (&lt;code&gt;roffset&lt;/code&gt;) and writer (&lt;code&gt;woffset&lt;/code&gt;). And there&#39;re two special
pages (which could be the same one actually): reader head (&lt;code&gt;rhead&lt;/code&gt;) and writer
head (&lt;code&gt;whead&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Initially the ring contains only one page which is &lt;code&gt;rhead&lt;/code&gt; and &lt;code&gt;whead&lt;/code&gt; at the
same time. When the producer wants to put data in - it goes to the &lt;code&gt;whead&lt;/code&gt;,
copies data into the page, increments &lt;code&gt;woffset&lt;/code&gt; and if the page is full - it
create a new page, or reuses an old one that doesn&#39;t contain any un-read data.
Consumer takes &lt;code&gt;rhead&lt;/code&gt; reads up to &lt;code&gt;woffset - roffset&lt;/code&gt; bytes from it, increments
&lt;code&gt;roffset&lt;/code&gt; and moves to the next page if &lt;code&gt;roffset&lt;/code&gt; is equal to the size of the
page.&lt;/p&gt;
&lt;p&gt;So here are benchmarks:&lt;/p&gt;
&lt;p&gt;Without lock-less ring:&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;Transactions:                 200000 hits&lt;br&gt;Availability:                 100.00 %&lt;br&gt;Elapsed time:                  47.90 secs&lt;br&gt;Data transferred:             585.37 MB&lt;br&gt;Response time:                  0.02 secs&lt;br&gt;Transaction rate:            4175.37 trans/sec&lt;br&gt;Throughput:                    12.22 MB/sec&lt;br&gt;Concurrency:                   98.79&lt;br&gt;Successful transactions:      200000&lt;br&gt;Failed transactions:               0&lt;br&gt;Longest transaction:            0.09&lt;br&gt;Shortest transaction:           0.00&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With lock-less ring:&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;Transactions:                 200000 hits&lt;br&gt;Availability:                 100.00 %&lt;br&gt;Elapsed time:                  47.37 secs&lt;br&gt;Data transferred:             585.37 MB&lt;br&gt;Response time:                  0.02 secs&lt;br&gt;Transaction rate:            4222.08 trans/sec&lt;br&gt;Throughput:                    12.36 MB/sec&lt;br&gt;Concurrency:                   98.83&lt;br&gt;Successful transactions:      200000&lt;br&gt;Failed transactions:               0&lt;br&gt;Longest transaction:            0.12&lt;br&gt;Shortest transaction:           0.00&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, performance hasn&#39;t greatly improved and is actually almost
beyond statistical error (which means that results are nearly the same). However
these are results for small 3kb page, lets try sending some big 100kb buffers.&lt;/p&gt;
&lt;p&gt;Without lock-less ring:&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;Transactions:                 100000 hits&lt;br&gt;Availability:                 100.00 %&lt;br&gt;Elapsed time:                  64.06 secs&lt;br&gt;Data transferred:            9536.74 MB&lt;br&gt;Response time:                  0.06 secs&lt;br&gt;Transaction rate:            1561.04 trans/sec&lt;br&gt;Throughput:                   148.87 MB/sec&lt;br&gt;Concurrency:                   98.59&lt;br&gt;Successful transactions:      100000&lt;br&gt;Failed transactions:               0&lt;br&gt;Longest transaction:            1.93&lt;br&gt;Shortest transaction:           0.00&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With lock-less ring:&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;Transactions:                 100000 hits&lt;br&gt;Availability:                 100.00 %&lt;br&gt;Elapsed time:                  58.73 secs&lt;br&gt;Data transferred:            9536.74 MB&lt;br&gt;Response time:                  0.06 secs&lt;br&gt;Transaction rate:            1702.71 trans/sec&lt;br&gt;Throughput:                   162.38 MB/sec&lt;br&gt;Concurrency:                   98.98&lt;br&gt;Successful transactions:      100000&lt;br&gt;Failed transactions:               0&lt;br&gt;Longest transaction:            0.19&lt;br&gt;Shortest transaction:           0.00&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wow! That&#39;s much better - about 9% performance improvement.&lt;/p&gt;
&lt;h1 id=&quot;instruments&quot; tabindex=&quot;-1&quot;&gt;Instruments &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/1.to-lock-or-not-to-lock/&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Still TLSnappy&#39;s performance wasn&#39;t even close to what nginx is capable of
(~5100 requests per second). Thus it was necessary to continue investigation and
this is where &lt;a href=&quot;https://developer.apple.com/library/mac/#documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/Introduction/Introduction.html&quot;&gt;Instruments.app&lt;/a&gt; comes into play, which is basically an UI for some
very useful dtrace scripts. I&#39;ve run the &lt;code&gt;CPU Sampler&lt;/code&gt; utility and this is what
the call tree looked like:
&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://darksi.de/img/KaTGFefVxh-640.avif 640w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://darksi.de/img/KaTGFefVxh-640.webp 640w&quot;&gt;&lt;img alt=&quot;Original node&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://darksi.de/img/KaTGFefVxh-640.png&quot; width=&quot;640&quot; height=&quot;404&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;Obviously it spends almost 30% of time in synchronization between threads,
particularly in &lt;code&gt;CRYPTO_add_lock&lt;/code&gt; function:
&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://darksi.de/img/IyHsVLZOjt-451.avif 451w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://darksi.de/img/IyHsVLZOjt-451.webp 451w&quot;&gt;&lt;img alt=&quot;Old CRYPTO_add_lock&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://darksi.de/img/IyHsVLZOjt-451.png&quot; width=&quot;451&quot; height=&quot;276&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;After modifying the code to use atomic operations, which are supported by almost
every CPU nowadays):
&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://darksi.de/img/_efe9aMzp1-473.avif 473w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://darksi.de/img/_efe9aMzp1-473.webp 473w&quot;&gt;&lt;img alt=&quot;New CRYPTO_add_lock&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://darksi.de/img/_efe9aMzp1-473.png&quot; width=&quot;473&quot; height=&quot;361&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;Call tree locked like this:
&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://darksi.de/img/v0MjasxvH8-665.avif 665w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://darksi.de/img/v0MjasxvH8-665.webp 665w&quot;&gt;&lt;img alt=&quot;Patched node&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://darksi.de/img/v0MjasxvH8-665.png&quot; width=&quot;665&quot; height=&quot;407&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;h1 id=&quot;results&quot; tabindex=&quot;-1&quot;&gt;Results &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/1.to-lock-or-not-to-lock/&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;I&#39;ve opened &lt;a href=&quot;https://github.com/joyent/node/pull/4105&quot;&gt;pull request for node.js&lt;/a&gt; and sent the same patches to the
openssl-dev mailing list. With patched node and latest tlsnappy these are the
benchmark results:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://darksi.de/img/BRRxxvW5zt-597.avif 597w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://darksi.de/img/BRRxxvW5zt-597.webp 597w&quot;&gt;&lt;img alt=&quot;Requests per second&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://darksi.de/img/BRRxxvW5zt-597.png&quot; width=&quot;597&quot; height=&quot;369&quot;&gt;&lt;/picture&gt;
&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://darksi.de/img/mY3nYrAyPR-597.avif 597w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://darksi.de/img/mY3nYrAyPR-597.webp 597w&quot;&gt;&lt;img alt=&quot;Average load&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://darksi.de/img/mY3nYrAyPR-597.png&quot; width=&quot;597&quot; height=&quot;367&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;And that&#39;s without patches:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://darksi.de/img/1RgcbbKMC2-748.avif 748w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://darksi.de/img/1RgcbbKMC2-748.webp 748w&quot;&gt;&lt;img alt=&quot;Requests per second&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://darksi.de/img/1RgcbbKMC2-748.png&quot; width=&quot;748&quot; height=&quot;439&quot;&gt;&lt;/picture&gt;
&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://darksi.de/img/gkPsNNFuzc-596.avif 596w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://darksi.de/img/gkPsNNFuzc-596.webp 596w&quot;&gt;&lt;img alt=&quot;Average load&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://darksi.de/img/gkPsNNFuzc-596.png&quot; width=&quot;596&quot; height=&quot;368&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;A little comment about curve names here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;default&lt;/code&gt; - one tlsnappy process with 16 threads&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hybrid&lt;/code&gt; - 4 tlsnappy processes with 4 threads each&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cluster&lt;/code&gt; - 16 tlsnappy processes with 1 thread each&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http&lt;/code&gt; - 16 node.js processes in cluster&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The work is unfinished yet, but now I know that OpenSSL doesn&#39;t really behave
well when used in multithreaded application.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Benchmarking TLS, TLSnappy and NGINX</title>
		<link href="https://darksi.de/0.benchmarking-tls/"/>
		<updated>2012-10-02T00:00:00Z</updated>
		<id>https://darksi.de/0.benchmarking-tls/</id>
		<content type="html">&lt;h1 id=&quot;tl-dr&quot; tabindex=&quot;-1&quot;&gt;TL;DR &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/0.benchmarking-tls/&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;I&#39;ve created &lt;a href=&quot;https://github.com/indutny/tlsnappy&quot;&gt;TLSnappy&lt;/a&gt; module which is going to be faster than internal TLS
module in node.js. So far it&#39;s slower on some benchmarks, but it&#39;ll definitely
be much snappier soon.&lt;/p&gt;
&lt;h1 id=&quot;preface&quot; tabindex=&quot;-1&quot;&gt;Preface &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/0.benchmarking-tls/&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Many people were complaining about &lt;a href=&quot;http://nodejs.org/api/tls.html&quot;&gt;tls&lt;/a&gt; performance in node.js, which (as
they said) was significantly worse than in many other popular web servers,
balancers and terminators (i.e. nginx, haproxy..).&lt;/p&gt;
&lt;p&gt;Several things were done to address this issue, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Disabling OpenSSL compression in node, see &lt;a href=&quot;http://journal.paul.querna.org/articles/2011/04/05/openssl-memory-use/&quot;&gt;Paul Querna&#39;s article&lt;/a&gt; and &lt;a href=&quot;https://github.com/joyent/node/commit/e83c695&quot;&gt;Node.js commit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/joyent/node/commit/e80cac62&quot;&gt;Bundling a newer version of OpenSSL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/joyent/node/compare/7651228...e0e9f0c&quot;&gt;Enabling inlined assembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/joyent/node/commit/7651228&quot;&gt;Using slab allocator to reduce memory allocation overhead&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After all that stuff got in, rps (requests per second) rate was significantly
improved, but many users were still unhappy with overall TLS performance.&lt;/p&gt;
&lt;h1 id=&quot;tlsnappy&quot; tabindex=&quot;-1&quot;&gt;TLSnappy &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/0.benchmarking-tls/&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;This time, instead of patching and tweaking &lt;a href=&quot;http://nodejs.org/api/tls.html&quot;&gt;tls&lt;/a&gt; I decided that it may be
worth trying to rewrite it from scratch as a third-party node.js addon. This
recently became &lt;a href=&quot;https://github.com/TooTallNate/node-gyp/wiki/Linking-to-OpenSSL&quot;&gt;possible&lt;/a&gt;, thanks to &lt;a href=&quot;https://github.com/TooTallNate&quot;&gt;Nathan Rajlich&lt;/a&gt; and his awesome
node.js native addon build tool &lt;a href=&quot;https://github.com/TooTallNate/node-gyp&quot;&gt;node-gyp&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I didn&#39;t want to offer a module that&#39;s functionally equivalent to TLS, but
wanted to fix some issues (as I&#39;ve perceived them) and improve few things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Encryption/decryption should happen asynchronously (i.e. in other thread).
This could potentially speed up initial ssl handshake, and let the event loop
perform more operations while encryption/decryption is happening in the
background.&lt;/li&gt;
&lt;li&gt;The builtin TLS module passes, slices and copies buffers in &lt;a href=&quot;https://github.com/indutny/tlsnappy&quot;&gt;javascript&lt;/a&gt;.
All binary data operations should happen in C++.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All this was implemented in &lt;a href=&quot;https://github.com/indutny/tlsnappy&quot;&gt;TLSnappy&lt;/a&gt; module.&lt;/p&gt;
&lt;p&gt;There were a lot of availability and stability issues (and surely much more that
I&#39;m yet unaware of). But tlsnappy seem to be quite a bit more performant than
the built-in tls module. Especially... when taking in account that &lt;code&gt;tlsnappy&lt;/code&gt; is
by default using all available cores to encrypt/decrypt requests, while &lt;code&gt;tls&lt;/code&gt;
module needs to be run in &lt;a href=&quot;http://nodejs.org/api/cluster.html&quot;&gt;cluster&lt;/a&gt; to balance load between all cores.&lt;/p&gt;
&lt;h1 id=&quot;benchmarking&quot; tabindex=&quot;-1&quot;&gt;Benchmarking &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/0.benchmarking-tls/&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;And I&#39;ve confirmed that when I was benchmaring it with Apache Benchmark (ab) on
my Macbook Pro and on dedicated Xeon server. Here a results from the latter one:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://darksi.de/img/oA-F8MEs7a-597.avif 597w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://darksi.de/img/oA-F8MEs7a-597.webp 597w&quot;&gt;&lt;img alt=&quot;Xeon 16 threads (rps) - Apache Benchmark&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://darksi.de/img/oA-F8MEs7a-597.png&quot; width=&quot;597&quot; height=&quot;370&quot;&gt;&lt;/picture&gt;
&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://darksi.de/img/XccLbpLWIB-597.avif 597w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://darksi.de/img/XccLbpLWIB-597.webp 597w&quot;&gt;&lt;img alt=&quot;Xeon 16 threads (ms) - Apache Benchmark&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://darksi.de/img/XccLbpLWIB-597.png&quot; width=&quot;597&quot; height=&quot;369&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;A little comment about curve names here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;default&lt;/code&gt; - one tlsnappy process with 16 threads&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hybrid&lt;/code&gt; - 4 tlsnappy processes with 4 threads each&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cluster&lt;/code&gt; - 16 tlsnappy processes with 1 thread each&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http&lt;/code&gt; - 16 node.js processes in cluster&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you can see tlsnappy is faster than tls server in almost every case, except
&lt;code&gt;cluster&lt;/code&gt; mode (which just wasn&#39;t saturating CPU enough). Everything looked
great and shiny, until &lt;a href=&quot;https://github.com/mranney&quot;&gt;Matt Ranney&lt;/a&gt; has pointed out that &lt;code&gt;ab&lt;/code&gt; results of
https benchmarks are not really trustful:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet tw-align-center&quot;&gt;&lt;p&gt;@&lt;a href=&quot;https://twitter.com/ryah&quot;&gt;ryah&lt;/a&gt; @&lt;a href=&quot;https://twitter.com/indutny&quot;&gt;indutny&lt;/a&gt; I was also mislead by &quot;ab&quot; with https benchmarks. I&#39;m not sure what tool to use instead though.&lt;/p&gt;&amp;mdash; Matt Ranney (@mranney) &lt;a href=&quot;https://twitter.com/mranney/status/252137849468633088&quot; data-datetime=&quot;2012-09-29T20:08:42+00:00&quot;&gt;September 29, 2012&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;I&#39;ve installed siege, created node.js &lt;a href=&quot;https://github.com/indutny/tlsnappy/blob/master/benchmark/script.js&quot;&gt;script&lt;/a&gt; and let it run for some time:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://darksi.de/img/1RgcbbKMC2-748.avif 748w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://darksi.de/img/1RgcbbKMC2-748.webp 748w&quot;&gt;&lt;img alt=&quot;Xeon 16 threads (rps) - Siege &quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://darksi.de/img/1RgcbbKMC2-748.png&quot; width=&quot;748&quot; height=&quot;439&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;Results are much better now (nginx was doing 5000 rps with siege and 2500 rps
with ab), but now tlsnappy seems to be slower than node.js&#39; default tls server.&lt;/p&gt;
&lt;p&gt;I started investigation and decided to track not only rps rate, but a CPU load
too:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://darksi.de/img/gkPsNNFuzc-596.avif 596w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://darksi.de/img/gkPsNNFuzc-596.webp 596w&quot;&gt;&lt;img alt=&quot;Xeon 16 threads (load) - Siege &quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://darksi.de/img/gkPsNNFuzc-596.png&quot; width=&quot;596&quot; height=&quot;368&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;h1 id=&quot;afterword&quot; tabindex=&quot;-1&quot;&gt;Afterword &lt;a class=&quot;header-anchor&quot; href=&quot;https://darksi.de/0.benchmarking-tls/&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Right now, as you can see on the chart above, tlsnappy isn&#39;t saturating all CPUs
well. I suspect this is a major reason of its relative slowness in comparison
to both nginx and https module. I&#39;m working on making it balance and handle
requests better, and will sum up results of this investigation in the next blog
post.&lt;/p&gt;
&lt;p&gt;For those of you, who are interested in more details -
&lt;a href=&quot;https://docs.google.com/spreadsheet/ccc?key=0AhEDnA4M4EKGdDIwb3VYZTd1alA5T1pTVnlQWl9wanc&quot;&gt;here is benchmarks&#39; data&lt;/a&gt;&lt;/p&gt;
</content>
	</entry>
</feed>
